{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/protocol-buffer-3-spec정리/","result":{"data":{"markdownRemark":{"html":"<p>프로토콜 버퍼(Protocol Buffer)는 gRPC에서 데이터의 스키마를 정의하고 직렬화할때 사용하는 메커니즘입니다. google에서 개발했으며, *.proto형식의 메시지 뿐만 아니라, JSON등의 데이터를 직렬화할때도 사용되는 방식이고, gRPC에서 직렬화 방식으로 사용되고 있습니다.</p>\n<p>프로토콜 버퍼가 gRPC에서 어떻게 동작하는지는 링크:이전 글을 참조해주세요</p>\n<p>이 글에서는 Protocol Buffer3(Proto3)에서 스키마를 정의하는 방법들 중, 기본적인 내용에 대해 다룹니다.</p>\n<h2 id=\"메시지를-정의하는-방법\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%8B%9C%EC%A7%80%EB%A5%BC-%EC%A0%95%EC%9D%98%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"메시지를 정의하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메시지를 정의하는 방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">syntax</span><span class=\"token operator\">=</span> <span class=\"token string\">\"proto3\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">SearchRequest</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token builtin\">string</span> query<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin\">int32</span> page_number<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token builtin\">int32</span> result_per_page<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nC/C++ Style Comment\n*/</span>\n<span class=\"token comment\">//C/C++ Style Comment</span></code></pre></div>\n<p>위의 프로토콜 버퍼는 아래와 같은 특징을 가지고 있습니다.</p>\n<ul>\n<li><strong>확장자:</strong> .proto 입니다.</li>\n<li><strong>버전 명시:</strong> 주석, 빈 라인을 제외한 첫 번째 라인에  Proto3 임을 명시해주어야 합니다.  (아니면 기본값 proto2로 지정)</li>\n<li><strong>필드 정의 :</strong> string,int32/64와 같은 타입과 , query, page_number같은 이름의 쌍으로 필드를 정의합니다. (참고로, 필드명은 snake case, 메시지명은 cammel case를 권장하고있습니다)</li>\n<li><strong>주석</strong> : C/C++스타일 주석으로, “//” 와 “/**/” 를 사용할 수 잇습니다.</li>\n<li><strong>필드번호 정의:</strong> 필드번호는 메시지 내 유일한 숫자로 지정해줍니다.\n<ul>\n<li>필드번호를 통해 이진 포멧에서 필드를 식별할 수 있고, 메시지 유형이 사용된경우 변경하면 안됩니다.</li>\n<li>1-15 까지의 번호는 1바이트만 사용하지만, 16~2047은 2바이트, 번호가 커질수록 사용하는 바이트 수가 늘어납니다. 또한, 19000 ~19999까지는 예약된 필드번호로, 사용이 불가능합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"필드-규칙\" style=\"position:relative;\"><a href=\"#%ED%95%84%EB%93%9C-%EA%B7%9C%EC%B9%99\" aria-label=\"필드 규칙 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>필드 규칙</h3>\n<p>메시지의 필드는 아래 4개중 하나의 타입에 해당합니다.</p>\n<p>Proto3에서는 <strong>field presence</strong>라는 개념이 존재합니다. 자세한 내용은 링크(<a href=\"https://protobuf.dev/programming-guides/field_presence/\">https://protobuf.dev/programming-guides/field_presence/</a>)를 참고하시면 되고, 필드 규칙을 이해하기 위해서는 [ explicit, no ] present의 개념에 대해서만 이해하면 됩니다.</p>\n<p><strong>explicit present</strong>: 명시적으로 값이 존재하는지를 저장하는 값 체계</p>\n<p><strong>no present</strong>: 값이 존재하는지 아닌지를 노출하지 않고, 기본값을 통해 대치하는 방식</p>\n<p><a href=\"https://protobuf.dev/programming-guides/field_presence/\">https://protobuf.dev/programming-guides/field_presence/</a></p>\n<ul>\n<li>singular: proto3에서 규칙을 지정하지 않으면 기본값으로 사용됩니다. no-present방식의 값 체계를 따릅니다.</li>\n<li>optional: proto2에서 기본으로 사용되었으며, 직렬화 시 explicit present방식을 사용합니다.</li>\n<li>repeated : 반복되는 값에 대해 사용합니다. key-value로 매핑되지만, packed옵션을 통해 값만 반복하도록 설정할 수 있습니다.</li>\n<li>map: key-value형태의 값에 대해 사용합니다.</li>\n</ul>\n<h3 id=\"기본값\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B0%92\" aria-label=\"기본값 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본값</h3>\n<p><strong>메시지 파싱 시, 특정 필드가 지정되어있지 않으면 필드는 기본값으로 설정됩니다!</strong> 그러므로, <strong>메시지 필드가 직렬화 이후 파싱되었을 때, 필드의 값이 기본값인지 지정되지 않았던것인지 판단할 수 없습니다.  주의해야합니다.</strong></p>\n<p>각 타입별 기본값입니다.</p>\n<ul>\n<li>string- 빈 문자열</li>\n<li>bool - false</li>\n<li>숫자타입 - 0</li>\n<li>enum- 첫 번째로 정의된 열거형 값이고, 0 이어야 함.</li>\n<li>repeated - 빈 배열(언어에 따라 다릅니다)</li>\n</ul>\n<h2 id=\"proto3-필드-타입과-각-언어별-자료형-매핑\" style=\"position:relative;\"><a href=\"#proto3-%ED%95%84%EB%93%9C-%ED%83%80%EC%9E%85%EA%B3%BC-%EA%B0%81-%EC%96%B8%EC%96%B4%EB%B3%84-%EC%9E%90%EB%A3%8C%ED%98%95-%EB%A7%A4%ED%95%91\" aria-label=\"proto3 필드 타입과 각 언어별 자료형 매핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>proto3 필드 타입과 각 언어별 자료형 매핑</h2>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226088289-7eabb332-4681-44f1-9ffd-5a67e0906b0d.png\" alt=\"프로토콜버\"></p>\n<p>출처: <a href=\"https://protobuf.dev\">https://protobuf.dev</a></p>\n<h3 id=\"메시지-정의-유형\" style=\"position:relative;\"><a href=\"#%EB%A9%94%EC%8B%9C%EC%A7%80-%EC%A0%95%EC%9D%98-%EC%9C%A0%ED%98%95\" aria-label=\"메시지 정의 유형 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메시지 정의 유형</h3>\n<p>하나의 파일에서 여러개의 메시지를 정의할 수 있으며, 정의한 메시지를 다른 메시지에서 타입으로 사용할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">message</span> <span class=\"token class-name\">SearchResponse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">repeated</span> <span class=\"token positional-class-name class-name\">Result</span> results <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">string</span> url <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">string</span> title <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">repeated</span> <span class=\"token builtin\">string</span> snippets <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>메시지를 원하는만큼 중첩해 정의할 수 있으며, 메시지 내부에 정의된 메시지는 부모  메시지로부터 참조해야합니다</p>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">message</span> <span class=\"token class-name\">SearchResponse</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">message</span> <span class=\"token class-name\">Result</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">string</span> url <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">string</span> title <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">repeated</span> <span class=\"token builtin\">string</span> snippets <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">repeated</span> <span class=\"token positional-class-name class-name\">Result</span> results <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">SomeOtherMessage</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token positional-class-name class-name\">SearchResponse<span class=\"token punctuation\">.</span>Result</span> result <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"여러가지-타입들\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EB%9F%AC%EA%B0%80%EC%A7%80-%ED%83%80%EC%9E%85%EB%93%A4\" aria-label=\"여러가지 타입들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>여러가지 타입들</h2>\n<h3 id=\"map\" style=\"position:relative;\"><a href=\"#map\" aria-label=\"map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map</h3>\n<p>Map을 통해 키와 값을 매핑시킬 수 있으며, 기본 형식은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token map class-name\">map<span class=\"token punctuation\">&lt;</span>key_type<span class=\"token punctuation\">,</span> value_type<span class=\"token punctuation\">></span></span> map_field <span class=\"token operator\">=</span> N<span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>키 타입으로는 Integer, String과 관련된 scalar type이 가능하며, byte, float타입은 불가능합니다.</li>\n<li>Map타입은 repeated를 적용할 수 없습니다.</li>\n</ul>\n<h3 id=\"oneof\" style=\"position:relative;\"><a href=\"#oneof\" aria-label=\"oneof permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>OneOf</h3>\n<p>OneOf타입은 상수형 값을 매핑시키는 enum과 다릅니다! 실제 자료형을 통해 선언된 여러 필드들 중, 하나의 값을 가질 수 있습니다. (map과 repeated는 사용할 수 없습니다)</p>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\"><span class=\"token keyword\">message</span> <span class=\"token class-name\">SampleMessage</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">oneof</span> test_oneof<span class=\"token punctuation\">{</span>\n\t\t<span class=\"token builtin\">string</span> name<span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token positional-class-name class-name\">SubMessage</span> sub_message<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>메모리를 공유하기때문에 OneOf필드를 세팅하면 기존에 가지고있던 값이 사라집니다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"protobuf\"><pre class=\"language-protobuf\"><code class=\"language-protobuf\">SampleMessage <span class=\"token keyword\">message</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">message</span><span class=\"token punctuation\">.</span><span class=\"token function\">set_name</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">CHECK_EQ</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">message</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// sub_messgae필드를 없애고, name값을 할당합니다. </span>\n<span class=\"token comment\">// sub_message to a new instance of SubMessage with none of its fields set.</span>\n<span class=\"token keyword\">message</span><span class=\"token punctuation\">.</span><span class=\"token function\">mutable_sub_message</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">CHECK</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">message</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>언어별로 WhichOf, Case 등, 내부에 있는 값을 확인하는 로직을 통해 사용합니다.</p>\n<h3 id=\"질문\" style=\"position:relative;\"><a href=\"#%EC%A7%88%EB%AC%B8\" aria-label=\"질문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>질문</h3>\n<ul>\n<li>Map타입에서 float타입이 안되면, string으로 대체하는건가?</li>\n<li>reserved : 다시 쓸  수 있나?</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p><a href=\"https://protobuf.dev/programming-guides/proto3/#simple\">https://protobuf.dev/programming-guides/proto3/#simple</a></p>\n<p><a href=\"https://protobuf.dev/reference/protobuf/proto3-spec/\">https://protobuf.dev/reference/protobuf/proto3-spec/</a></p>\n<p><a href=\"https://medium.com/naver-cloud-platform/nbp-%EA%B8%B0%EC%88%A0-%EA%B2%BD%ED%97%98-%EC%8B%9C%EB%8C%80%EC%9D%98-%ED%9D%90%EB%A6%84-grpc-%EA%B9%8A%EA%B2%8C-%ED%8C%8C%EA%B3%A0%EB%93%A4%EA%B8%B0-1-39e97cb3460\">https://medium.com/naver-cloud-platform/nbp-기술-경험-시대의-흐름-grpc-깊게-파고들기-1-39e97cb3460</a></p>\n<p><a href=\"https://protobuf.dev/programming-guides/encoding\">https://protobuf.dev/programming-guides/encoding</a></p>","fields":{"slug":"protocol-buffer-3-spec정리"},"frontmatter":{"title":"Protocol Buffer 3 Spec정리","date":"02.01.2023","category":"tech","tags":["protobuf3","gRPC","gRPC 스터디"],"banner":null,"description":null},"timeToRead":2}},"pageContext":{"slug":"protocol-buffer-3-spec정리","prev":{"excerpt":"…","html":"<h2 id=\"일대일-매핑\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%8C%80%EC%9D%BC-%EB%A7%A4%ED%95%91\" aria-label=\"일대일 매핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일대일 매핑</h2>\n<p>일대일 매핑의 경우, 반대방향도 일대일이므로 일대다/다대일에서 연관관계의 주인이 항상 “다”쪽이었던것과 달리 연관관계의 주인이 어느 쪽이든 가능하다.</p>\n<p>하지만 주/대상 관계에 따라 장단점이 존재한다.</p>\n<p>주 테이블이란? 아래 그림에서 멤버처럼 라커를 참조하거나 사용하는 테이블이다.</p>\n<p>대상 테이블은 반대로, 멤버에 의해 불려지거나 참조를 당하는 테이블을 말한다.</p>\n<ul>\n<li>주 테이블에 외래키를 두는 경우: 외래키를 참조와 같이 사용할 수 있어 멤버 <strong>객체만 확인해도 라커를 확인할 수 있는 간편함이 있음. → select with join</strong></li>\n<li>대상 테이블에 외래키를 두는 경우: <strong>멤버:라커가 일대다 관계로 변화했을 때</strong>, 앞선 방법과 달리 <strong>외래키의 위치를 수정하지 않아도 되는 확장성 면에서 장점이 있음 → select + select</strong></li>\n</ul>\n<h2 id=\"일대일-매핑-주-테이블에-외래키를-두는-경우\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EB%8C%80%EC%9D%BC-%EB%A7%A4%ED%95%91-%EC%A3%BC-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90-%EC%99%B8%EB%9E%98%ED%82%A4%EB%A5%BC-%EB%91%90%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"일대일 매핑 주 테이블에 외래키를 두는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일대일 매핑: 주 테이블에 외래키를 두는 경우</h2>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226089963-dabd6db8-8bde-4f63-8441-821a583821f3.png\" alt=\"1\"></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@OneToOne</span>\n\t<span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"LOCKER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Locker</span> locker\n\t<span class=\"token comment\">//,,,편의메서드 작성</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token punctuation\">(</span>mappedBy<span class=\"token operator\">=</span><span class=\"token string\">\"locker\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> member\n\t<span class=\"token comment\">//...편의메서드 작성</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>단방향매핑과 양방향 매핑에 큰 차이가 없어 같이 설명한다. 양방향에서는 앞 챕터에서 살펴본 편의메서드만 주의해서 작성해주면 된다.</p>\n</blockquote>\n<p>mappedBy를 통해 연관관계의 주인을 명시하고(Member), Member를 통해 연관관계를 관리하고, 참조합니다.</p>\n<h3 id=\"대상-테이블에-외래키를-두는-경우\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EC%83%81-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%97%90-%EC%99%B8%EB%9E%98%ED%82%A4%EB%A5%BC-%EB%91%90%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"대상 테이블에 외래키를 두는 경우 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대상 테이블에 외래키를 두는 경우</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@OneToOne</span><span class=\"token punctuation\">(</span>mappedBy<span class=\"token operator\">=</span><span class=\"token string\">\"member_id\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Locker</span> locker\n\n\t<span class=\"token comment\">//,,,편의메서드 작성</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Locker</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@OneToOne</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> member\n\t<span class=\"token comment\">//...편의메서드 작성</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226089965-93f9ed04-3e4f-49ce-998d-894890f58921.png\" alt=\"2\"></p>\n<p>대상 엔티티인 Locker를 연관관계의 주인으로 만들어 Locker 테이블이 외래키를 관리하도록 하였다.</p>\n<blockquote>\n<p>OneToOne 양방향 관계에서는 연관관계의 주인이 아닌쪽에서 FetchType=Lazy로 설정할 수 없다.</p>\n</blockquote>\n<p><a href=\"https://loosie.tistory.com/788#@OneToOne_%EC%96%91%EB%B0%A9%ED%96%A5_%EB%A7%A4%ED%95%91_%EC%A4%91_LAZY%EA%B0%80_%EB%A8%B9%ED%9E%88%EC%A7%80_%EC%95%8A%EB%8A%94_%EA%B2%BD%EC%9A%B0_\">https://loosie.tistory.com/788#@OneToOne_양방향_매핑_중_LAZY가_먹히지_않는_경우_</a></p>\n<h3 id=\"다대다-관계\" style=\"position:relative;\"><a href=\"#%EB%8B%A4%EB%8C%80%EB%8B%A4-%EA%B4%80%EA%B3%84\" aria-label=\"다대다 관계 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다대다 관계</h3>\n<p>다대다 관계는, 회원이 상품을 주문하는 시나리오에서 회원과 상품에 해당합니다. 회원은 여러 종류의 상품을 구입하지만 상품 입장에서도 여러명의 멤버가 구매하므로, 구매자 목록에는 여러 멤버가 있습니다.</p>\n<p>하지만 테이블에는 여러개의 값이 들어할 수 없습니다.(데이터베이스 1정규화 원자성 보장)</p>\n<p>그러므로 공통의 연결테이블을 통해 다대다 테이블의 관계를 표현할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226089962-98701d15-de8d-4c88-a57c-2f5849b604eb.png\" alt=\"3\"></p>\n<p>다대다 관계에서 엔티티를 구성할때는, 각각의 엔티티에 @ManyToMany를 설정하면 <strong>자동으로 위와 같이 연결 테이블을 설정해줍니다.</strong></p>\n<p>아래는 단방향 ManyToMany 매핑 예시입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@JoinTable</span><span class=\"token punctuation\">(</span>\n\t\tjoinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t\tinverseJoinColumns <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"PRODUCT_ID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token annotation punctuation\">@ManyToMany</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> products<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"PRODUCT_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"jointable설정\" style=\"position:relative;\"><a href=\"#jointable%EC%84%A4%EC%A0%95\" aria-label=\"jointable설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JoinTable설정</h3>\n<p>위같이 단방향에서도 ManyToMany매핑을 하면 자동적으로 연결테이블이 생성됩니다. JoinTable 애너테이션에서는 연결테이블이 어느 컬럼에 매핑할것인지에 대한 설정을 합니다.</p>\n<ul>\n<li>JoinTable.joinColumns: 현재 엔티티인 멤버와 매핑할 컬럼 지정</li>\n<li>JoinTable.inverseJoinColumns: 반대측 엔티티인 상품과 매핑할 컬럼 지정</li>\n<li>JoinTable.name: 연결테이블의 이름</li>\n</ul>\n<h3 id=\"연결엔티티-사용\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B2%B0%EC%97%94%ED%8B%B0%ED%8B%B0-%EC%82%AC%EC%9A%A9\" aria-label=\"연결엔티티 사용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연결엔티티 사용</h3>\n<p><strong>멤버와 상품 사이에 주문일자 또는 주문수량을 적고싶다면 어디에 저장할까요?</strong> 멤버, 상품 모두 아닌 해당 엔티티들이 연관관계를 맺는 <strong>연결 테이블이</strong> 가장 적절할 것입니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226089959-fb12f10e-ae72-40ee-ac04-47ac0526469e.png\" alt=\"4\"></p>\n<p>앞서 작성한 <strong>연결엔티티를 생략해 단방향 +  외래키만 저장</strong>하는 엔티티와 달리, 이번에는 <strong>연결엔티티를 사용</strong>해서 다대다관계를 정의하고, <strong>연결 엔티티에 연결정보(주문일자, 주문수량)까지 저장하는 양방향 관계 엔티티</strong>를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemberProduct</span><span class=\"token punctuation\">></span></span> memberProduct<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"PRODUCT_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy<span class=\"token operator\">=</span><span class=\"token string\">\"PRODUCT_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemberProduct</span><span class=\"token punctuation\">></span></span> memberProduct<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>회원과 상품 엔티티를 각각 생성했고, mappedBy를 통해 MemberProduct를 연관관계의 주인으로 설정해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@IdClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberProductId</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberProduct</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@ManyToOne</span>\n\t<span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@ManyToOne</span>\n\t<span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"PRODUCT_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> product<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> orderAmount<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> orderDate<span class=\"token punctuation\">;</span>\n\n\t\n<span class=\"token punctuation\">}</span>\n\t\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@IdClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberProductId</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MemberProductId</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Serializable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> member<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> product<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">hashCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>MemberProduct에서는 단순히 @ManyToMany를 통해 저장할 수 없던 주문수량, 주문일자를 저장할 수 있게됩니다. 테이블 구조는 앞선 구조와 동일합니다. (엔티티 구조만 변경)</p>\n<p>연결테이블 생성 시, 하나의 <strong>엔티티에서 두 개의 키를 가지는  “복합키”</strong> 개념이 새로 등장합니다. 이 개념은 뒤따라 소개할 방법에 비해 식별자 관리방법이 복잡하고 생성규칙이 많습니다.</p>\n<p>( Serializable 구현, 복합키 클래스는 별도의 클래스로 생성, equals, hashCode 오버라이드, 기본 생성자 필요 등등)</p>\n<p>또한 사용하기 용이하지 않습니다. 아래는 복합키를 통한 연관엔티티 <strong>생성</strong>입니다.</p>\n<p>복합키 아이디클래스 생성 → 연관엔티티 생성 → 연관관계 설정 → 영속</p>\n<p><strong>조회 역시 복합키 아이디 클래스를 통해 조회해야합니다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">em<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MemberProduct</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> memberProductId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇기에 실제로는 새로운 기본키를 생성해 연관엔티티를 관리합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226089960-e887cded-3577-485a-b2f4-29aa04a214c9.png\" alt=\"5\"></p>\n<p>위의 테이블 구조와 달리, Member, Product_ID에서 기본키 제약조건이 빠지고, 테이블명이 새로운 의미를 갖는 “Order”라는 적절한 이름으로 변경되었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Order</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@ManyToOne</span>\n\t<span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Member</span> member<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@ManyToOne</span>\n\t<span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"PRODUCT_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Product</span> product<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> orderAmount<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> orderDate<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy <span class=\"token operator\">=</span> <span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemberProduct</span><span class=\"token punctuation\">></span></span> memberProduct<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"PRODUCT_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@OneToMany</span><span class=\"token punctuation\">(</span>mappedBy<span class=\"token operator\">=</span><span class=\"token string\">\"PRODUCT_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">MemberProduct</span><span class=\"token punctuation\">></span></span> memberProduct<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">//member, product엔티티에 @OneToMany(mappedBy=\"___\")가 붙음</span>\n</code></pre></div>\n<h3 id=\"추가질문\" style=\"position:relative;\"><a href=\"#%EC%B6%94%EA%B0%80%EC%A7%88%EB%AC%B8\" aria-label=\"추가질문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>추가질문</h3>\n<ul>\n<li>\n<p>다대일 관계에서도 연관테이블을 만들어서 Order처럼 관리해도 괜찮은가?</p>\n</li>\n<li>\n<p>private int orderAmount 책에 int로 적혀있는데, Integer가 적절하지 않은가?</p>\n</li>\n<li>\n<p>232쪽, orders = new ArrayList로 초기화해주는데, 안해주는것과 무슨 차이인가?</p>\n</li>\n<li>\n<p>주테이블 외래키해서 select+join이 성능이 좋나, 대상테이블 외래키해서 select + select가 성능이 좋나?</p>\n</li>\n<li>\n<p>복합키 다대다 테이블에서, 한 회원이 같은 상품 여러번 구매하면, PK의 Unique 제약조건 위반인가? [실험 필요]</p>\n</li>\n<li>\n<p>Nullable하지 않은값은 int(primitive type)가 좋다.</p>\n</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p>책 -  김영한 저 Java ORM 표준 JPA 프로그래밍 (에이콘 출판, 2015)</p>","id":"5773c085-20fd-5ad3-b0ef-c4fc83c64222","fields":{"slug":"jpa-일대일-다대다-매핑"},"frontmatter":{"date":"2023-01-30","title":"JPA 일대일, 다대다 매핑","category":"tech","tags":["JPA","JPA 스터디"],"banner":null,"description":null},"timeToRead":4},"next":{"excerpt":"프로세스의 개념 프로세스는 프로그램이 실행중인 상태 라고 정의합니다. 프로그램 자체는 디스크에 적재되어있는 상태로, 아무런 동작을 하지 않습니다. 프로그램이 메모리에 적재되고, CPU를 점유해 사용하는 주체를 “프로세스”라고 합니다. 조금 더 구체적으로는 아래와 같이 정의할 수 있습니다. 커널에 등록되고 커널의 관리 하에 있는 작업 → 프로세스 관리 블록(PCB)을 할당받은 프로그램 각종 자원을 요청하고 할당받을 수 있는 개체 CPU…","html":"<h3 id=\"프로세스의-개념\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B0%9C%EB%85%90\" aria-label=\"프로세스의 개념 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스의 개념</h3>\n<p>프로세스는 <strong>프로그램이 실행중인 상태 라고 정의합니다.</strong></p>\n<p>프로그램 자체는 디스크에 적재되어있는 상태로, 아무런 동작을 하지 않습니다. 프로그램이 메모리에 적재되고, CPU를 점유해 사용하는 주체를 “프로세스”라고 합니다.</p>\n<p>조금 더 구체적으로는 아래와 같이 정의할 수 있습니다.</p>\n<ul>\n<li>커널에 등록되고 커널의 관리 하에 있는 작업\n<ul>\n<li>→ <strong>프로세스 관리 블록(PCB)을 할당받은 프로그램</strong></li>\n</ul>\n</li>\n<li>각종 자원을 요청하고 할당받을 수 있는 개체</li>\n</ul>\n<h3 id=\"cpu-가상화와-프로세스--이건-cpu-가상화에-대한-설명\" style=\"position:relative;\"><a href=\"#cpu-%EA%B0%80%EC%83%81%ED%99%94%EC%99%80-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4--%EC%9D%B4%EA%B1%B4-cpu-%EA%B0%80%EC%83%81%ED%99%94%EC%97%90-%EB%8C%80%ED%95%9C-%EC%84%A4%EB%AA%85\" aria-label=\"cpu 가상화와 프로세스  이건 cpu 가상화에 대한 설명 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CPU 가상화와 프로세스 → 이건 CPU 가상화에 대한 설명..</h3>\n<p>이런 “프로세스”는 실제 맥이나 윈도우같은 운영체제를 사용하면서 확인할 수 있는데, 한눈에 봐도 우리는 수십개의 프로그램을 동시에 사용할 수 있다는것을 알 수 있습니다. 마치 <strong>프로그램 하나가 CPU하나를 점유하듯</strong>, 노래를 들으며 워드를 사용하고, 백신 프로그램을 돌리는 등, 여러가지 작업을 한번에 수행 할 수 있죠.</p>\n<p>이것은 모두 “<strong>CPU 가상화</strong>”에 기초합니다. 운영체제는 “<strong>시분할</strong>”을 통해 여러 프로세스가 하나의 CPU를 나눠 사용할 수 있도록 합니다.</p>\n<p>또한 운영체제는 **과거 정보( 자주 실행된 프로그램, 실행된 프로그램의 유형)**과 **목적(처리량, 응답시간)**을 바탕으로 어떤 프로세스가 언제 CPU를 사용할지에 대한 “<strong>스케쥴링 정책</strong>”을 가지고있습니다.</p>\n<p>위같은 정책이나 시분할 기법은 프로세스가 온전히 하나의 CPU를 사용하는것”처럼” 하게 해주며, 이를 가상화 라고 부릅니다.</p>\n<h3 id=\"컴퓨터-구조와-프로세스\" style=\"position:relative;\"><a href=\"#%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B5%AC%EC%A1%B0%EC%99%80-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4\" aria-label=\"컴퓨터 구조와 프로세스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컴퓨터 구조와 프로세스</h3>\n<p>프로세스의 실행을 조금 더 가까이에서 살펴보겠습니다. 메모리와 CPU사이에 캐시, MMU, 레지스터 등 다양한 주변기기가 있지만, 설명에서는 생략합니다.</p>\n<p>앞서 프로세스의 “실행”은 시분할과 이를 제어하는 스케쥴링 기법을 통한 CPU 가상화를 통해 이뤄진다고 말씀드렸습니다. 우리가 program.c로 작성해 program.exe파일로  컴파일된 <strong>“파일” 이 어떻게 실행중인 “프로세스”로 변경</strong>되는지 이해하기 위해서는 아래 그림에 대한 설명이 필요합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226092562-a562242a-d948-46cd-8b5e-d68edcd3d0c0.png\" alt=\"1\"></p>\n<p>프로그래머가 작성한 소스코드는 파일로 저장되며, 언어에 따라 컴파일을 통해 실행 프로그램으로 변경됩니다.</p>\n<p>변경된 프로그램은 실행 시 메인 메모리에 적재되고, 프로그램 코드와 정적 데이터를 저장하며 <strong>실행중 사용할 수 있는 공간인 스택과 힙을 할당</strong>받아 명령어에 필요한 데이터를 사용하거나 명령어를 수행한 결과를 저장합니다.</p>\n<p>사실. 밑에서 공부할 프로세스의 상태에서는 CPU,Memory등을 할당받지 못한(Swap된) 상태도 있기때문에, 메모리에 적재된 프로그램만 프로세스라고 부르기에는 애매합니다. PCB도 조금 이따 볼거지만, “<strong>커널에 PCB가 저장된 프로그램</strong>”을 프로세스로 보시는게 더 정확합니다.</p>\n<p>여기서 중요한 개념 중 하나인 <strong>메모리 가상화</strong>가 등장합니다.</p>\n<p>메모리 가상화는 많은 역시 “<strong>많은프로세스가 자신의 독립된 주소 공간을 갖는것처럼 행동</strong>\"할 수 있도록 해주며, MMU가 실제 주소와 가상 주소를 저장한 테이블을 통해 변환해 각각의 프로세스가 주소공간을 서로 침범하지 않고 독립적으로 실행됩니다.</p>\n<p>(컴퓨터구조 여담)</p>\n<p>위 그림에서 왼쪽이 CPU와 고속처리장치(메모리컨트롤러, GPU, PCI 16x)들을 담당하는 노스브릿지(North Bridge), 오른쪽에서 메모리 아랫쪽이 저속처리장치(디스크, PCI 1x, USB, SATA 등)를 담당하는 사우스브릿지(South Bridge)인데, 주변장치와 데이터 버스를 통해 처리되던 노스브릿지 장치들이 CPU로 통합되면서 최신 CPU에는 노스브릿지 영역이 없는 형태의 CPU가 대부분이라고 합니다.</p>\n<h2 id=\"프로세스-상태\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EC%83%81%ED%83%9C\" aria-label=\"프로세스 상태 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 상태</h2>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226092567-88d743d6-7d8e-483b-b183-c352a67b440b.png\" alt=\"2\"></p>\n<p>프로세스는 “스케쥴링 정책”을 통해 CPU와 메모리를 할당받는지 여부에 따라 아래와 같은 상태를 갖습니다.</p>\n<ul>\n<li><strong>Created:</strong> 커널에 PCB가 할당되고, <strong>가용 메모리공간을 체크해 Ready상태 또는 Suspend-Ready상태로 전이</strong>합니다.</li>\n<li><strong>Ready</strong>: 프로세서(CPU) 할당을 대기하는 상태로, 즉시 실행 가능한 상태입니다.\n<ul>\n<li><strong>Schedule(또는 dispatch)</strong>: 스케쥴링 정책에 의해 Running상태로 전이합니다.</li>\n</ul>\n</li>\n<li><strong>Running</strong>:  프로세서를 포함해 필요한 자원을 모두 할당받아 동작하는 상태입니다.\n<ul>\n<li>timer run-out: Running상태의 프로세스가 스케쥴 계획에 있던 시간을 모두 버스트해 종료합니다.</li>\n<li><strong>Block/sleep:</strong> I/O자원할당을 위해 잠시 대기합니다.</li>\n</ul>\n</li>\n<li><strong>Asleep(Block)</strong>: I/O가 끝나기를 기다리는 상태입니다. 자원별로 Block-Queue를 가지며, 할당이 끝나기를 기다리는 프로세스가 큐에 있습니다.\n<ul>\n<li><strong>Wake up</strong>: 자원할당을 마치고 ready queue로 들어갑니다.</li>\n</ul>\n</li>\n<li><strong>Suspended State: 메모리를 할당받지 못하고, 디스크(Swap device)에 메모리 이미지를 저장한 상태</strong>\n<ul>\n<li>Swap in: 스왑 이미지를 메모리에 적재해 Ready 또는 Asleep 상태로 변경</li>\n<li>Swap out: 적재된 메모리  영역을 스왑 디바이스에 이미지로 저장</li>\n</ul>\n</li>\n<li><strong>Terminate:</strong> 프로세스 수행이 끝나 모든 자원 반납 후 PCB만 커널 내에 남아있는 상태입니다.\n<ul>\n<li>커널이 이후 비슷한 프로세스를 실행할 때, PCB정보를 참고한다고 합니다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"pcb를-통한-프로세스의-관리\" style=\"position:relative;\"><a href=\"#pcb%EB%A5%BC-%ED%86%B5%ED%95%9C-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4%EC%9D%98-%EA%B4%80%EB%A6%AC\" aria-label=\"pcb를 통한 프로세스의 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PCB를 통한 프로세스의 관리</h3>\n<p>PCB: Process Control Block - <strong>실행중인 프로그램(프로세스)들을 제어하는데 필요한 정보</strong>를 가지고있는 자료구조 입니다.</p>\n<p>시작/종료가 많은 프로세스의 특성 상 PCB 리스트 역시 삽입/삭제가 많은 데이터이므로,  <strong>커널 영역에서 LinkedList를 통해 관리됩니다.</strong></p>\n<ul>\n<li>PCB의 구성요소: 운영체제별로 다릅니다.</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>구성요소</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>PID: Process Identification Number</td>\n<td>프로세스를 고유하게 식별하는 번호</td>\n</tr>\n<tr>\n<td>스케쥴링 정보</td>\n<td>우선순위 등 스케쥴링을 위해 필요한 정보</td>\n</tr>\n<tr>\n<td>메모리 관리 정보</td>\n<td>할당된 페이지, 세그먼트에 대한 정보</td>\n</tr>\n<tr>\n<td>입출력상태 정보</td>\n<td>할당받은 입출력 장치</td>\n</tr>\n<tr>\n<td>문맥 저장 영역</td>\n<td>CPU 레지스터 저장, 문맥 교환 시 load/store하는 부분</td>\n</tr>\n<tr>\n<td>계정정보</td>\n<td>프로세스의 소유자</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>멀티프로세스보다 멀티스레드가 빠른 “실질적인” 이유</p>\n</blockquote>\n<p>프로세스 A의 실행정보라고 불리는 <strong>스택과 힙</strong>에 대해 이야기해봅시다. <strong>컴파일타임에 메모리를 할당받는 스택</strong>의 경우, 일반적으로 1MB를 사용하고 최대 10MB정도인 반면, <strong>힙영역은 런타임에 할당되고 최대 256MB</strong>또는 설정에 따라 메모리의 최대크기에 따라 더 커질수도 있습니다.</p>\n<p>프로세스 A의 PCB에는 A가 실행될 때의 레지스터 정보들을 가지고있습니다. 또한, CPU와 근접해있는 L1, L2캐시에도 프로세스 A의 실행정보들이 <strong>캐싱</strong>되어있습니다. 만약 프로세스 A가 B로 Context Switch할때는 레지스터 정보를 교체하겠지만, <strong>이후에는 L1,L2뿐만아니라 다른 캐시, 심지에 페이지 교체까지 일어납니다.</strong></p>\n<p>스레드의 경우는 어떨까요~? 스레드는 프로세스 내에서 독립적인 스택포인터(스택)을 갖지만, <strong>실행정보에 대부분을 차지하는 힙,코드,데이터영역을 공유합니다</strong>. 스레드의 정보를 저장한 TCB의 정보를 레지스터에 옮기는 시간은 있겠지만, 캐시,페이지 미스가 많이 일어나지 않기때문에, 훨씬 더 빠릅니다.</p>\n<p>+) 멀티스레드는 공유자원인 힙, 데이터에 대해 동시성 문제가 발생하므로, 동기화 문제를 꼭 핸들링해주어야 합니다!</p>\n<h3 id=\"키워드--질문-목록\" style=\"position:relative;\"><a href=\"#%ED%82%A4%EC%9B%8C%EB%93%9C--%EC%A7%88%EB%AC%B8-%EB%AA%A9%EB%A1%9D\" aria-label=\"키워드  질문 목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>키워드 &#x26; 질문 목록</h3>\n<p>PCB어떤 자료구조로 관리되며, 왜 해당 자료구조를 사용하는지 설명해주세요</p>\n<p>프로세스의 상태와 각 상태별로 사용하고있는 자원의 종류에 대해 설명해주세요</p>\n<p>멀티프로세스보다 멀티스레드가 빠른 이유를 설명해주세요</p>\n<p>문맥교환영역에 저장되는 CPU 레지스터 종류?</p>\n<p>PC (Program Counter) : 다음 인출(Fetch) 될 명령어의 주소를 가지고 있는 레지스터</p>\n<p>AC (Accumulator) : 연산 결과 데이터를 일시적으로 저장하는 레지스터</p>\n<p>IR (Instruction Register) : 가장 최근에 인출된 명령어(현재 실행 중인 명령어)가 저장되어 있는 레지스터</p>\n<p>SR (Status Register) : 현재 CPU 의 상태를 가지고 있는 레지스터</p>\n<p>MAR (Memory Address Register) : PC 에 저장된 명령어 주소가 사용되기 전에 일시적으로 저장되는 주소 레지스터</p>\n<p>MBR (Memory Buffer Register) : 기억장치에 저장될 데이터 혹은 읽혀진 데이터가 일시적으로 저장되는 버퍼 레지스터</p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<p>[<strong>HPC Lab. KOREATECH, OS Lecture CH.3 Process](</strong><a href=\"https://www.youtube.com/watch?v=jZuTw2tRT7w\">https://www.youtube.com/watch?v=jZuTw2tRT7w</a> <strong>)</strong></p>\n<p><a href=\"%5Bhttps://pages.cs.wisc.edu/~remzi/OSTEP/%5D(https://pages.cs.wisc.edu/~remzi/OSTEP/)\">OSTEP: Operating Systems: Three Easy Pieces</a></p>\n<p>이글은 꼭 이해하면 좋을것같다. 까먹으면 다시보자! → <a href=\"https://quasarzone.com/bbs/qn_hardware/views/818208\">https://quasarzone.com/bbs/qn_hardware/views/818208</a></p>","id":"96b52839-d38a-577a-a1f1-5a12ac062586","fields":{"slug":"프로세스의-개념과-상태-변화"},"frontmatter":{"date":"2023-02-06","title":"프로세스의 개념과 상태 변화","category":"tech","tags":["운영체제","운영체제 스터디"],"banner":null,"description":null},"timeToRead":3}}},"staticQueryHashes":[],"slicesMap":{}}