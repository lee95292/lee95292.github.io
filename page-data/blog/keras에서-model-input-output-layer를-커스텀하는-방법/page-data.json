{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/keras에서-model-input-output-layer를-커스텀하는-방법","result":{"data":{"markdownRemark":{"html":"<p>pytorch에서는 in/output 모델에서 커널 사이즈나 이미지 크기등을 조정할 때 \"할당\"만 해주면 끝났지만, 케라스에서는 아래와 같은 과정이 필요하다.</p>\n<p><a href=\"https://keras.io/examples/vision/keypoint_detection/#model-building\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://keras.io/examples/vision/keypoint_detection/#model-building</a></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_model</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Load the pre-trained weights of MobileNetV2 and freeze the weights</span>\n    backbone <span class=\"token operator\">=</span> keras<span class=\"token punctuation\">.</span>applications<span class=\"token punctuation\">.</span>MobileNetV2<span class=\"token punctuation\">(</span>\n        weights<span class=\"token operator\">=</span><span class=\"token string\">\"imagenet\"</span><span class=\"token punctuation\">,</span> include_top<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> input_shape<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>IMG_SIZE<span class=\"token punctuation\">,</span> IMG_SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span>\n    backbone<span class=\"token punctuation\">.</span>trainable <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    inputs <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Input<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>IMG_SIZE<span class=\"token punctuation\">,</span> IMG_SIZE<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> keras<span class=\"token punctuation\">.</span>applications<span class=\"token punctuation\">.</span>mobilenet_v2<span class=\"token punctuation\">.</span>preprocess_input<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> backbone<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>Dropout<span class=\"token punctuation\">(</span><span class=\"token number\">0.3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    x <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>SeparableConv2D<span class=\"token punctuation\">(</span>\n        NUM_KEYPOINTS<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">\"relu\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    outputs <span class=\"token operator\">=</span> layers<span class=\"token punctuation\">.</span>SeparableConv2D<span class=\"token punctuation\">(</span>\n        NUM_KEYPOINTS<span class=\"token punctuation\">,</span> kernel_size<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> strides<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> activation<span class=\"token operator\">=</span><span class=\"token string\">\"sigmoid\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> keras<span class=\"token punctuation\">.</span>Model<span class=\"token punctuation\">(</span>inputs<span class=\"token punctuation\">,</span> outputs<span class=\"token punctuation\">,</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"keypoint_detector\"</span><span class=\"token punctuation\">)</span></code></pre></div>","fields":{"slug":"keras에서-model-input-output-layer를-커스텀하는-방법"},"frontmatter":{"title":"Keras에서 model input/output layer를 커스텀하는 방법","date":"24.11.2021","category":"deeplearning","tags":null,"banner":null},"timeToRead":1}},"pageContext":{"slug":"keras에서-model-input-output-layer를-커스텀하는-방법","prev":{"excerpt":"Kaggle house price prediction example kernel 필사 캐글 House price prediction 정규화 모델 예제커널 필사. 선형 모델 구성하기 train데이터 뿐만아니라 test데이터에도 일괄적으로 전처리(정규화 및 인코딩)을 적용하기 위해 데이터를 합쳐준다. png 위에서 로그 변환을 통해 SalePrice…","html":"<blockquote>\n<p><a href=\"https://www.kaggle.com/apapiu/regularized-linear-models\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Kaggle house price prediction example kernel</a> 필사</p>\n</blockquote>\n<h1 id=\"캐글-house-price-prediction-정규화-모델-예제커널-필사\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EA%B8%80-house-price-prediction-%EC%A0%95%EA%B7%9C%ED%99%94-%EB%AA%A8%EB%8D%B8-%EC%98%88%EC%A0%9C%EC%BB%A4%EB%84%90-%ED%95%84%EC%82%AC\" aria-label=\"캐글 house price prediction 정규화 모델 예제커널 필사 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐글 House price prediction 정규화 모델 예제커널 필사.</h1>\n<h2 id=\"선형-모델-구성하기\" style=\"position:relative;\"><a href=\"#%EC%84%A0%ED%98%95-%EB%AA%A8%EB%8D%B8-%EA%B5%AC%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"선형 모델 구성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선형 모델 구성하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> seaborn <span class=\"token keyword\">as</span> sns\n<span class=\"token keyword\">import</span> matplotlib\n\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">import</span> skew\n<span class=\"token keyword\">from</span> scipy<span class=\"token punctuation\">.</span>stats<span class=\"token punctuation\">.</span>stats <span class=\"token keyword\">import</span> pearsonr\n\n<span class=\"token operator\">%</span>config InlineBackend<span class=\"token punctuation\">.</span>figure_formaat <span class=\"token operator\">=</span><span class=\"token string\">'retina'</span>\n<span class=\"token operator\">%</span>matplotlib inline</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">train <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../data/train.csv'</span><span class=\"token punctuation\">)</span>\ntest <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'../data/test.csv'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">train<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\ntest<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">.dataframe tbody tr th {\n    vertical-align: top;\n}\n\n.dataframe thead th {\n    text-align: right;\n}\n\n.dataframe td {\n    padding:0;\n}</code></pre></div>\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>MSZoning</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>Street</th>\n      <th>Alley</th>\n      <th>LotShape</th>\n      <th>LandContour</th>\n      <th>Utilities</th>\n      <th>...</th>\n      <th>ScreenPorch</th>\n      <th>PoolArea</th>\n      <th>PoolQC</th>\n      <th>Fence</th>\n      <th>MiscFeature</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SaleType</th>\n      <th>SaleCondition</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1461</td>\n      <td>20</td>\n      <td>RH</td>\n      <td>80.0</td>\n      <td>11622</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>Reg</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>120</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1462</td>\n      <td>20</td>\n      <td>RL</td>\n      <td>81.0</td>\n      <td>14267</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Gar2</td>\n      <td>12500</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1463</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>74.0</td>\n      <td>13830</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>MnPrv</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>3</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1464</td>\n      <td>60</td>\n      <td>RL</td>\n      <td>78.0</td>\n      <td>9978</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>Lvl</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>6</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1465</td>\n      <td>120</td>\n      <td>RL</td>\n      <td>43.0</td>\n      <td>5005</td>\n      <td>Pave</td>\n      <td>NaN</td>\n      <td>IR1</td>\n      <td>HLS</td>\n      <td>AllPub</td>\n      <td>...</td>\n      <td>144</td>\n      <td>0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0</td>\n      <td>1</td>\n      <td>2010</td>\n      <td>WD</td>\n      <td>Normal</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 80 columns</p>\n</div>\n<p>train데이터 뿐만아니라 test데이터에도 일괄적으로 전처리(정규화 및 인코딩)을 적용하기 위해 데이터를 합쳐준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">all_data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token string\">'MSSubClass'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'SaleCondition'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> test<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token string\">'MSSubClass'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'SaleCondition'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">matplotlib<span class=\"token punctuation\">.</span>rcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'figure.figsize'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">12.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span>\n\nprices <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"price\"</span><span class=\"token punctuation\">:</span>train<span class=\"token punctuation\">[</span><span class=\"token string\">\"SalePrice\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"log(price+1)\"</span><span class=\"token punctuation\">:</span>np<span class=\"token punctuation\">.</span>log1p<span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">[</span><span class=\"token string\">\"SalePrice\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\nprices<span class=\"token punctuation\">.</span>hist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">array([[&lt;AxesSubplot:title={&#39;center&#39;:&#39;price&#39;}&gt;,\n        &lt;AxesSubplot:title={&#39;center&#39;:&#39;log(price+1)&#39;}&gt;]], dtype=object)</code></pre></div>\n<p><img src=\"/assets/211013/output_6_1.png\" alt=\"png\"></p>\n<p>위에서 로그 변환을 통해 SalePrice를 정규화했다.\n여기서는 수치형 변수들을 타겟팅해 왜도가 높은 변수들에 대한 정규화를 일괄적으로 수행한다.</p>\n<ul>\n<li>Series(or DF).apply 함수를 통해 각 컬럼에 대한 왜도를 매칭시킨다.</li>\n<li>왜도가 0.75이상인 변수들의 인덱스를 구한다.</li>\n<li>위에서 구한 인덱스들에 대해 log(p+1)변환을 적용해 정규화시킨다.</li>\n<li>저자는 따로 설명하지 않았지만, 행에 음수값이 있다면 양수로 변환하는 과정이 필요할듯 하다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">train<span class=\"token punctuation\">[</span><span class=\"token string\">\"SalePrice\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>log1p<span class=\"token punctuation\">(</span>train<span class=\"token punctuation\">[</span><span class=\"token string\">\"SalePrice\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nnumeric_feats <span class=\"token operator\">=</span> all_data<span class=\"token punctuation\">.</span>dtypes<span class=\"token punctuation\">[</span>all_data<span class=\"token punctuation\">.</span>dtypes <span class=\"token operator\">!=</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index\n\nskewed_feats <span class=\"token operator\">=</span> train<span class=\"token punctuation\">[</span>numeric_feats<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>skew<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>dropna<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nskewed_feats <span class=\"token operator\">=</span> skewed_feats<span class=\"token punctuation\">[</span>skewed_feats <span class=\"token operator\">></span> <span class=\"token number\">0.75</span><span class=\"token punctuation\">]</span>\nskewed_feats <span class=\"token operator\">=</span> skewed_feats<span class=\"token punctuation\">.</span>index\n\nall_data<span class=\"token punctuation\">[</span>skewed_feats<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>log1p<span class=\"token punctuation\">(</span>all_data<span class=\"token punctuation\">[</span>skewed_feats<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">MSSubClass       1.406210\nLotFrontage      2.160866\nLotArea         12.195142\nOverallQual      0.216721\nOverallCond      0.692355\nYearBuilt       -0.612831\nYearRemodAdd    -0.503044\nMasVnrArea       2.666326\nBsmtFinSF1       1.683771\nBsmtFinSF2       4.250888\ndtype: float64</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">all_data <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>get_dummies<span class=\"token punctuation\">(</span>all_data<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">all_data <span class=\"token operator\">=</span> all_data<span class=\"token punctuation\">.</span>fillna<span class=\"token punctuation\">(</span>all_data<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">X_train <span class=\"token operator\">=</span> all_data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nX_test <span class=\"token operator\">=</span> all_data<span class=\"token punctuation\">[</span>train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\ny<span class=\"token operator\">=</span> train<span class=\"token punctuation\">.</span>SalePrice</code></pre></div>\n<h2 id=\"models\" style=\"position:relative;\"><a href=\"#models\" aria-label=\"models permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Models</h2>\n<p>sklearn 모듈에서 정규화된 모듈을 사용해보자. l1,l2 모두 사용해보자.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>linear_model <span class=\"token keyword\">import</span> Ridge<span class=\"token punctuation\">,</span> RidgeCV<span class=\"token punctuation\">,</span> ElasticNet<span class=\"token punctuation\">,</span> LassoCV<span class=\"token punctuation\">,</span> LassoLarsCV\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>model_selection <span class=\"token keyword\">import</span> cross_val_score\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">rmse_cv</span><span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    rmse<span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>cross_val_score<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">,</span> X_train<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> scoring<span class=\"token operator\">=</span><span class=\"token string\">\"neg_mean_squared_error\"</span><span class=\"token punctuation\">,</span> cv <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> rmse</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">model_ridge<span class=\"token operator\">=</span> Ridge<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">alphas <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0.05</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">,</span><span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50</span><span class=\"token punctuation\">,</span> <span class=\"token number\">75</span><span class=\"token punctuation\">]</span>\ncv_ridge <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>rmse_cv<span class=\"token punctuation\">(</span>Ridge<span class=\"token punctuation\">(</span>alpha<span class=\"token operator\">=</span>alpha<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> alpha <span class=\"token keyword\">in</span> alphas<span class=\"token punctuation\">]</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">cv_ridge <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>cv_ridge<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span>alphas<span class=\"token punctuation\">)</span>\ncv_ridge<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"Validation _ just do it\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"alpha\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"rsme\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Text(0, 0.5, &#39;rsme&#39;)</code></pre></div>\n<p><img src=\"/assets/211013/output_16_1.png\" alt=\"png\"></p>\n<p>정규화모델의 특징은 U자 형태로 나타나는데, 모델은 알파값이 너무 클 때 정규화가 너무 강하게 일어나 데이터의 복잡성을 따라가지 못한다. 반대로 알파값이 너무 작으면 데이터에 오버피팅된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">cv_ridge<span class=\"token punctuation\">.</span><span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0.12733734668670754</code></pre></div>\n<p>릿지 회귀에서 rmsle 0.127을 얻었다.</p>\n<p>라쏘 모델도 테스트해보자. 구현된 LassoCV를 통해 위의 방법과 조금 다른 방법으로 최적 alpha값에 접근할것이다. 모종의 이유로 릿지회귀와는 정 반대의 순서로 알파를 구성한다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">model_lasso <span class=\"token operator\">=</span> LassoCV<span class=\"token punctuation\">(</span>alphas<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0005</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">rmse_cv<span class=\"token punctuation\">(</span>model_lasso<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0.12256735885048131</code></pre></div>\n<p>라쏘 모델이 조금 더 나은 예측값을 가지므로, 테스트 케이스에도 그대로 사용할것이다. 라쏘의 좋은점은, 특징선택을 해준다는 점이다. </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">coef <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>model_lasso<span class=\"token punctuation\">.</span>coef_<span class=\"token punctuation\">,</span> index<span class=\"token operator\">=</span> X_train<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lasso picked  \"</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>coef <span class=\"token operator\">!=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  <span class=\"token string\">\"variables and eliminated the other \"</span><span class=\"token operator\">+</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>coef<span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span><span class=\"token string\">\" variables\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Lasso picked  110variables and eliminated the other 178 variables</code></pre></div>\n<p>여기서 고른 특징들이 반드시 옳은 특징들은 아니다. 특히 공선성을 갖는 경우가 있어, 부트스트랩 샘플들에 대한 라쏘 모델을 몇번 실행시키고 이 결과가 얼마나 안정적인지 직접 살펴야 한다</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">imp_coef <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>concat<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>coef<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> coef<span class=\"token punctuation\">.</span>sort_values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>tail<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">matplotlib<span class=\"token punctuation\">.</span>rcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'figure.figsize'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10.0</span><span class=\"token punctuation\">)</span>\nimp_coef<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>kind<span class=\"token operator\">=</span><span class=\"token string\">\"barh\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">(</span><span class=\"token string\">\"Coefficients in the Lasso Model\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Text(0.5, 1.0, &#39;Coefficients in the Lasso Model&#39;)</code></pre></div>\n<p><img src=\"/assets/211013/output_28_1.png\" alt=\"png\"></p>\n<p>양의 상관성을 갖는 가장 중요한 특징은 지상면적을 뜻하는 GrLivArea이다. 확실히 개연성이 있지만, 음의 상관성을 갖는 특징중 일부로는 불균형적인 범주형 변수에서 비롯된 것 일수도 있다.</p>\n<p>Random forest에서 얻은 특징 중요도와는 달리 이는 실제 모델 계수이다. 따라서 예측된 가격이 왜 그렇게 되었는지 정확히 말할 수 있다. 따라서 로그변환된 타겟,숫자형 변수에 대한 실질적인 크기 예측이 조금 힘들다는 점이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">matplotlib<span class=\"token punctuation\">.</span>rcParams<span class=\"token punctuation\">[</span><span class=\"token string\">'figure.figsize'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">6.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.0</span><span class=\"token punctuation\">)</span>\n\npreds <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token string\">\"preds\"</span><span class=\"token punctuation\">:</span> model_lasso<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">:</span>y<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\npreds<span class=\"token punctuation\">[</span><span class=\"token string\">\"residuals\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> preds<span class=\"token punctuation\">[</span><span class=\"token string\">\"true\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> preds<span class=\"token punctuation\">[</span><span class=\"token string\">\"preds\"</span><span class=\"token punctuation\">]</span>\npreds<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token string\">\"preds\"</span><span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token string\">\"residuals\"</span><span class=\"token punctuation\">,</span> kind<span class=\"token operator\">=</span><span class=\"token string\">\"scatter\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;AxesSubplot:xlabel=&#39;preds&#39;, ylabel=&#39;residuals&#39;&gt;</code></pre></div>\n<p><img src=\"/assets/211013/output_30_1.png\" alt=\"png\"></p>\n<h2 id=\"xgboost-모델-추가하기\" style=\"position:relative;\"><a href=\"#xgboost-%EB%AA%A8%EB%8D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0\" aria-label=\"xgboost 모델 추가하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>XGBoost 모델 추가하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> xgboost <span class=\"token keyword\">as</span> xgb</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">dtrain <span class=\"token operator\">=</span> xgb<span class=\"token punctuation\">.</span>DMatrix<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> label <span class=\"token operator\">=</span> y<span class=\"token punctuation\">)</span>\ndtest <span class=\"token operator\">=</span> xgb<span class=\"token punctuation\">.</span>DMatrix<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\n\nparams <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"max_depth\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"eta\"</span><span class=\"token punctuation\">:</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">}</span>\nmodel <span class=\"token operator\">=</span> xgb<span class=\"token punctuation\">.</span>cv<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> dtrain<span class=\"token punctuation\">,</span>  num_boost_round<span class=\"token operator\">=</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> early_stopping_rounds<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">model<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token number\">30</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"test-rmse-mean\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"train-rmse-mean\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;AxesSubplot:&gt;</code></pre></div>\n<p><img src=\"/assets/211013/output_34_1.png\" alt=\"png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">model_xgb <span class=\"token operator\">=</span> xgb<span class=\"token punctuation\">.</span>XGBRegressor<span class=\"token punctuation\">(</span>n_estimators<span class=\"token operator\">=</span><span class=\"token number\">360</span><span class=\"token punctuation\">,</span> max_depth<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> learning_rate<span class=\"token operator\">=</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">#the params were tuned using xgb.cv</span>\nmodel_xgb<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">XGBRegressor(base_score=0.5, booster=&#39;gbtree&#39;, colsample_bylevel=1,\n             colsample_bynode=1, colsample_bytree=1, gamma=0, gpu_id=-1,\n             importance_type=&#39;gain&#39;, interaction_constraints=&#39;&#39;,\n             learning_rate=0.1, max_delta_step=0, max_depth=2,\n             min_child_weight=1, missing=nan, monotone_constraints=&#39;()&#39;,\n             n_estimators=360, n_jobs=4, num_parallel_tree=1, random_state=0,\n             reg_alpha=0, reg_lambda=1, scale_pos_weight=1, subsample=1,\n             tree_method=&#39;exact&#39;, validate_parameters=1, verbosity=None)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">xgb_preds <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expm1<span class=\"token punctuation\">(</span>model_xgb<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nlasso_preds <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>expm1<span class=\"token punctuation\">(</span>model_lasso<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">predictions<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token string\">\"xgb\"</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token string\">\"lasso\"</span><span class=\"token punctuation\">,</span> kind <span class=\"token operator\">=</span> <span class=\"token string\">\"scatter\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;AxesSubplot:xlabel=&#39;xgb&#39;, ylabel=&#39;lasso&#39;&gt;</code></pre></div>\n<p><img src=\"/assets/211013/output_37_1.png\" alt=\"png\"></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> math\nmath<span class=\"token punctuation\">.</span>sqrt<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3.1622776601683795</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"></code></pre></div>\n<h3 id=\"후일담\" style=\"position:relative;\"><a href=\"#%ED%9B%84%EC%9D%BC%EB%8B%B4\" aria-label=\"후일담 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>후일담.</h3>\n<hr>\n<p>House price prediction 커널분석은 예정과는 다르게 3번째 포스팅에서 마무리한다.</p>\n<ul>\n<li>1.<a href=\"https://www.kaggle.com/learn/intermediate-machine-learning\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Intermediate machine learning</a>으로 공부했고</li>\n<li>\n<ol start=\"2\">\n<li>기본 커널을 작성했는데 오류가 발산했다!</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>내 베이스라인이 처음부터 끝까지 다 잘못됐을거라 생각하고 처음부터 다시 공부하자 생각, <a href=\"https://www.kaggle.com/serigne/stacked-regressions-top-4-on-leaderboard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">훌륭한 커널을 발견!(링크)</a> 필사를 시작했다.</li>\n</ol>\n</li>\n</ul>\n<hr>\n<ul>\n<li>참조커널 필사를 하던 중, 전체 과정이 나랑 크게 다른게 없는데 스코어가 정상수치임을 확인,</li>\n<li>평가지표를 다시 확인해봤다.</li>\n</ul>\n<p><img src=\"/assets/211013/hpp_metric.PNG\" alt=\"metric\"></p>\n<ul>\n<li>나는 RMSE만 읽고 모델검증을 했는데, 자세히 읽어보면 예측 집값의 \"로그\"값과 실제집값의 \"로그\"값으로 RMSE를 한다는 내용...</li>\n<li>다시 확인한 평가지표를 내 기본 커널에 적용하니 놀랍게도 정상적인 스코어가 나왔다!.. (public score: 0.12958 / learderboard rank: 1244/4483)</li>\n</ul>\n<p><img src=\"/assets/211013/score.PNG\" alt=\"leaderboard\"></p>","id":"e5fd69f1-5803-52e8-9707-09aa7fb18010","fields":{"slug":"kaggle-커널분석-notebook-마무리-house-price-prediction-3"},"frontmatter":{"date":"2021-10-13","title":"[Kaggle 커널분석 notebook 마무리] House price prediction -3","category":"datascience","tags":["datascience","machinelearning"],"banner":"/assets/bg/2.jpg"},"timeToRead":8},"next":null}},"staticQueryHashes":["3824141623"]}