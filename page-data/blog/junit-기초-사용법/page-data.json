{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/junit-기초-사용법/","result":{"data":{"markdownRemark":{"html":"<p><a href=\"https://www.youtube.com/watch?v=tyZMdwT3rIY\">박재성님 Junit 강좌</a> 정리</p>\n<h1 id=\"junit-기본-사용법\" style=\"position:relative;\"><a href=\"#junit-%EA%B8%B0%EB%B3%B8-%EC%82%AC%EC%9A%A9%EB%B2%95\" aria-label=\"junit 기본 사용법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Junit 기본 사용법</h1>\n<hr>\n<p>(setup)</p>\n<ul>\n<li>STS에 J<strong>unit 라이브러리가 추가되어 있어야 함</strong>. build path에서 추가.</li>\n<li>Junit Test 버튼 클릭으로 테스트 클래스 생성</li>\n<li>Test Annotation을 추가한 메서드 내에서 단위테스트 진행</li>\n</ul>\n<p>(using)</p>\n<ul>\n<li>하나의 메서드만 테스트를 원할경우, 메서드 이름에 커서를 올린 상태로, Ctrl + f11</li>\n<li>결과값 확인은, assertEquals(기댓값,결과값), assert류 메서드를 사용해 확인한다. 이 메서드가 false를 반환하면, testcase가 실패하게 된다.</li>\n<li>인스턴스의 테스트간 독립성을 보장하기 위해 @Before 애너테이션을 통해 초기화 진행하자. 테스트케이스별로 인스턴스 초기화 작업 수행</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token keyword\">import</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\r\n\r\n <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span> \r\n\r\n    <span class=\"token annotation punctuation\">@Before</span>\r\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        cal <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Calculator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//후에 수행되는 모든 TestCase에 대해 해당 초기화작업 진행</span>\r\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>자원 반납과 같은 후처리 작업의 경우, @After 애너테이션을 사용한다</li>\n</ul>","fields":{"slug":"junit-기초-사용법"},"frontmatter":{"title":"Junit 기초 사용법","date":"08.30.2019","category":"TDD","tags":null,"banner":null},"timeToRead":1}},"pageContext":{"slug":"junit-기초-사용법","prev":{"excerpt":"작성중인 포스트입니다 실습을 따라하는 과정을 포스팅하는 것은 의미없다고 생각했습니다. 내용이 많아 강사님이 자세히 설명하시지 않았지만 스프링을 처음 접하는 입장에서 그냥 넘어가기에는 찝찝한 부분들이 꽤나 있는것 같습니다. 능동적으로 코드를 작성하기 위해 소스코드를 분석해보고, 관련 정보들을 기록하려 합니다. (레이어드 아키텍처 실습부분은 따라가기만으로도 벅차서, 완성도 있는 정리할 여유가 있을지 모르겠습니다..) 애너테이션 @Datasource…","html":"<p><em>작성중인 포스트입니다</em></p>\n<hr>\n<p>실습을 따라하는 과정을 포스팅하는 것은 의미없다고 생각했습니다.</p>\n<p>내용이 많아 강사님이 자세히 설명하시지 않았지만 스프링을 처음 접하는 입장에서 그냥 넘어가기에는 찝찝한 부분들이 꽤나 있는것 같습니다.</p>\n<p>능동적으로 코드를 작성하기 위해 소스코드를 분석해보고, 관련 정보들을 기록하려 합니다.</p>\n<p>(레이어드 아키텍처 실습부분은 따라가기만으로도 벅차서, 완성도 있는 정리할 여유가 있을지 모르겠습니다..)</p>\n<h3 id=\"애너테이션\" style=\"position:relative;\"><a href=\"#%EC%95%A0%EB%84%88%ED%85%8C%EC%9D%B4%EC%85%98\" aria-label=\"애너테이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>애너테이션</h3>\n<hr>\n<ul>\n<li>@Datasource</li>\n<li>@Bean</li>\n</ul>\n<p>bean을 정의하는 어노테이션</p>\n<ul>\n<li>@ComponentScan</li>\n</ul>\n<p>@Controller, @Service, @Repository, @Component 어노테이션이 붙은 클래스를 찾아 컨테이너에 등록</p>\n<ul>\n<li>@Component</li>\n</ul>\n<p>컴포넌트 스캔의 대상이 되는 애노테이션 중 하나로써 주로 유틸, 기타 지원 클래스에 붙이는 어노테이션</p>\n<ul>\n<li>@Autowired</li>\n</ul>\n<p>주입 대상이되는 bean을 컨테이너에 찾아 주입하는 어노테이션</p>","id":"8116a4ed-e531-5313-9269-76616d3e5fd6","fields":{"slug":"boost-course-pj-3-back-end-강의-정리-spring-mcv-실습-및-레이어드-아키텍쳐"},"frontmatter":{"date":"2019-07-21","title":"[BoostCourse] PJ3 BackEnd 강의 정리(Spring MCV 실습 및 레이어드 아키텍쳐)","category":"boostcourse","tags":null,"banner":null},"timeToRead":1},"next":{"excerpt":"참고 링크 REST API 제대로 알고 사용하기 그런 REST API로 괜찮은가(유튜브) REST API란? 다음 조건을 만족하는 분산 하이퍼미디어 시스템(웹)을 위한 아키텍처 스타일의(제약조건) 집합 즉, 웹을 구현할 떄 사용되는 어떤 제약조건들의 집합 client - server :클라이언트가 요청하고 서버가 응답하는 구조 stateless : 서버가 클라이언트의 상태를 저장하지 않음 cache…","html":"<p>참고 링크</p>\n<p><a href=\"https://meetup.toast.com/posts/92\">REST API 제대로 알고 사용하기</a><br>\n<a href=\"https://www.youtube.com/watch?v=RP_f5dMoHFc\">그런 REST API로 괜찮은가(유튜브)</a></p>\n<h3 id=\"rest-api란\" style=\"position:relative;\"><a href=\"#rest-api%EB%9E%80\" aria-label=\"rest api란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API란?</h3>\n<p>다음 조건을 만족하는 분산 하이퍼미디어 시스템(웹)을 위한 아키텍처 스타일의(제약조건) 집합</p>\n<p>즉, 웹을 구현할 떄 사용되는 어떤 <a href=\"https://ko.wikipedia.org/wiki/REST#REST_%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98%EC%97%90_%EC%A0%81%EC%9A%A9%EB%90%98%EB%8A%94_6%EA%B0%80%EC%A7%80_%EC%A0%9C%ED%95%9C_%EC%A1%B0%EA%B1%B4\">제약조건</a>들의 집합</p>\n<ol>\n<li>client - server :클라이언트가 요청하고 서버가 응답하는 구조</li>\n<li>stateless : 서버가 클라이언트의 상태를 저장하지 않음</li>\n<li>cache : 캐시(지역성과 공간성에 의존해 데이터 캐싱)</li>\n<li>uniform interface</li>\n<li>layered system</li>\n<li>code on demand (optional) : 서버에서 클라이언트의 동작 가능하게함 (EX. javascript)</li>\n</ol>\n<p><strong>4.Uniform Interface</strong>가 가장 신경써야하는 제약조건, 구성요소를 살펴보자.</p>\n<ul>\n<li>Identification of resource                       - 자원이 URI로 대표되어야 한다. (대체적으로 잘 지켜짐)</li>\n<li>manipulation of resource through representations - 리소스의 행위를 HTTP 메서드로서 수행해야 한다(잘 지켜짐)</li>\n<li>self-descriptive messages                        - 메시지는 스스로를 설명해야 한다 (잘 지켜지지 않음!)</li>\n<li>메시지가 도달하는 경로</li>\n<li>응답메시지의 문법(의미전달)</li>\n</ul>\n<p>잘 지켜진 응답메시지 예시를 살펴보자</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP/1.1 200 OK\r\nContent-Type: application/json-patch+json\r\nHOST: example.com\r\n\r\n[ { \"op\" : \"remove\", \"path\": \"a/b/c\" } ]</code></pre></div>\n<p><a href=\"https://en.wikipedia.org/wiki/JSON_Patch\">json-patch+json</a>은 JSON을 문서의 변경을 알리는 웹 표준 포멧이다. op(Operation)에는 add, remove, replace, copy, move, test등의 메서드가 자리할 수 있다.</p>\n<ul>\n<li>HATEOAS 애플리케이션의 상태는 Hyperlink를 이용해 전이되어야 한다. (잘 지켜지지 않는 경우가 많다.)</li>\n</ul>\n<h3 id=\"디자인-특징\" style=\"position:relative;\"><a href=\"#%EB%94%94%EC%9E%90%EC%9D%B8-%ED%8A%B9%EC%A7%95\" aria-label=\"디자인 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디자인 특징</h3>\n<ul>\n<li>Representational State Transfer - URI가 하나의 Resource를 표헌한다.</li>\n<li>자원에 대한 행위를 HTTP 메서드로서 표현할 수 있다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">DELETE /article/3</code></pre></div>","id":"90bbf017-fe3e-5f5c-8309-6423f2b5a6c7","fields":{"slug":"rest-api-핵심개념-체크"},"frontmatter":{"date":"2019-08-30","title":"REST API 핵심개념 체크","category":"web","tags":null,"banner":null},"timeToRead":1}}},"staticQueryHashes":[],"slicesMap":{}}