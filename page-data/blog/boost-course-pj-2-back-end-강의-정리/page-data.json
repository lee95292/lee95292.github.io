{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/boost-course-pj-2-back-end-강의-정리/","result":{"data":{"markdownRemark":{"html":"<h2 id=\"jsp-강의정리\" style=\"position:relative;\"><a href=\"#jsp-%EA%B0%95%EC%9D%98%EC%A0%95%EB%A6%AC\" aria-label=\"jsp 강의정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSP 강의정리</h2>\n<hr>\n<p>Java Server Page, 자바 언어를 통해, 웹 페이지를 표시하는 기술</p>\n<br>\n<h1 id=\"scope란\" style=\"position:relative;\"><a href=\"#scope%EB%9E%80\" aria-label=\"scope란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope란?</h1>\n<hr>\n<p>웹을 개발하면서 사용할 변수들에 대해, 유지되는 범위(scope)를 의미한다.</p>\n<p>page > request > session > application 의 포함관계가 있다.</p>\n<br>\n<h1 id=\"page-scope\" style=\"position:relative;\"><a href=\"#page-scope\" aria-label=\"page scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>page scope</h1>\n<hr>\n<p>서블릿의 PageContext</p>\n<ul>\n<li>pageContext 내장객체 사용(jsp)</li>\n<li>웹 페이지가 실행되는 동안 사용됨 (forward시, 내장객체 사라짐)</li>\n</ul>\n<br>\n<h1 id=\"request-scope\" style=\"position:relative;\"><a href=\"#request-scope\" aria-label=\"request scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>request scope</h1>\n<hr>\n<p>서블릿의 HttpServeltRequest</p>\n<ul>\n<li>request 내장객체 사용(jsp), set,get Attribute 메서드, 디스패쳐 메서드 존재</li>\n<li>요청이 들어오고 응답이 나갈 때 까지 사용됨</li>\n<li>페이지가 이동하는 forward에서도 객체 유지됨</li>\n</ul>\n<br>\n<h1 id=\"session-scope\" style=\"position:relative;\"><a href=\"#session-scope\" aria-label=\"session scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>session scope</h1>\n<hr>\n<p>서블릿의 HttpSession</p>\n<ul>\n<li>세션이 유지되는 동안 객체 유지됨, session 내장객체(jsp) 사용</li>\n<li>set,get Attribute 메서드 존재</li>\n<li>클라이언트(browser) 별로 변수 관리</li>\n</ul>\n<br>\n<h1 id=\"application-scope\" style=\"position:relative;\"><a href=\"#application-scope\" aria-label=\"application scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>application scope</h1>\n<hr>\n<p>서블릿의 ServletContext</p>\n<ul>\n<li>여러 개의 클라이언트들이 값을 공유, application 내장객체(jsp) 사용</li>\n</ul>\n<br>\n<h1 id=\"expression-language\" style=\"position:relative;\"><a href=\"#expression-language\" aria-label=\"expression language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expression Language</h1>\n<hr>\n<p>EL은, 값을 표현하는 데 사용되는 스크립트언어로서 JSP 문법을 보완하는 역할을 하며, 기능은 다음과 같다.</p>\n<ul>\n<li>JSP의 스코프에 맞는 속성 사용</li>\n<li>집합 객체에 대한 접근 방법 제공</li>\n<li>수치, 관계, 논리 연산자 제공</li>\n<li>자바 클래스 메서드 호출 기능 제공</li>\n<li>EL만의 기본객체 제공</li>\n</ul>\n<br>\n<h2 id=\"표현언어의-사용방법\" style=\"position:relative;\"><a href=\"#%ED%91%9C%ED%98%84%EC%96%B8%EC%96%B4%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"표현언어의 사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현언어의 사용방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">$<span class=\"token punctuation\">{</span>expression<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>위의 기본예제와 같이, $달러 옆의 {}중괄호 내에 표현식을 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsp\"><pre class=\"language-jsp\"><code class=\"language-jsp\">&lt;jsp:include page = &quot;/module/${skin.id}/header.jsp&quot; flush=&quot;true&quot;&gt;\r\n&lt;b&gt;${sessionScope.member.id}&lt;/b&gt;님 환영합니다.</code></pre></div>\n<p>jsp로 작성된 EL 예제</p>\n<p>표현언어가 제공하는 기본객체는 아래와 같다.</p>\n<ul>\n<li>\n<p>pageContext</p>\n</li>\n<li>\n<p>pageScope, requestScope, sessionScope, applicationScope - 기본객체에 저장된 <strong>속성-값</strong> 매핑을 저장한 Map 객체</p>\n</li>\n<li>\n<p>param - 요청 파라미터의 <strong>파라미터이름-값</strong> 매핑을 저장한 Map 객체</p>\n</li>\n<li>\n<p>paramValues - 요청 파라미터의 값들을 <strong>파라미터이름 - 값배열</strong> 매핑을 저장한 Map 객체</p>\n</li>\n<li>\n<p>header - 요청정보의 헤더이름-값 매핑을 저장한 Map 객체</p>\n</li>\n<li>\n<p>headerValues - 위 관계와 동일</p>\n</li>\n<li>\n<p>cookie - 쿠키이름 - 쿠키 매핑저장</p>\n</li>\n<li>\n<p>initParam - 초기화 파라미터의 이름- 값 매핑 저장</p>\n</li>\n</ul>\n<br>\r\n<br>\r\n# JSTL - JSP Standard Tag Library\n<p>생략</p>\n<h1 id=\"database\" style=\"position:relative;\"><a href=\"#database\" aria-label=\"database permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataBase</h1>\n<p>데이터베이스는 따로 Mysql 설치, 문법 예제 연습 의 2개 시리즈의 포스팅으로 나누어 작성</p>","fields":{"slug":"boost-course-pj-2-back-end-강의-정리"},"frontmatter":{"title":"[BoostCourse] PJ2 BackEnd 강의 정리","date":"02.24.2019","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":1}},"pageContext":{"slug":"boost-course-pj-2-back-end-강의-정리","prev":{"excerpt":"javascript 수강내용 변수와 연산자 변수 변수의 선언은 var, let, const 키워드를 통해 선언할 수 있음. 각자 선언 방법에 따라 유효범위(scope)가 달라진다. 선언방법 var - Function Scope, 함수 단위의 유효범위를 가진다. 재선언과 재할당이 가능하다. 선언 예약어를 지정하지 않을 시, 기본으로 지정된다. 즉, i =3 과  var i = 3은 같은 문장이다. const - Block Scope…","html":"<h1 id=\"javascript-수강내용\" style=\"position:relative;\"><a href=\"#javascript-%EC%88%98%EA%B0%95%EB%82%B4%EC%9A%A9\" aria-label=\"javascript 수강내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript 수강내용</h1>\n<h1 id=\"변수와-연산자\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%99%80-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"변수와 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수와 연산자</h1>\n<hr>\n<br>\r\n> 변수 선언 / 연산자 / Type 종류 / Type 확인\n<h2 id=\"변수\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98\" aria-label=\"변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수</h2>\n<p>변수의 선언은 <strong>var, let, const</strong> 키워드를 통해 선언할 수 있음.</p>\n<p>각자 선언 방법에 따라 유효범위(scope)가 달라진다.</p>\n<h3 id=\"선언방법\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%EB%B0%A9%EB%B2%95\" aria-label=\"선언방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언방법</h3>\n<hr>\n<ul>\n<li>\n<p><strong>var</strong> - Function Scope, 함수 단위의 유효범위를 가진다.</p>\n<ul>\n<li><strong>재선언</strong>과 <strong>재할당</strong>이 가능하다.</li>\n<li>선언 예약어를 지정하지 않을 시, 기본으로 지정된다.</li>\n<li>즉, i =3 과  var i = 3은 같은 문장이다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>const</strong> - Block Scope, 중괄호 단위의 유효범위를 가진다.</p>\n<ul>\n<li>\n<p>재선언과 재할당이 불가능하다. 상수를 선언하는 키워드임</p>\n</li>\n<li>\n<p>즉, 값이 변경되지 않는다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li><strong>let</strong> - Block Scope, 중괄호 단위의 유효범위를 가진다.</li>\n</ul>\n<br>\n<p><strong>scope는</strong> 쉽게 말해, 변수가 지역변수가 될 수 있는 조건을 의미한다.</p>\n<p>각각이 중괄호, 함수 내에 선언되면 지역변수가 되고, 그렇지 않으면 전역변수이다.</p>\n<p>말은 이렇게 하지만, 정리하고있는 시점에서도 가끔씩 혼동이 온다..</p>\n<p>let,var,const에 대해 <a href=\"https://blog.hanumoka.net/2018/09/21/javascript-20180921-javascript-var-let-const/\">잘 정리된 링크</a>를 참고하자.</p>\n<h2 id=\"연산자\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연산자</h2>\n<hr>\n<p>사칙연산(+,-,/,*), 나머지연산, 삼항연산은 다른 프로그래밍</p>\n<p>언어와 동일하므로 생략</p>\n<ul>\n<li>비교연산자</li>\n</ul>\n<p>비교연산에는 ==보다 ===를 사용한다.</p>\n<p>==으로 비교하는 경우, 좌항과 우항의 타입을 일치시킨 후 비교하고,</p>\n<p>===으로 비교하는 경우, 좌항과 우항의 타입까지 고려하여 비교한다.</p>\n<p>==으로 비교할 경우 고려하지 않은 결과로 인해 비교연산이 예측과 달라질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n\r\na<span class=\"token operator\">==</span>b<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//true</span>\r\na<span class=\"token operator\">===</span>b<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//false</span></code></pre></div>\n<h2 id=\"반복-제어문\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5-%EC%A0%9C%EC%96%B4%EB%AC%B8\" aria-label=\"반복 제어문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복 (제어문)</h2>\n<hr>\n<p>비교 및 반복문에는, if, switch, while, for(for-each, for-of, for-in), Label, do-while문 등이 있습니다.</p>\n<p>c언어 학습자 기준으로 생소한 문법들만 정리해보겠습니다.</p>\n<ul>\n<li>Label - 보통 루프를 식별하기 위해 사용합니다. 식별한 루프문들에 대해, break, continue문들을 사용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> a<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">innerLoop</span> <span class=\"token operator\">:</span> \r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        a<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">break</span> innerLoop<span class=\"token punctuation\">;</span>       \r\n    <span class=\"token punctuation\">}</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<ul>\n<li>for-in - 객체의 열거 속성을 통해 지정된 변수를 반복합니다.</li>\n</ul>\n<h1 id=\"window-객체settimeout\" style=\"position:relative;\"><a href=\"#window-%EA%B0%9D%EC%B2%B4settimeout\" aria-label=\"window 객체settimeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Window 객체(setTimeout)</h1>\n<hr>\n<p>전역객체(window)에 속한 메서드는, 경고창을 띄워주는 alert, setTimeout이라는 메서드들이 있다. 이를 통해 비동기방식을 알아본다.</p>\n<blockquote>\n<p>callback 함수란, 호출 즉시 실행되지 않거나 아예 실행되지 않을 수도 있는 함수이다. 호출한 대상(call)에서 되부름(callback)되기 때문에 callback이라고 부른다.</p>\n</blockquote>\n<p>전역객체의 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//전역객체인 window 생략 가능</span></code></pre></div>\n<p><strong>나는 2초마다</strong> <strong>팝업</strong> 알림창을 띄우는 프로그램을 작성해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>     \r\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>   <span class=\"token comment\">//</span>\r\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>v<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>callback을 정확히 이해했다면, 이 코드는 작성자의 예상과 다르게 작동함을 알 수 있다.</p>\n<p><strong>위 프로그램은 10회 run 함수를 호출함과 동시에 setTimeout메서드를 10회 호출하고,</strong></p>\n<p>2초뒤에 10개의 알림메시지를 수행하는 코드로 callback된다.</p>\n<p>사실 2초에 한 번씩 알림을 호출하는 프로그램에는 콜백함수가 필요 없다</p>\n<p>(굳이 콜백을 써서 반복을 구현하려면, setInterval을 사용하면 된다고 한다.)</p>\n <br>\n<h1 id=\"dom과-queryselector\" style=\"position:relative;\"><a href=\"#dom%EA%B3%BC-queryselector\" aria-label=\"dom과 queryselector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM과 querySelector</h1>\n<hr>\n<p>HTML의 구조와 데이터를 이해하고, javascript로 이를 변경하는 방법에 대해 이해하기</p>\n<ul>\n<li>브라우저는 HTML 코드를 DOM이라는 객체 형태의 모델로 저장한다. (DOM tree)</li>\n</ul>\n<blockquote>\n<p>부연설명 - 태그 요소의 아이디, 클래스, 텍스트 등의 정보를 트리형태의 객체(Object)로 저장한다는 의미</p>\n</blockquote>\n<p>//관련 이미지 추가</p>\n<br>\n<h3 id=\"javascript의-dom-api\" style=\"position:relative;\"><a href=\"#javascript%EC%9D%98-dom-api\" aria-label=\"javascript의 dom api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript의 DOM API</h3>\n<hr>\n<p>DOM, 즉 페이지 정보를 트리형태의 객체로 저장한 데이터에서</p>\n<p>일일이 javascript로 원하는 데이터를 추출하는 알고리즘을 짜는 것은 매우 복잡하다.</p>\n<p>이에 javascript에서는 DOM API를 제공한다.</p>\n<ul>\n<li>\n<p>.getElementById() - id 기반으로 정보를 찾습니다. 마찬가지로 Class나 Tag의 이름으로 찾는것도 가능</p>\n</li>\n<li>\n<p>Element.querySelector() - css의 selector를 기반으로 질의(query)합니다.</p>\n</li>\n</ul>\n<br>\n<h1 id=\"브라우저-이벤트\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"브라우저 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 이벤트</h1>\n<hr>\n<p>사용자로 인해 발생하는 많은 이벤트들은, 마우스 클릭, 스크롤, 이동 등등 여러 경우에 발생합니다.(키보드 등 다른 입력장치의 경우에도 마찬가지)</p>\n<p>이러한 이벤트 발생 정보를 통해 새로운 이벤트를 등록 할 수 있습니다.</p>\n<ul>\n<li>이벤트 등록 표준 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> se <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>gogo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//DOM 오브젝트 지정</span>\r\nse<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>target<span class=\"token operator\">+</span><span class=\"token string\">\": ouch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h1 id=\"ajax\" style=\"position:relative;\"><a href=\"#ajax\" aria-label=\"ajax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AJAX</h1>\n<hr>\n<p>AJAX는 단일 기술에 대한 내용이 아니라, 웹에서 데이터를 갱신할 때, 브라우저 새로고침 없이 비동기적으로 컨텐츠를 변경시킬 때 사용하는 모든 기술을 의미합니다.</p>\n<p>기본 예제코드</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> oReq<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"https://www.exampleurl.com/example.html?data=data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \r\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<p>XMLHttpRequest의 메서드 (oReq에서 사용된 메서드)</p>\n<p>open(TYPE, URL, ASYNC) - 요청객체의 커넥션을 생성</p>\n<ul>\n<li>TYPE : get,post같은 요청 메서드</li>\n<li>URL : 요청을 처리할 서버 URL</li>\n<li>ASYNC : 비동기 -true, 동기 - false</li>\n</ul>\n<p>send(DATA) - 서버로 요청을 전송</p>\n<ul>\n<li>DATA : 요청 전송 시 HTTP의 body에 담길 데이터 전송. get요청이므로 null이 들어감.</li>\n</ul>\n<br>\n<hr>\n<p>-끝</p>","id":"4eff337a-4e2a-5085-96e0-2eeb0d71dcd5","fields":{"slug":"boost-course-pj-2-javascript-강의-정리"},"frontmatter":{"date":"2019-02-18","title":"[BoostCourse] PJ2 Javascript 강의 정리","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":2},"next":{"excerpt":"SQL 하나로 정리하기 : INTG 프로젝트 목차 select create  //(https://sqlzoo.net/wiki/CREATE_and_DROP_Reference)  레퍼런스 SQLzoo :sql 예제 연습사이트 TCPschool : sql을 비롯한 여러가지 프로그래밍 언어 정리된 사이트  001 SELECT basics 1번 : 독일의 인구 찾기  2번 IN 사용 :(스웨덴 ,노르웨이, 덴마크)의  이름, 인구 출력…","html":"<p>SQL 하나로 정리하기 : INTG 프로젝트</p>\n<h3 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h3>\n<hr>\n<ul>\n<li><a href=\"#select\">select</a></li>\n<li><a href=\"#create\">create</a>  //(<a href=\"https://sqlzoo.net/wiki/CREATE_and_DROP_Reference\">https://sqlzoo.net/wiki/CREATE_and_DROP_Reference</a>)</li>\n</ul>\n<p><br><br></p>\n<h3 id=\"레퍼런스\" style=\"position:relative;\"><a href=\"#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4\" aria-label=\"레퍼런스 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레퍼런스</h3>\n<hr>\n<ul>\n<li><a href=\"https://sqlzoo.net/\">SQLzoo</a> :sql 예제 연습사이트</li>\n<li><a href=\"http://tcpschool.com/mysql/intro\">TCPschool</a> : sql을 비롯한 여러가지 프로그래밍 언어 정리된 사이트</li>\n</ul>\n<p><br><br><br></p>\n<h1><a name=\"select\">select문</a></h1>\r\n---\n<h1 id=\"001-select-basics\" style=\"position:relative;\"><a href=\"#001-select-basics\" aria-label=\"001 select basics permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>001 SELECT basics</h1>\n<hr>\n<p>1번 : 독일의 인구 찾기</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> population <span class=\"token keyword\">FROM</span> world\r\n  <span class=\"token keyword\">WHERE</span> name<span class=\"token operator\">=</span><span class=\"token string\">'Germany'</span></code></pre></div>\n<p><br><br></p>\n<p>2번 IN 사용 :(스웨덴 ,노르웨이, 덴마크)의  이름, 인구 출력</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span>population <span class=\"token keyword\">FROM</span> world \r\n  <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">IN</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Sweden'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Norway'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'Denmark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><br><br></p>\n<p>3번 BETWEEN ~ AND 사용 - 인구가 20만~25만 사이 국가 이름,영토 출력</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span>area <span class=\"token keyword\">FROM</span> world \r\n  <span class=\"token keyword\">WHERE</span> area <span class=\"token operator\">BETWEEN</span> <span class=\"token number\">200000</span> <span class=\"token operator\">AND</span> <span class=\"token number\">250000</span></code></pre></div>\n<p><br><br></p>\n<h1 id=\"002-select-name\" style=\"position:relative;\"><a href=\"#002-select-name\" aria-label=\"002 select name permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>002 SELECT name</h1>\n<hr>\n<p><br><br></p>\n<blockquote>\n<p>pattern matching strings</p>\n</blockquote>\n<p>1번  LIKE, multicharacter wildcard(%)사용</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name <span class=\"token keyword\">FROM</span> world\r\n  <span class=\"token keyword\">WHERE</span> name <span class=\"token operator\">LIKE</span> <span class=\"token string\">'Y%'</span> <span class=\"token comment\">-- Y로 시작하는 이름</span></code></pre></div>\n<p><br><br></p>\n<p>7번 LIKE,wildcard(%) 응용</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name <span class=\"token keyword\">FROM</span> world \r\n  <span class=\"token keyword\">where</span> name <span class=\"token operator\">LIKE</span> <span class=\"token string\">'%a%a%a%'</span>  <span class=\"token comment\">-- a가 세번이상 들어가는 국가</span></code></pre></div>\n<p><br><br></p>\n<p>8번 LIKE,single character wildcard(%) 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name <span class=\"token keyword\">FROM</span> world \r\n  <span class=\"token keyword\">where</span> name <span class=\"token operator\">LIKE</span> <span class=\"token string\">'_t'</span> <span class=\"token comment\">-- 두 번째 글자가 t</span></code></pre></div>\n<p><br><br></p>\n<p>12번 LIKE, CONCAT 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name <span class=\"token keyword\">FROM</span> world \r\n  <span class=\"token keyword\">WHERE</span> capital <span class=\"token operator\">LIKE</span> concat<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">' City'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- Mexico - Mexico City 같은 관계를 가진 수도 출력</span></code></pre></div>\n<p><br><br></p>\n<p>15번 꽤 어려운 문제 - 수도가 국가이름의 확정인 경우, 국가이름과 확장된부분 출력</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> name<span class=\"token punctuation\">,</span><span class=\"token keyword\">REPLACE</span><span class=\"token punctuation\">(</span>capital<span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> extension <span class=\"token keyword\">FROM</span> world\r\n <span class=\"token keyword\">WHERE</span> capital <span class=\"token operator\">LIKE</span> concat<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">' %'</span><span class=\"token punctuation\">)</span> \r\n   <span class=\"token operator\">OR</span> capital <span class=\"token operator\">LIKE</span> concat<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span><span class=\"token string\">'-%'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h1><a name=\"create\">create문</a></h1>\n<hr>\n<p><br><br></p>\n<h3 id=\"테이블-생성-제약조건\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%83%9D%EC%84%B1-%EC%A0%9C%EC%95%BD%EC%A1%B0%EA%B1%B4\" aria-label=\"테이블 생성 제약조건 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테이블 생성 제약조건</h3>\n<hr>\n<ol>\n<li>\n<p>NOT NULL : 해당 필드는 NULL 값을 저장할 수 없게 됩니다. INSERT 구문에서 해당 영역을 생략할 시, 기본값이 삽입됩니다.</p>\n</li>\n<li>\n<p>UNIQUE : 해당 필드는 서로 다른 값을 가져야만 합니다.</p>\n</li>\n<li>\n<p>PRIMARY KEY : 해당 필드가 NOT NULL과 UNIQUE 제약 조건의 특징을 모두 가지게 됩니다.</p>\n</li>\n<li>\n<p>FOREIGN KEY : 하나의 테이블을 다른 테이블에 의존하게 만듭니다.</p>\n</li>\n<li>\n<p>DEFAULT : 해당 필드의 기본값을 설정합니다.</p>\n</li>\n</ol>","id":"0c982466-4314-5c01-b79d-b9fd1a7252fa","fields":{"slug":"intg-sql-sql-cheet-sheet-구문-예제-및-문법-정리"},"frontmatter":{"date":"2019-03-04","title":"[INTG, SQL] SQL Cheet Sheet 구문 예제 및 문법 정리","category":"intg","tags":null,"banner":null,"description":null},"timeToRead":1}}},"staticQueryHashes":[],"slicesMap":{}}