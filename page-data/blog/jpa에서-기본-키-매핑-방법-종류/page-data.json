{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/jpa에서-기본-키-매핑-방법-종류/","result":{"data":{"markdownRemark":{"html":"<p>JPA에서 엔티티와 데이터베이스의  기본 키(Primary Key) 매핑을 알아보겠습니다.</p>\n<p>데이터베이스에는 <strong>유일성</strong> <strong>최소성</strong>을 만족하는지 여부에 따라 몇가지 키 종류가 존재합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226088482-446952cd-6dc2-42a8-b0dd-10e0a9e20137.png\" alt=\"1\"></p>\n<p><strong>유일성</strong>이란, 여러 레코드들 중, 하나의 레코드를 특정지을 수 있는 키의 특성입니다.</p>\n<p>예를들어 이름,생일과 같은 특성은 레코드를 하나로 특정지을 수 없지만, [**학교 , 학번]**의 조합이나 [**주민등록번호]**와 같은 특성은 레코드를 유일하게 특정지을 수 있으므로 유일성을 만적하는 특성입니다.</p>\n<p><strong>최소성</strong>이란, 레코드를 유일하게 식별하는데 꼭 필요한 최소한의 특성만 선택되어야한다는 키의 특성입니다.</p>\n<p>예를 들어, <strong>[이름, 나이, 주민등록번호]</strong> 의 속성 조합으로 유일성을 만족하지만, 이름과 나이 없이 주민등록번호만으로 레코드를 유일하게 식별할 수 있으므로, <strong>최소성을 만족하지 못하는 키</strong>이고, <strong>[주민등록번호]</strong> 로 구성된 키는 <strong>최소성을 만족한다</strong>고 할 수 있습니다.</p>\n<h2 id=\"jpa의-기본-키-매핑-방법\" style=\"position:relative;\"><a href=\"#jpa%EC%9D%98-%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EB%A7%A4%ED%95%91-%EB%B0%A9%EB%B2%95\" aria-label=\"jpa의 기본 키 매핑 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA의 기본 키 매핑 방법</h2>\n<p>데이터베이스 시스템에서는 보통 레코드의 기본 키를 설정하기 위한 디폴트 설정이 있습니다. 앞서 소개한 주민등록번호나 학교+학번은 사실 <strong>비즈니스 상 변경</strong>될 수도 있는 값이고, <strong>인덱스를 통해</strong> <strong>효율적으로 탐색</strong>하기에는 부적절한 키입니다.</p>\n<p>그렇기때문에 데이터베이스 시스템에서는 비즈니스 로직과 관계 없는 고유한 값을 만들어 기본 키로 채택하는데요,   이번 글은 JPA에서 엔티티와 데이터베이스 테이블 간 “기본 키”를 어떻게 생성하고 매핑하는지 알아보겠습니다.</p>\n<p>참고로 좋은 데이터베이스 기본 키를 선택하는 기준은 아래와 같습니다.</p>\n<ul>\n<li>Null값을 허용하지 않음</li>\n<li>변하지 않음</li>\n<li>유일함</li>\n</ul>\n<p>JPA로 엔티티를 한번 이상 만들어봤다면, 기본적으로 아래 구조를 띄는것을 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span>\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이렇게 구성하면, Member테이블의 Key인 Id필드는 언제 지정될까요? 영속성 관리에서 배운것처럼, 엔티티는 바로 데이터베이스에 저장되지 않고 1차캐시에 저장됩니다.</p>\n<p><em><strong>고치기</strong></em></p>\n<p>만약 데이터베이스의 기본 키 생성 전략이 직접할당일 경우에는, 애플리케이션에서 엔티티의 키를 설정할 방법이 없을것입니다.</p>\n<p>JPA에서는 데이터베이스 벤더별로 각기 다른 키 생성 전략과 자바 엔티티를 매핑하기 위해, @Id 컬럼에 여러 옵션들을 제공합니다.</p>\n<h2 id=\"기본-키-생성-전략\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%82%A4-%EC%83%9D%EC%84%B1-%EC%A0%84%EB%9E%B5\" aria-label=\"기본 키 생성 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 키 생성 전략</h2>\n<p>기본키를 어떤 방식으로 생성하느냐에 따라, <strong>개발자가 키를 직접 설정하는</strong> 직접할당 전략, <strong>자동으로 키를 생성하는</strong>  IDENTITY, SEQUENCE, TABLE, AUTO 전략을 살펴봅니다.</p>\n<p>아래의 Java 타입을 선언한 뒤, Id애너테이션을 통해 필드가 기본 키로 매핑되도록 합니다.</p>\n<p>@<strong>Id필드 타입</strong></p>\n<p>Id 애너테이션은 다음과 같은 자바 타입에서만 적용 가능합니다</p>\n<ul>\n<li>Primitive Types</li>\n<li>Wrapper Types</li>\n<li>String</li>\n<li>java.util.Date</li>\n<li>java.sql.Date</li>\n<li>java.math.[bigDecimal, bigInteger]</li>\n</ul>\n<h3 id=\"직접-할당-전략\" style=\"position:relative;\"><a href=\"#%EC%A7%81%EC%A0%91-%ED%95%A0%EB%8B%B9-%EC%A0%84%EB%9E%B5\" aria-label=\"직접 할당 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>직접 할당 전략</h3>\n<p>기본 키 직접 할당 전략은 프로그래머가 <strong>엔티티매니저에 영속되기 전에</strong> 엔티티의 키를 직접 할당하는 방식입니다.</p>\n<p>이 방식에서 식별자 값 없이 영속시키면 PersistenceExeption이 발생합니다.</p>\n<p><strong>설정방법:  Id</strong> 필드에 @Id 애너테이션을 적용하면 기본키를 직접 할당방식으로 테이블이 생성됩니다.</p>\n<h3 id=\"identity-전략\" style=\"position:relative;\"><a href=\"#identity-%EC%A0%84%EB%9E%B5\" aria-label=\"identity 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IDENTITY 전략</h3>\n<p>IDENTITY전략은 기본 키 생성 전략을 데이터베이스에 위임하는 방식입니다.</p>\n<p>보통 AUTO_INCREMENT같은 자동 키 생성방법을 제공하는 MySQL, Postgresql, DB2등에서 사용합니다.</p>\n<p><strong>설정방법: 필드에</strong> GeneratedValue 애너테이션, strategy 옵션을 GenerationType.IDENTITY로 설정</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span>\n\t<span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>em.persist(member) → insert query 날리고 → select query(id 포함된 레코드) → 영속성 컨텍스트에 저장</strong></p>\n<p><strong>주의사항</strong></p>\n<p>영속성 컨텍스트에 저장될때는 필수로 식별자 값이 필요한데, IDENTITY 전략에서는 기본 키를 데이터베이스에서 지정하므로, <strong>식별자를 알 수없다</strong>.</p>\n<p>그러므로 IDENTITY전략을 사용하는 엔티티는 <strong>영속되는 시점에 INSERT쿼리를 데이터베이스에 전달</strong>한다.</p>\n<p>따라서 <strong>IDENTITY전략에서는 트랜잭션을 지원하는 쓰기지연이 동작하지 않는다.</strong></p>\n<p><strong>최적화 방법</strong></p>\n<p>IDENTITY전략에서는 영속 시 INSERT쿼리를 데이터베이스에 전달하고, 식별자를 얻기 위해 추가로 조회작업을 해야해서 총 <strong>2번의 통신이 이뤄진다.</strong></p>\n<p>JDBC3에서 추가된 Statement.getGeneratedKeys()를 사용하면, 데이터를 저장하면서 동시에 생성된 기본 키 값도 얻어올 수 있다.</p>\n<h3 id=\"sequence-전략\" style=\"position:relative;\"><a href=\"#sequence-%EC%A0%84%EB%9E%B5\" aria-label=\"sequence 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SEQUENCE 전략</h3>\n<p>데이터베이스에서 시퀀스는 유일한 값을 순서대로 생성하는 데이터베이스 오브젝트입니다. Sequence를 제공하는 Oracle,Postgresql, DB2,H2등에서 사용가능합니다.</p>\n<p>SEQUENCE방법은 이를 통해 기본 키를 생성합니다.</p>\n<p><strong>설정방법:</strong></p>\n<ul>\n<li>엔티티에 @SequenceGenerator 등록: 시퀀스 생성기 등록  옵션은 아래와 같습니다.\n<ul>\n<li>name : 엔티티에서 갖는 시퀀스생성기 이름(필수)</li>\n<li>sequenceName : 데이터베이스의 시퀀스 이름</li>\n<li>initialValue : DDL 생성시 처음 시작하는 숫자</li>\n<li>allocationSize:시퀀스 호출 시 증가하는 숫자, 기본값 50 (최적화에 사용)</li>\n<li>catalog, schema: 데이터베이스의  catalog, schema</li>\n</ul>\n</li>\n<li>@GeneratedValue의 strategy 속성을 GenerationType.SEQUENCE로 설정</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@SequenceGenerator</span><span class=\"token punctuation\">(</span>\n\tname<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_SEQ_GENERATOR\"</span><span class=\"token punctuation\">,</span>  \n\tsequenceName<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_SEQ\"</span><span class=\"token punctuation\">,</span> \n\tinitialValue<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> \n\tallocationSize<span class=\"token operator\">=</span><span class=\"token number\">1</span>  \n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token annotation punctuation\">@Id</span>\n\t<span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy<span class=\"token operator\">=</span><span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">SEQUENCE</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>@SequenceGenerator의 옵션이 다양하게 존재하는것을 확인할 수 있다.</p>\n<p><strong>참고사항1. 시퀀스 동작구조</strong></p>\n<p>IDENTITY전략과 마찬가지로 ,데이터베이스에서 식별자 값을 가져와야 하지만 IDENTITY전략이 영속성 컨텍스트에서 Insert 쿼리를 날린 뒤 조회를 한것과는 달리, SEQUENCE 전략에서는 데이터베이스 시퀀스만 조회해 식별자값만 가져온다.</p>\n<div class=\"gatsby-highlight\" data-language=\"sql\"><pre class=\"language-sql\"><code class=\"language-sql\"><span class=\"token keyword\">SELECT</span> emp_seq<span class=\"token punctuation\">.</span>NEXTVAL\n     <span class=\"token punctuation\">,</span> emp_seq<span class=\"token punctuation\">.</span>CURRVAL\n  <span class=\"token keyword\">FROM</span> dual</code></pre></div>\n<p>따라서 <strong>SEQUENCE전략은 트랜잭션을 사용하는 쓰기지연 방식을 지원하지만, 시퀀스를 추가적으로 조회한다</strong>.</p>\n<p><strong>참고사항 2. allocationSize의 기본값이 50이다.</strong></p>\n<p><strong>hibernate.id.new_generator_mappings 설정이 true인 경우, allocationSize</strong>는 <strong>기본적으로 50으로 설정됩니다. 이는 JPA의 시퀀스 접근횟수를 줄이기 위함이고, 아래와 같이 동작합니다.</strong></p>\n<ul>\n<li>JPA에서 데이터베이스 시퀀스에 접근</li>\n<li>시퀀스는 <strong>allocationSize값인 50만큼 시퀀스를 생성</strong></li>\n<li>JPA는 메모리에 1 ~ 50까지의 시퀀스를 메모리에 할당.</li>\n<li>50개까지 엔티티가 생성되어도, 시퀀스를 생성하기 위해 DB에 접근하지 않아도 됨.</li>\n</ul>\n<p>멀티서버 환경에서는 엔티티가 생성된 순서대로 ID가 증가하지는 않지만, Insert성능 측면에서 가장 훌륭함.</p>\n<h3 id=\"table-전략\" style=\"position:relative;\"><a href=\"#table-%EC%A0%84%EB%9E%B5\" aria-label=\"table 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TABLE 전략</h3>\n<p>TABLE전략은 키 생성용 테이블을 만들고, 이름과 값으로 사용할 컬럼을 만들어 데이터베이스 시퀀스를 흉내내는 전략입니다. 또한, 테이블을 사용하므로 모든 데이터베이스에서 적용가능합니다.</p>\n<p><strong>설정방법:</strong></p>\n<ul>\n<li>필드에 @GeneratedValue 등록, 아래의 속성 추가\n<ul>\n<li>strategy = GenerationType.Table,</li>\n<li>generator = 시퀀스 생성테이블 이름(TableGenerator의 name속성 값) 등록</li>\n</ul>\n</li>\n<li>엔티티에 @TableGenerator 등록 : 속성들이 많은데, 시퀀스 테이블을 구성하기 위한 이름과 관련된것들이 많습니다. 아래에서 설명합니다.\n<ul>\n<li>name: 식별자 생성기 이름 (필수)</li>\n<li>table:  키 생성 테이블명 (기본값 - hibernate_sequence)</li>\n<li>pkColumnValue:  키로 사용할 이름 [ Default - 엔티티명 ]</li>\n<li>pkColumnName: 시퀀스 컬럼명 [ Default - sequence_name]</li>\n<li>valueColumnName: 시퀀스 값 컬럼명 [ Default - next_val ]</li>\n<li>initalValue: 초기 값 [ Default - 0 ]</li>\n<li>allocationSize; 시퀀스 한번 호출에 증가하는 숫자(최적화용), [ Default  1 or 50: 최적화 설정 적용여부에 따라 ]</li>\n<li>catalog, schema: 데이터베이스 catalog, schema 이름</li>\n<li>uniqueConstraints: 유니크 제약조건</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@TableGenerator</span><span class=\"token punctuation\">(</span>\n\tname<span class=\"token operator\">=</span><span class=\"token string\">\"BOARD_SEQ_GENERATOR\"</span><span class=\"token punctuation\">,</span>\n\ttable<span class=\"token operator\">=</span><span class=\"token string\">\"MY_SEQUENCE\"</span><span class=\"token punctuation\">,</span>\n\tpkColumnValue<span class=\"token operator\">=</span><span class=\"token string\">\"BOARD_SEQ\"</span><span class=\"token punctuation\">,</span> allocationSize<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Board</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span>\n\t<span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TABLE</span><span class=\"token punctuation\">,</span>\n\t\tgenerator <span class=\"token operator\">=</span> <span class=\"token string\">\"BOARD_SEQ_GENERATOR\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위와 같이 등록 하게 되면, 아래와 같이 시퀀스 이름과 시퀀스 값을 컬럼으로 갖는 테이블을 만들어 시퀀스를 관리합니다</p>\n<p>앞서 @TableGenerator의 속성들 중 <del>Column</del> 같은 이름에 사용되는 속성들이 많이 보이는데요, 시퀀스테이블을 구성할 때 사용하는 이름입니다.</p>\n<table>\n<thead>\n<tr>\n<th>sequence_name</th>\n<th>next_val</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BOARD_SEQ</td>\n<td>102</td>\n</tr>\n<tr>\n<td>MEMBER_SEQ</td>\n<td>50</td>\n</tr>\n</tbody>\n</table>\n<p><strong>참고사항: 테이블전략 동작구조</strong></p>\n<p>(시퀀스)테이블의 값을 조회하고, 이 값을 기반으로 Update쿼리를 한번 더 날리기때문에, 시퀀스 전략보다 네트워크 통신을 1회 더 한다는 단점이 있습니다.</p>\n<p>이는 SEQUENCE방법과 같이 allocationSize를 통해 최적화할 수 있습니다.</p>\n<h3 id=\"auto-전략\" style=\"position:relative;\"><a href=\"#auto-%EC%A0%84%EB%9E%B5\" aria-label=\"auto 전략 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AUTO 전략</h3>\n<p>@GeneratedValue.strategy의 기본 설정값인 AUTO전략입니다.</p>\n<p>AUTO 전략은 선택한 데이터베이스 방언에 따라 IDENTITY, SEQUENCE, TABLE중 하나를 자동으로 선택합니다.</p>\n<ul>\n<li><strong>데이터베이스가 변경되어도 코드를 수정할 필요가 없습니다.</strong></li>\n<li>MySQL은 IDENTITY, Oracle은 SEQUENCE방법 선택합니다.</li>\n</ul>\n<h2 id=\"매우매우-중요한-뽀인트\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%EC%9A%B0%EB%A7%A4%EC%9A%B0-%EC%A4%91%EC%9A%94%ED%95%9C-%EB%BD%80%EC%9D%B8%ED%8A%B8\" aria-label=\"매우매우 중요한 뽀인트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매우매우 중요한 뽀인트</h2>\n<p>JPA에서 <strong>키 생성 전략은 INSERT성능에 중요한 영향을 미친다!!!</strong></p>\n<h2 id=\"복습질문\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%EC%8A%B5%EC%A7%88%EB%AC%B8\" aria-label=\"복습질문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복습질문</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  자동 키 생성전략: IDENTITY, SEQUENCE, TABLE 방법에서 영속성 컨텍스트에 식별자를 동기화하기 위해 각각은 어떻게 동작하나요?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  allocationSize 속성은 어떻게 키 생성 전략에서 최적화를 수행하나요?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  AUTO 생성전략은 무엇이고, 어떤 장점이 있나요?</li>\n</ul>\n<h2 id=\"챕터에-없지만-알아볼-내용\" style=\"position:relative;\"><a href=\"#%EC%B1%95%ED%84%B0%EC%97%90-%EC%97%86%EC%A7%80%EB%A7%8C-%EC%95%8C%EC%95%84%EB%B3%BC-%EB%82%B4%EC%9A%A9\" aria-label=\"챕터에 없지만 알아볼 내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>챕터에 없지만 알아볼 내용</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled>  Table 방식과 Sequence 방식은 근본적으로 어떤 차이점이 있나요? (시퀸스는 테이블과 어떻게 다른가요?)</p>\n</li>\n</ul>\n<h3 id=\"정답\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%8B%B5\" aria-label=\"정답 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정답</h3>\n<ul>\n<li>각 방법에 대한 답변\n<ul>\n<li>IDENTITY의 경우, 데이터베이스에 키 생성전략을 위임한다. AUTO_INCREMENT같이 자동으로 기본 키를 설정해주는 MYSQL등에서 사용한다. (MySQL AUTO_INCREMENT가 적용되었을 때, id없이 insert 쿼리가 가능하다!). [ 삽입/조회 쿼리 발생, 쓰기지연 불가 ]</li>\n<li>SEQUENCE는 증가하는 값을 생성해내는 객체로, 조회만을 통해 증가하는 값을 할당받아 엔티티의 키로 지정한다. [ 조회쿼리 발생, <strong>allocationSize로</strong> 최적화 가능 ]</li>\n<li>TABLE은 키 할당 정보를 관리하는 테이블을 생성해 키를 매핑한다. Sequence와 유사하게 동작합니다. [ 조회/수정쿼리 발생, <strong>allocationSize로</strong> 최적화 가능 ]</li>\n</ul>\n</li>\n<li>Table, Sequence방법에서 사용하는 최적화 전략으로, 키를 allocationSize만큼 할당받아 사용. 식별자를 생성하기 위해 N회 쿼리를 날리는것에서 N/allocationSize 만큼만 쿼리를 날리게 됨.</li>\n<li>AUTO방식은 데이터베이스 방언에 맞는 자동 키 생성방식을 설정합니다. 데이터베이스 벤더가 변경되어도 코드가 변경될 필요가 없다는 장점이 있습니다.</li>\n</ul>\n<hr>\n<ul>\n<li>시퀀스는 select 시퀀스네임.nextval from dual 을 통해 다음 값을 조회하고 자동으로 증가합니다. 따라서 테이블 방식과 달리, Update 쿼리를 사용할 필요가 없어 효율적입니다.</li>\n</ul>","fields":{"slug":"jpa에서-기본-키-매핑-방법-종류"},"frontmatter":{"title":"JPA에서 기본 키 매핑 방법 종류","date":"01.13.2023","category":"tech","tags":["JPA","JPA 스터디"],"banner":null},"timeToRead":4}},"pageContext":{"slug":"jpa에서-기본-키-매핑-방법-종류","prev":{"excerpt":"JPA에서 엔티티를 작성하는 방법 JPA에서 **엔티티(Entity)**는 관계형 데이터베이스의 테이블과 대응하며, JPA가 관리하는 클래스를 말합니다. 이는 Java 클래스로 선언하며, 보통 domain 패키지에 포함되고, 아래와 같이 구성됩니다 기본 엔티티 매핑 방법 @Entity JPA에서 테이블과 매핑할 클래스는 @Entity 애너테이션을 필수로 붙여야 합니다. @Entity…","html":"<h1 id=\"jpa에서-엔티티를-작성하는-방법\" style=\"position:relative;\"><a href=\"#jpa%EC%97%90%EC%84%9C-%EC%97%94%ED%8B%B0%ED%8B%B0%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"jpa에서 엔티티를 작성하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA에서 엔티티를 작성하는 방법</h1>\n<p>JPA에서 **엔티티(Entity)**는 관계형 데이터베이스의 테이블과 대응하며, JPA가 관리하는 클래스를 말합니다.</p>\n<p>이는 Java 클래스로 선언하며, 보통 domain 패키지에 포함되고, 아래와 같이 구성됩니다</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"기본-엔티티-매핑-방법-entity\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%A7%A4%ED%95%91-%EB%B0%A9%EB%B2%95-entity\" aria-label=\"기본 엔티티 매핑 방법 entity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 엔티티 매핑 방법 @Entity</h2>\n<p>JPA에서 테이블과 매핑할 클래스는 @Entity 애너테이션을 필수로 붙여야 합니다. @Entity 적용 시에는, 클래스가 아래 주의사항을 따라야 합니다</p>\n<ul>\n<li>기본생성자 필수</li>\n<li>final, enum, interface, inner 클래스에는 사용 불가</li>\n<li>테이블에 저장할 필드는 final 키워드 사용 불가</li>\n</ul>\n<blockquote>\n<p>JPA는 자바 리플렉션(Java Reflection API)을 통해 엔티티 정보를 받는데, 이 때 생성자 인자 정보를 가져올 수 없으므로 기본 생성자는 필수적으로 필요합니다. 몇몇 JPA구현체(하이버네이트같은)에서는 바이트코드 조작(Bytecode Manipulation)을 통해 이런 문제를 회피한다고 합니다.</p>\n</blockquote>\n<blockquote>\n<p>자바는 클래스를 생성하면 기본 생성자를 자동으로 만들지만, 만약 생성자가 추가된다면 기본 생성자가 사라지므로 주의해야 합니다. (대부분의 IDE에서 잡아주긴 하지만..)</p>\n</blockquote>\n<p><strong>속성</strong></p>\n<ul>\n<li>name: 엔티티 이름 지정, 기본값 - 클래스명</li>\n</ul>\n<h2 id=\"매핑할-테이블을-지정하는-table\" style=\"position:relative;\"><a href=\"#%EB%A7%A4%ED%95%91%ED%95%A0-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%98%EB%8A%94-table\" aria-label=\"매핑할 테이블을 지정하는 table permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>매핑할 테이블을 지정하는 @Table</h2>\n<p>@Table은 엔티티와 매핑할 데이터베이스 테이블을 지정합니다. 생략 시, 엔티티 이름을 테이블 이름으로 사용합니다.</p>\n<ul>\n<li>name속성: 매핑할 테이블 이름, 기본값 - 엔티티 이름</li>\n<li>catalog: catalog 기능이 있는 데이터베이스에서 catalog 매핑</li>\n<li>schema - schema기능이 있는 데이터베이스에서 schema를 매핑한다</li>\n<li>uniqueConstraints - DDL 생성 시, 유니크 제약조건을 만듭니다.</li>\n</ul>\n<blockquote>\n<p>catalog 기능: 데이터베이스의 인덱스, 뷰테이블, 사용자정보 등 메타데이터를 저장하는 객체</p>\n</blockquote>\n<h2 id=\"엔티티-내-필드-매핑-방법\" style=\"position:relative;\"><a href=\"#%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%82%B4-%ED%95%84%EB%93%9C-%EB%A7%A4%ED%95%91-%EB%B0%A9%EB%B2%95\" aria-label=\"엔티티 내 필드 매핑 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>엔티티 내 필드 매핑 방법</h2>\n<p>MySQL,MsSQL등 다양한 RDBMS에는 데이터 타입이 존재합니다. JPA역시 Java의 데이터타입을 RDBMS와 매핑하기 위한 방법들이 존재합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span>\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">RoleType</span> roleType<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Temporal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TemporalType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TIMESTAMP</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createdDate<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Temporal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TemproalType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TIMESTAMP</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> lastModifiedDate<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Lob</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"가장-많이-사용되는-column\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EC%9E%A5-%EB%A7%8E%EC%9D%B4-%EC%82%AC%EC%9A%A9%EB%90%98%EB%8A%94-column\" aria-label=\"가장 많이 사용되는 column permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가장 많이 사용되는 @Column</h3>\n<p>데이터베이스 테이블과 필드를 매핑하기 위해 사용합니다.</p>\n<p><strong>속성</strong></p>\n<ul>\n<li><strong>name</strong>: 필드와 매핑할 테이블 컬럼 이름, 기본값 - 필드명</li>\n<li><strong>nullable</strong>(DDL) : false로 지정 시 NOT NULL 제약조건 추가. 기본값 true</li>\n<li><strong>unique</strong>(DDL) : true로 지정 시 하나의 칼럼에 대해 유니크 제약조건. 기본값 false</li>\n<li><strong>columnDefinition</strong>: 데이터베이스 컬럼정보를 직접 입력</li>\n<li><strong>length</strong>: String 타입의 필드의 경우, 최대 길이 제약조건. 기본값 255</li>\n<li><strong>precision</strong>, <strong>scale:</strong> precision의 경우 소수점 제외 전체자리수, scale은 소수 자리수</li>\n<li>i<strong>nsertable</strong>, <strong>updatable</strong>: 저장 / 수정하고싶지 않을 때 false로 지정, 기본값 true</li>\n<li><strong>table</strong>: 하나의 엔티티를 두 개의 테이블에서 사용하려고 할 때 사용</li>\n</ul>\n<blockquote>\n<p>필드에 @Column을 사용하지 않으면, 모든 속성이 기본값으로 들어가게 된다.</p>\n</blockquote>\n<blockquote>\n<p>Java Primitive type은 Null이 들어올 수 없으므로, DDL 생성 시 nullable=true로 설정됨</p>\n</blockquote>\n<blockquote>\n<p>Wrapper Type을 사용하거나  nullable을 false로 지정해야 한다.</p>\n</blockquote>\n<blockquote>\n<p>@Column(<strong>columnDefinition</strong>=”varchar(100)”) 과 같이, 방언정보를 활용해 선언한다</p>\n</blockquote>\n<h3 id=\"날짜-필드를-매핑하는-temporal\" style=\"position:relative;\"><a href=\"#%EB%82%A0%EC%A7%9C-%ED%95%84%EB%93%9C%EB%A5%BC-%EB%A7%A4%ED%95%91%ED%95%98%EB%8A%94-temporal\" aria-label=\"날짜 필드를 매핑하는 temporal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>날짜 필드를 매핑하는 @Temporal</h3>\n<p>java의 날짜 타입인 java.util.Date, java.util.Calendar를 매핑한다.</p>\n<p><strong>속성</strong></p>\n<ul>\n<li>value: 시간포맷 지정, 기본값 없음(필수지정)\n<ul>\n<li>TemporalType.DATE: “날짜(<strong>date</strong>)”에 매핑 - 2023-01-01</li>\n<li>TemporalType.TIME: “시간(<strong>time</strong>)”에 매핑 - 12:03:21</li>\n<li>TemporalType.TIMESTAMP: “날짜 및 시간(<strong>timestamp</strong>)에 매핑” - 2023-01-01 12:03:21</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>Java의 Date에는 날짜,시간이 모두 있지만, RDBMS는 date, time, timestamp로 나누어져있는 경우가 많아 @Temporal을 명시한 경우 value 속성을 필수로 지정해야한다.</p>\n</blockquote>\n<blockquote>\n<p>@Temporal을 생략하면, DB의 timestamp 타입으로 매핑된다.</p>\n</blockquote>\n<h3 id=\"enum-타입을-매핑하는-enumerated\" style=\"position:relative;\"><a href=\"#enum-%ED%83%80%EC%9E%85%EC%9D%84-%EB%A7%A4%ED%95%91%ED%95%98%EB%8A%94-enumerated\" aria-label=\"enum 타입을 매핑하는 enumerated permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>enum 타입을 매핑하는 @Enumerated</h3>\n<p><strong>속성</strong></p>\n<ul>\n<li>value: 저장할 값 지정\n<ul>\n<li>(기본)EnumType.ORDINAL: enum 순서를 데이터베이스에 저장</li>\n<li>EnumType.STRING: enum 이름을 데이터베이스에 저장</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>EnumType.ORDINAL로 지정할 경우, 저장되는 크기가 작다는 장점이 있지만, 순서가 바뀌거나 사이에 새로운 내용이 추가되었을 때, 데이터베이스의 기존 데이터와 일치하지 않는다는 문제가 있다. 따라서, EnumType.STRING을 권장한다.</p>\n</blockquote>\n<h3 id=\"길이제한-없는-문자타입-lob\" style=\"position:relative;\"><a href=\"#%EA%B8%B8%EC%9D%B4%EC%A0%9C%ED%95%9C-%EC%97%86%EB%8A%94-%EB%AC%B8%EC%9E%90%ED%83%80%EC%9E%85-lob\" aria-label=\"길이제한 없는 문자타입 lob permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>길이제한 없는 문자타입 @Lob</h3>\n<p>데이터베이스의 CLOB, BLOB 타입과 매핑됩니다. 필드 타입이 문자면 CLOB, 나머지는 BLOB로 매핑됩니다.</p>\n<p>Example)</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Lob</span> <span class=\"token comment\">//문자 필드이므로 CLOB으로 매핑</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> lobString<span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Lob</span> <span class=\"token comment\">//문자필드가 아니므로 BLOB으로 매핑</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> lobByte<span class=\"token punctuation\">;</span>\n</code></pre></div>\n<blockquote>\n<p>CLOB: Character Large Object (대형 문자 객체) , BLOB: Binary Large Object(대형 이진 객체)로, 최대 4GB의 대형 문자/이진 객체를  데이터베이스 시스템 밖의 파일로 저장하는 타입입니다.</p>\n</blockquote>\n<h3 id=\"무시하고-매핑하지-않는-transient\" style=\"position:relative;\"><a href=\"#%EB%AC%B4%EC%8B%9C%ED%95%98%EA%B3%A0-%EB%A7%A4%ED%95%91%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94-transient\" aria-label=\"무시하고 매핑하지 않는 transient permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>무시하고 매핑하지 않는 @Transient</h3>\n<p>@Transient가 지정된 필드는 데이터베이스에 저장하지 않고, 따라서 조회하지도 않습니다.</p>\n<h3 id=\"jpa의-접근방식을-지정하는-access\" style=\"position:relative;\"><a href=\"#jpa%EC%9D%98-%EC%A0%91%EA%B7%BC%EB%B0%A9%EC%8B%9D%EC%9D%84-%EC%A7%80%EC%A0%95%ED%95%98%EB%8A%94-access\" aria-label=\"jpa의 접근방식을 지정하는 access permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA의 접근방식을 지정하는 @Access</h3>\n<p>JPA가 엔티티 데이터에 접근하는 방식을 지정합니다.</p>\n<ul>\n<li>필드접근: AccessType.FIELD - 필드에 직접 접근. private여도 가능합니다.</li>\n<li>프로퍼티접근: AccessType.Property - getter를 통해 접근합니다.</li>\n</ul>\n<blockquote>\n<p>@Id 의 위치에 따라, @id가 프로퍼티(getter)에 있으면, 자동으로 AccessType.PROPERTY에 지정, 필드에 있으면 AccessType.FIELD에 지정됩니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Access</span> <span class=\"token comment\">//: 필드통한 접근</span>\n<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> <span class=\"token class-name\">Id</span>\n\n<span class=\"token annotation punctuation\">@Access</span> <span class=\"token comment\">//: 프로퍼티 통한 접근 </span>\n<span class=\"token keyword\">public</span> <span class=\"token class-name\">Long</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"아까-봤던-엔티티-다시보기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EA%B9%8C-%EB%B4%A4%EB%8D%98-%EC%97%94%ED%8B%B0%ED%8B%B0-%EB%8B%A4%EC%8B%9C%EB%B3%B4%EA%B8%B0\" aria-label=\"아까 봤던 엔티티 다시보기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아까 봤던 엔티티 다시보기</h3>\n<p>내용들을 공부하기 전에 확인했던 엔티티입니다. 아래 엔티티를 확인하면, 필드에 선언된 애너테이션의 의미와 역할, 제한사항, 컬럼 등에 대해 이해할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token annotation punctuation\">@Table</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span>\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"NAME\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> age<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Enumerated</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">EnumType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">STRING</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">RoleType</span> roleType<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Temporal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TemporalType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TIMESTAMP</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> createdDate<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Temporal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TemproalType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">TIMESTAMP</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Date</span> lastModifiedDate<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Lob</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> description\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"데이터베이스-스키마-자동생성\" style=\"position:relative;\"><a href=\"#%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4-%EC%8A%A4%ED%82%A4%EB%A7%88-%EC%9E%90%EB%8F%99%EC%83%9D%EC%84%B1\" aria-label=\"데이터베이스 스키마 자동생성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데이터베이스 스키마 자동생성</h2>\n<p>JPA는 위처럼 엔티티를 통해 데이터베이스 테이블이 어떻게 구성되는지 알 수 있습니다. 이를 통해 데이터베이스 스키마를 DDL(Data Definition Language)로 자동 생성해주는 기능을 갖습니다.</p>\n<p>(show-sql은 실행되는 쿼리를 콘솔에 출력해줍니다.)</p>\n<p>application.properties</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">spring.jpa.hibernate.ddl-auto: create\nspring.jpa.show-sql: true</code></pre></div>\n<p>application.yaml</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">jpa</span><span class=\"token punctuation\">:</span>\n\t<span class=\"token key atrule\">show-sql</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\t\t<span class=\"token key atrule\">hibernate</span><span class=\"token punctuation\">:</span>\n\t\t\t<span class=\"token key atrule\">ddl-auto</span><span class=\"token punctuation\">:</span> create\n</code></pre></div>\n<h3 id=\"ddl-auto-옵션\" style=\"position:relative;\"><a href=\"#ddl-auto-%EC%98%B5%EC%85%98\" aria-label=\"ddl auto 옵션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ddl-auto 옵션</h3>\n<table>\n<thead>\n<tr>\n<th>옵션</th>\n<th>환경</th>\n<th>설명</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>create</td>\n<td>개발 초기</td>\n<td>기존 테이블을 삭제 후, 새로 생성 (DROP + CREATE)</td>\n</tr>\n<tr>\n<td>create-drop</td>\n<td>개발 초기</td>\n<td>애플리케이션을 시작할 때 CREATE, 종료할 때 DROP (CREATE + DROP)</td>\n</tr>\n<tr>\n<td>update</td>\n<td>테스트서버</td>\n<td>데이터베이스 테이블과 엔티티의 변경사항을 비교해 변경사항만 수정</td>\n</tr>\n<tr>\n<td>validate</td>\n<td>테스트서버 or</td>\n<td></td>\n</tr>\n<tr>\n<td>스테이징/운영서버</td>\n<td>데이터베이스 테이블과 엔티티 매핑정보가 차이가 있을 경우, 경고를 남기고 애플리케이션을 실행하지 않음.</td>\n<td></td>\n</tr>\n<tr>\n<td>none</td>\n<td>스테이징/운영서버</td>\n<td>자동생성기능을 사용하지 않음. ddl-auto 옵션을 제거하거나 유효하지 않은 옵션을 준것과 같음</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>ddl-auto 옵션은 운영환경에서 사용할만큼 완벽하지 않다고 한다. 그렇기에 학습이나 참고용으로만 사용하는것이 좋다.</p>\n</blockquote>\n<h2 id=\"복습질문\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%EC%8A%B5%EC%A7%88%EB%AC%B8\" aria-label=\"복습질문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복습질문</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  데이터베이스에 2GB이상의 데이터를 저장하기 위해 JPA에서 어떤 애너테이션을 사용해야하는가?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  ddl-auto 옵션의 validate는 무슨 역할을 하는가?</li>\n</ul>\n<p><strong>정답</strong></p>\n<ol>\n<li>@Lob 애너테이션을 사용하면 문자열의 경우 CLOB, 이외는 BLOB으로 매핑해줍니다. 다만, Java String의 경우 최대 길이가 2GB이므로, 내용이 절삭되는것에 유의해야 한다.</li>\n<li>데이터베이스 테이블과 엔티티의 매핑이 일치하는지 확인하고, 일치하지 않으면 경고와 함께 애플리케이션을 실행하지 않음</li>\n</ol>\n<h2 id=\"referecnce\" style=\"position:relative;\"><a href=\"#referecnce\" aria-label=\"referecnce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Referecnce</h2>\n<ul>\n<li><a href=\"http://www.yes24.com/Product/Goods/90439472\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바 ORM 표준 JPA 프로그래밍</a></li>\n</ul>","id":"ccf75a49-36b1-5159-856c-f8b3cd59287f","fields":{"slug":"jpa에서-엔티티를-작성하는-방법"},"frontmatter":{"date":"2023-01-08","title":"JPA에서 엔티티를 작성하는 방법","category":"tech","tags":["JPA","JPA 스터디"],"banner":null},"timeToRead":4},"next":{"excerpt":"테이블과 객체 사이에는 많은 패러다임 불일치가 있다고 앞선 챕터에서 설명했습니다. 그 중 가장 간극이 크다고 여겨지는 불일치중 하나는 연관관계의 참조에 대한 불일치 문제입니다. JPA가 이런 연관관계 참조 불일치 문제를 어떤 방식으로 해결하는지 살펴보겠습니다. 이번 챕터에서는 객체 연관관계 매핑의 기초적이고 개념적인 부분을 체크합니다. 실제 프로덕트에 개발을 고려하고있다면, [다음 글 링크] 를 확인하세요! JPA…","html":"<p>테이블과 객체 사이에는 많은 패러다임 불일치가 있다고 앞선 챕터에서 설명했습니다. 그 중 가장 간극이 크다고 여겨지는 불일치중 하나는 <strong>연관관계의 참조</strong>에 대한 불일치 문제입니다.</p>\n<p>JPA가 이런 연관관계 참조 불일치 문제를 어떤 방식으로 해결하는지 살펴보겠습니다.</p>\n<p>이번 챕터에서는 객체 연관관계 매핑의 기초적이고 개념적인 부분을 체크합니다. 실제 프로덕트에 개발을 고려하고있다면, [다음 글 링크] 를 확인하세요!</p>\n<p><strong>JPA의</strong> <strong>연관관계 매핑을 공부하기 전, 알아야할 내용!</strong></p>\n<ul>\n<li>방향성: 양방향, 단방향이 있습니다. [팀 → 멤버] 참조 [멤버 → 팀]으로참조하는 하나의 방향만 있는 경우 단방향, 두 방향 모두 참조가 가능하다면 양방향이라고 합니다. <strong>단방향 관계는 객체에만 존재하고, 테이블은 항상 양방향 관계이므로 단방향 관계가 존재하지 않습니다.</strong> Foreign key와  Join을 통해 양쪽 테이블을 참조할 수 있기 때문입니다.</li>\n<li>다중성: [다대일(N:1), 일대다(1:N), 일대일(1:1), 다대다(N:N)] 관계가 있습니다. 여러 회원이 하나의 팀에 속하므로 다대일 관계이고, 팀은 여러 회원이 소속될 수 있으므로 일대다 관계입니다.</li>\n<li>연관관계의 주인: 객체는 단방향 참조 두 개를 통해 양방향 관계를 만듭니다. 따라서, 연관관계의 주인을 정하고 이를 통해서 연관관계를 관리해야 합니다. ( 추후 설명 )</li>\n</ul>\n<p><strong>RDBMS의 외래 키</strong></p>\n<p>RDBMS에서는 외래 키는 다른 테이블의 Primary Key를 참조하는 컬럼을 말합니다. 여기에 RDBMS에서 제공하는 외래 키 제약조건(Foreign Key Constraint) DDL을 선언해주면 , <strong>참조 무결성을 보장합니다.</strong></p>\n<p>참조 무결성은 보통 삭제동작에서 검증하며, 부모 레코드가 삭제되어 고아 레코드가 되는것을 방지하고,</p>\n<p><img src=\"https://user-images.githubusercontent.com/30853787/226088579-d6d0d2ee-1508-4fee-8f78-6179a0462961.png\" alt=\"1\"></p>\n<p>먼저 팀과 멤버가 갖는 <strong>객체, 테이블</strong> 각각에서의 연관관계를 확인하며 연관관계가 갖는 특성을 살펴보겠습니다.</p>\n<ul>\n<li>\n<p>객체에서의 연관관계</p>\n<ul>\n<li>Member.team필드로 참조를 통한 연관관계를 갖습니다.</li>\n<li>이는 <strong>단방향 관계</strong>입니다. member.getTeam()을 통해 팀을 알 수 있지만, team.getMembers()를 통해 멤버 정보를 알 수 없기 때문입니다.</li>\n</ul>\n</li>\n<li>\n<p>테이블에서의 연관관계</p>\n<ul>\n<li>TEAM_ID라는 외래 키를 통해 연관관계를 맺습니다.</li>\n<li>TEAM_ID를 통해 Member를 기준으로 Join할 수도 있고, Team을 기준으로 Join할수도 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>객체와 테이블 연관관계의 가장 큰 차이점: 객체는 [member → team], [team → member] 로 참조를 두 개 만들어도, 양방향 관계가 아니다!</p>\n<ul>\n<li>만약 두 방향의 참조가 모두 있다고 가정해보자.  team에 member들이 소속되어있고, member도 team 필드를 가지고있다.</li>\n<li>만약 멤버가 팀을 옮겨서 member.setTeam(anotherTeam); 으로 팀을 옮겼다고 해도, <strong>team 객체에는 옮긴 멤버의 참조가 남아있다.</strong>  단방향 관계 두 개를 따로 관리해야하는 것이다. (연관관계의 주인, mappedby가 필요한 이유)</li>\n<li>하지만 테이블은 Foreign Key를 통해 Join하므로, 멤버의 TEAM_ID필드가 변경된 경우, Team테이블에서도 Join을 통해 멤버를 조회했을 때 정상적으로 확인된다(옮긴 멤버가 조회되지 않는다)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"jpa에서의-객체-매핑\" style=\"position:relative;\"><a href=\"#jpa%EC%97%90%EC%84%9C%EC%9D%98-%EA%B0%9D%EC%B2%B4-%EB%A7%A4%ED%95%91\" aria-label=\"jpa에서의 객체 매핑 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JPA에서의 객체 매핑</h3>\n<p>Member와 Team엔티티가 연관관계를 맺는 예시입니다. 아래에서는 해당 엔티티를 통해 연관관계 매핑을 설명합니다.</p>\n<p>Member 엔티티</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Member</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span>\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"MEMBER_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@ManyToOne</span>\n\t<span class=\"token annotation punctuation\">@JoinColumn</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"TEAM_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Team</span> team<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> username<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Team엔티티</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Team</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token annotation punctuation\">@Id</span>\n\t<span class=\"token annotation punctuation\">@Column</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"TEAM_ID\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>@ManyToOne: 다대일관계라는 정보를 갖는 매핑 애너테이션입니다. 매핑 시 <strong>연관관계의 주인 엔티티에</strong> 필수적으로 사용해야합니다. 양방향의 경우, 연관관계를 갖는 각 필드에 알맞는 애너테이션을 추가합니다.</li>\n<li>@JoinColumn: 외래키를 name속성의 컬럼에 매핑합니다. 생략 가능하며, 생략 시 [필드이름  + 연관 엔티티 식별자 이름] 으로 기본값을 갖습니다. (따라서 위의 경우는 “team_id” 컬럼!)</li>\n</ul>\n<h3 id=\"연관관계-저장\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EA%B4%80%EA%B4%80%EA%B3%84-%EC%A0%80%EC%9E%A5\" aria-label=\"연관관계 저장 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연관관계 저장</h3>\n<p>엔티티를 저장할 때는, 연관관계 엔티티를 저장하려 하는 경우, <strong>연관 엔티티 역시 영속상태여야 한다.</strong></p>\n<blockquote>\n<p>이것을 보고 궁금해서 직접 실험해봤는데, 영속하지 않은 상태에서 setTeam한 후, 영속시켜도 정상적으로 동작하는것을 확인했다.  내부적으로 어떤 차이가 있는지는 확인이 필요하다.</p>\n</blockquote>\n<h3 id=\"조회\" style=\"position:relative;\"><a href=\"#%EC%A1%B0%ED%9A%8C\" aria-label=\"조회 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조회</h3>\n<ul>\n<li>객체 그래프 탐색을 통한 조회(프록시를 이용)\n<ul>\n<li>객체지향적인 방법!</li>\n</ul>\n</li>\n<li>객체지향 쿼리 사용(JPQL: SQL 방언으로 변환)\n<ul>\n<li>파라미터를 쿼리에 바인딩하는 전통적 방법과 유사하다.</li>\n<li>연관 엔티티는 Join문을 통해 조회한다.</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"수정\" style=\"position:relative;\"><a href=\"#%EC%88%98%EC%A0%95\" aria-label=\"수정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>수정</h3>\n<p><strong>연관 엔티티 수정</strong>은 특별한 방법 없이 엔티티를 수정하면 플러시 시점에 변경감지가 작동한다.</p>\n<h3 id=\"삭제\" style=\"position:relative;\"><a href=\"#%EC%82%AD%EC%A0%9C\" aria-label=\"삭제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삭제</h3>\n<p>연관 엔티티를 제거할 때는, <strong>연관관계의 주인이 먼저 삭제될 수 없다(외래 키 제약조건) 이 경우, 데이터베이스에서 참조 무결성 오류가 발생한다.</strong></p>\n<p>따라서, 외래키를 가지고있는 부모 엔티티의 연관관계를 삭제하거나, 자식 엔티티를 삭제해 연관관계를 지운 후 부모 엔티티를 삭제할 수 있다.</p>\n<h3 id=\"복습질문\" style=\"position:relative;\"><a href=\"#%EB%B3%B5%EC%8A%B5%EC%A7%88%EB%AC%B8\" aria-label=\"복습질문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>복습질문</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  테이블이 양방향 참조를 할 수 있는 이유는 무엇인가요? (객체와 참조 방향성 측면에서 어떤 차이가 있나요?)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  영속되지 않은 엔티티를 영속상태의 엔티티에 연관객체로 지정할 수 있나요?\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  비영속상태의 team와 영속상태의 member에서, member.setTeam(team)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled>  영속상태의 team와 비영속상태의 member에서, member.setTeam(team) 후 member 영속</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h3>\n<p><a href=\"%5Bhttps://learn.microsoft.com/ko-kr/sql/relational-databases/tables/primary-and-foreign-key-constraints?view=sql-server-ver16%5D(https://learn.microsoft.com/ko-kr/sql/relational-databases/tables/primary-and-foreign-key-constraints?view=sql-server-ver16)\">MS learn - 외래 키 제약조건</a></p>","id":"228d870b-db70-59ed-ba74-50e933c33e29","fields":{"slug":"jpa-연관관계-매핑-기초"},"frontmatter":{"date":"2023-01-17","title":"JPA 연관관계 매핑 기초","category":"tech","tags":["JPA","JPA 스터디"],"banner":null},"timeToRead":2}}},"staticQueryHashes":[],"slicesMap":{}}