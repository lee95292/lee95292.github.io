{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/웹훅-webhook-이-뭐야-http-2-0-webpush-스펙-요약/","result":{"data":{"markdownRemark":{"html":"<h1 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h1>\n<p>오늘 소개할 주제는 <strong>webhook</strong> 입니다.</p>\n<p>서비스를 배포하거나 관련 공부를 해보셨다면,<br>\ngithub과 Jenkins같은 CI도구를 연동하며 github에서 푸쉬를 비롯한 특정 이벤트를 jenkins로 전달해주기 위해 연동해본 경험이 있습니다.</p>\n<p>이때 github서버는 Jenkins가 별다른 요청을 하지 않아도 서버 내에서 특정 이벤트가 일어났을 때 Jenkins로 관련 정보들을 보내줍니다.<br>\n이것은 \"웹훅\"이라고 불리는 과정인데요, 일반적으로 클라이언트가 서버에게 정보 또는 행위를 요청하는 방식과는 다릅니다.</p>\n<p>오늘은 위에서 설명한 웹훅이 어떻게 가능한지 간단하게 공부하려합니다.</p>\n<hr>\n<p>클라이언트에서 서버의 자원을 이용하기 위해, 또는 서버를 동작하기 위한 인터페이스로 Web API를 사용합니다.</p>\n<p>이와 반대로 <strong>역방향 API, 서버에서 발생하는 이벤트를 처리하기 위해 Webhook을 사용한다는 것을 알게되었습니다.</strong></p>\n<p>웹 API를 통해 클라이언트의 요청을 처리하는 방식은 일상적인 방법이기에 무리없이 관련 동작을 이해하고 개발에 사용했지만,<br>\n서버에서 발생하는 이벤트를 클라이언트로 전달하는 과정은 쉽사리 이해되지 않았습니다.<br>\n또한 순수하게 이것이 어떤 원리로 가능한지 궁금하기도 했습니다.</p>\n<h1 id=\"principle\" style=\"position:relative;\"><a href=\"#principle\" aria-label=\"principle permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Principle</h1>\n<p>핵심적인 원리에 접근하는것은 어렵지 않았습니다.</p>\n<p>webhook은 언제부턴가 익숙한 개념이 되어있었고, RFC문서가 존재할것이라 생각해서 <a href=\"https://tools.ietf.org/html/rfc8030\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">rfc webhook</a>으로 검색한 결과 HTTP/2.0 부터 지원하는 <strong>Web push</strong>스펙을 확인할수 있었습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">\n    +-------+           +--------------+       +-------------+\n    <span class=\"token operator\">|</span>  UA   <span class=\"token operator\">|</span>           <span class=\"token operator\">|</span> Push Service <span class=\"token operator\">|</span>       <span class=\"token operator\">|</span> Application <span class=\"token operator\">|</span>\n    +-------+           +--------------+       <span class=\"token operator\">|</span>   Server    <span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>               +-------------+\n        <span class=\"token operator\">|</span>      Subscribe       <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span>---------------------<span class=\"token operator\">>|</span>                      <span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span>       Monitor        <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span><span class=\"token operator\">&lt;=</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">==</span><span class=\"token operator\">=</span><span class=\"token operator\">>|</span>                      <span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span>          Distribute Push Resource           <span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span>--------------------------------------------<span class=\"token operator\">>|</span>\n        <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>\n        <span class=\"token builtin class-name\">:</span>                      <span class=\"token builtin class-name\">:</span>                      <span class=\"token builtin class-name\">:</span>\n        <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>     Push Message     <span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span>    Push Message      <span class=\"token operator\">|</span><span class=\"token operator\">&lt;</span>---------------------<span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span><span class=\"token operator\">&lt;</span>---------------------<span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>\n        <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>                      <span class=\"token operator\">|</span>\n\n                      Figure <span class=\"token number\">1</span>: WebPush Architecture</code></pre></div>\n<p>RFC 8030에 소개된 overview에 소개된 webpush의 구조입니다. (UA: user agent)</p>\n<p>사실 이 그림을 보자마자 웹훅을 위한 Push service가 따로 존재하는구나! Push sevice가 메시지 브로커 역할을 하는군! 이라고 이해하시면 웹훅을 사용할때 큰 문제가 없습니다.</p>\n<p>발행/구독 구조에서 확인할 수 있는 push, monitor, message를 이해하신다면</p>\n<p>Subscriber : UA (user agent)<br>\nPublisher : Application Server<br>\nBroker : <strong>Push Service</strong></p>\n<p>라고 생각하시면 됩니다.</p>\n<p>이는 아래와 같이 동작합니다.</p>\n<ol>\n<li>UA가 Application Server의 push service를 구독하고, push service를 모니터링합니다.</li>\n<li>이후 Application Server에서 UA가 원하는 동작이 발생하고 trigger를 통해 이벤트 메서드를 호출합니다.</li>\n<li>Application server는 발생한 Action에 대한 정보를 담은 메시지를 Push service에 전달하고,</li>\n<li>Push service는 구독 정보를 참조해 관련있는 Subscripbers에게 메시지들을 전달합니다.</li>\n</ol>\n<img src=\"https://www.researchgate.net/profile/Ashwin_Makwana/publication/301350598/figure/fig1/AS:352171422961666@1460975618330/Publish-Subscribe-Model.png\"/>\n<p>&#x3C;그림: 발행/구독 모델></p>\n<hr>\n<h3 id=\"features\" style=\"position:relative;\"><a href=\"#features\" aria-label=\"features permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Features</h3>\n<p>발행/구독구조의 특징과 함께 Webpush에 존재하는 몇가지 특징이 있습니다.</p>\n<p>User Agent(이하 UA)가 구독을 시작하며 Webpush 시나리오가 시작됩니다.<br>\n구독은 UA와 Push server, Application server간 연결을 뜻하며, HTTPS(port:443)위에서만 동작합니다.</p>\n<p>구독과 관련된 정보는 push service에 저장되며, 이 정보를 UA와 Application server가 각각 사용합니다.</p>\n<hr>\n<p><em>실제 API 문서와 RFC의 overview에 소개된 내용을 위주로 특징들을 리스트해보았습니다.</em></p>\n<ul>\n<li>\n<p>UA는 모든 incomming messages를 모니터링하기 위해 구독정보를 사용합니다.</p>\n</li>\n<li>\n<p>Application server는 trigger가 발생한 Action 관련 정보들을 push service에게 던지는 과정을 위해 구독 정보를 사용합니다.</p>\n</li>\n<li>\n<p>Push API는 클라이언트와 서버 간 비동기적 통신을 지원합니다</p>\n<ul>\n<li>\n<p>Push service는 UA가 비활성 상태이더라도 메시지를 전달하기 위해 활성상태가 될때까지 메시지를 저장합니다.</p>\n</li>\n<li>\n<p>마찬가지로 Push service는 Application Server가 비활성 상태이더라도 저장된 Push message를 UA에게 전달합니다</p>\n</li>\n<li>\n<p>(WebPush API의 이러한 특징과 Notification API를 이용해 Chrome에서는 알림 API를 지원합니다!)</p>\n</li>\n</ul>\n</li>\n<li>\n<p>UA와 Application server가 통신중일때도 push service는 동작합니다.<br>\n하지만 fetch, websocket등의 직접통신 API들에 비해 리소스가 많이 소요되고 지연현상이 많아 UA와 Application server가 활성연결 상태가 아닐 때 사용하는것을 권장하고 있습니다.</p>\n</li>\n</ul>\n<h1 id=\"ending\" style=\"position:relative;\"><a href=\"#ending\" aria-label=\"ending permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Ending</h1>\n<p>W3C의 API 스펙과 RFC8030의 Overview탭을 위주로 작성했습니다.</p>\n<p>설명한 특징 이외에도 다양한 동작 시나리오 / 특징들이 있습니다.<br>\n아래 그림에서는 User Agent를 webpage와 service worker까지 추가해서 설명하고있습니다.</p>\n<p>저처럼 WebPush에 대한 호기심이 생기셨다면, 추가로 읽어보시는것도 추천드립니다..!</p>\n<img src=\"https://www.w3.org/TR/push-api/sequence_diagram.png\" />\n<p>&#x3C;그림 Webpush API 메서드 동작 시나리오 (WC3)></p>\n<h1 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h1>\n<p><a href=\"https://medium.com/@shlee1353/http1-1-vs-http2-0-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EA%B0%84%EB%8B%A8%ED%9E%88-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0-5727b7499b78\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http1,2 차이점</a></p>\n<p><a href=\"https://tools.ietf.org/html/rfc8030\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">RFC8030 Web push</a></p>\n<p><a href=\"https://www.w3.org/TR/push-api/#application-server\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">W3C Webpush API spec</a></p>","fields":{"slug":"웹훅-webhook-이-뭐야-http-2-0-webpush-스펙-요약"},"frontmatter":{"title":"웹훅 (webhook)이 뭐야?, HTTP/2.0 Webpush 스펙 요약","date":"10.05.2020","category":"tech","tags":["http","webhook"],"banner":null},"timeToRead":2}},"pageContext":{"slug":"웹훅-webhook-이-뭐야-http-2-0-webpush-스펙-요약","prev":{"excerpt":"Devlog는 2020년 5월 3일부터 작성하였습니다. 목차 Junit-testfile-generator Testfile Generator Junit-testfile-generator [VSCode, Archived] github Introduce Java프로젝트 중 Junit을 사용해 테스트를 실행하는 유저를 위한 VSCode Extension. 테스트 경로에 테스트파일을 생성하도록 해주는 컨텍스트(우클릭) 메뉴 제공 일지 2020.05.0…","html":"<blockquote>\n<p>Devlog는 2020년 5월 3일부터 작성하였습니다.</p>\n</blockquote>\n<h1 id=\"목차\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EC%B0%A8\" aria-label=\"목차 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목차</h1>\n<ul>\n<li><a href=\"#Junit-testfile-generator\">Junit-testfile-generator</a></li>\n<li><a href=\"#Testfile-generator\">Testfile Generator</a></li>\n</ul>\n<h1 id=\"junit-testfile-generator\" style=\"position:relative;\"><a href=\"#junit-testfile-generator\" aria-label=\"junit testfile generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Junit-testfile-generator</h1>\n<h3 id=\"vscode-archived\" style=\"position:relative;\"><a href=\"#vscode-archived\" aria-label=\"vscode archived permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>[VSCode, Archived]</h3>\n<p><a href=\"https://github.com/lee95292/JunitTestGeneratorForVSCode\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a></p>\n<h3 id=\"introduce\" style=\"position:relative;\"><a href=\"#introduce\" aria-label=\"introduce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduce</h3>\n<p>Java프로젝트 중 Junit을 사용해 테스트를 실행하는 유저를 위한 VSCode Extension.<br>\n테스트 경로에 테스트파일을 생성하도록 해주는 컨텍스트(우클릭) 메뉴 제공</p>\n<hr>\n<h3 id=\"일지\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EC%A7%80\" aria-label=\"일지 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일지</h3>\n<ul>\n<li>2020.05.03</li>\n</ul>\n<p>개발을 종료하고 범용 버전으로 업그레이드하기 위해 <a href=\"#Testfile-generator\">Testfile generator</a>를 다시 시작하려한다.</p>\n<hr>\n<h3 id=\"사후분석\" style=\"position:relative;\"><a href=\"#%EC%82%AC%ED%9B%84%EB%B6%84%EC%84%9D\" aria-label=\"사후분석 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>사후분석</h3>\n<p>그냥 내가 혼자 쓰려고 개발한 익스텐션 치고는 괜찮았다. 잘 쓰고 있었는데, 설치 수가 500명이 넘어가며 평가가 한두개씩 달리기 시작했고, 다른 사용자들까지 고려해야했다.</p>\n<p>한번 고치기 시작하니까 기존 설계를 뜯어고치고, JUnit뿐만 아니라 다른 테스트 프레임워크에서도 지원하고싶다는 욕심이 생겼다.</p>\n<p>표면적으로는 이름을 고치기 위해 extension을 새로 만들어야하고, 근본적으로는 목적부터가 다른 extension이므로 새로 만드는게 맞다.</p>\n<p><strong>1000+ install</strong>기록은 조금 아쉽지만, 새로 만드는 프로젝트에서 뛰어넘으면 된다고 생각하고 다시 시작하려한다.</p>\n<h1 id=\"testfile-generator\" style=\"position:relative;\"><a href=\"#testfile-generator\" aria-label=\"testfile generator permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Testfile generator</h1>\n<h3 id=\"vscode-continue\" style=\"position:relative;\"><a href=\"#vscode-continue\" aria-label=\"vscode continue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>#VSCode, #Continue</h3>\n<h3 id=\"introduce-1\" style=\"position:relative;\"><a href=\"#introduce-1\" aria-label=\"introduce 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Introduce</h3>\n<p>Junit, Jest, Mocha 등 테스트 프레임워크들에 대한 테스트파일 생성을 도와주는 VScode Extension</p>\n<hr>\n<h3 id=\"일지-1\" style=\"position:relative;\"><a href=\"#%EC%9D%BC%EC%A7%80-1\" aria-label=\"일지 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>일지</h3>\n<ul>\n<li>2020.05.03 설계 및 동기</li>\n</ul>\n<p>같은 vscode extension인 <strong>gitignore generator</strong>를 보고 영감을 얻어 testfile generator를 시작하려 한다.<br>\n이 프로젝트는 <a href=\"gitignore.io\">gitignore.io</a> API를 사용해 gitignore파일을 제공한다. 물론 이 API는 다른 유저가 만들었다.</p>\n<p>나에겐 Test framework(jest,junit,mocha, etc..)의 통합 템플릿 파일을 제공하는 API는 없으므로, API 설계부터 새로 시작해야한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"url\"><pre class=\"language-url\"><code class=\"language-url\"><span class=\"token path\"><span class=\"token path-separator\">/</span>api<span class=\"token path-separator\">/</span></span>[testframework]/[version]/[type]</code></pre></div>\n<p>기본적으로는 위의 방식으로 호출 가능한 API를 만들고싶다 응답으로는 Testfile Template이고.</p>\n<p>예를 들어 내가 만든 서버의 URL이 teststub.io 라고 한다면, 아래와 같은 시나리오다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Request :\nhttps://teststub.io/junit/default/default\n\nResponse\n\npackage TEST;\n    import org.junit.Test;\n    import org.junit.Before;\n\n    public class TEST {\n\n        @Before\n        public void setup(){\n\n        }\n\n        @Test\n        public void test() {\n        }\n    }</code></pre></div>\n<p>type에는 테스트파일의 형태를 나타내는 여러가지 값들이 들어갈 수 있다.</p>\n<hr>\n<h3 id=\"기본기능\" style=\"position:relative;\"><a href=\"#%EA%B8%B0%EB%B3%B8%EA%B8%B0%EB%8A%A5\" aria-label=\"기본기능 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본기능</h3>\n<ol>\n<li>\n<p>커멘드를 통해서프레임워크와 버전이 같더라도 구분되는 템플릿을 제공한다.</p>\n</li>\n<li>\n<p>컨텍스트 메뉴를 통해 버전과 프레임웤이 일치하는 기본 테스트 템플릿을 제공한다.</p>\n</li>\n</ol>","id":"e6eb6c33-a7fd-5e31-9c1a-4ad8667758c7","fields":{"slug":"continue-devlog"},"frontmatter":{"date":"2020-05-03","title":"[Continue]devlog","category":"log","tags":null,"banner":null},"timeToRead":1},"next":{"excerpt":"주제 : 운영체제 메모리 관리: 물리메모리 할당 방식! 목차 연속 메모리 할당 고정 분할 방식 Fixed Allocation 가변 분할 방식 Variable Allocation 비연속 메모리 할당 세그멘테이션 Segmentation 페이징 Paging ---continue--- 페이징/세그멘테이션 혼합 페이지 요구 Demand Paging…","html":"<blockquote>\n<p>주제 : 운영체제 메모리 관리: 물리메모리 할당 방식!</p>\n</blockquote>\n<ul>\n<li>\n<p>목차</p>\n</li>\n<li>\n<p>연속 메모리 할당</p>\n<ul>\n<li>고정 분할 방식 Fixed Allocation</li>\n<li>가변 분할 방식 Variable Allocation</li>\n</ul>\n</li>\n<li>\n<p>비연속 메모리 할당</p>\n<ul>\n<li>세그멘테이션 Segmentation</li>\n<li>페이징 Paging</li>\n</ul>\n<p>---continue---</p>\n<ul>\n<li>페이징/세그멘테이션 혼합</li>\n<li>페이지 요구 Demand Paging</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"연속-할당-방식\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%86%8D-%ED%95%A0%EB%8B%B9-%EB%B0%A9%EC%8B%9D\" aria-label=\"연속 할당 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연속 할당 방식</h1>\n<p>하나의 프로그램이 실행되는 메모리 순서를 연속적으로 물리 메모리에 할당하는 방법</p>\n<h3 id=\"고정-분할-방식\" style=\"position:relative;\"><a href=\"#%EA%B3%A0%EC%A0%95-%EB%B6%84%ED%95%A0-%EB%B0%A9%EC%8B%9D\" aria-label=\"고정 분할 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>고정 분할 방식</h3>\n<p>물리적 메모리를 몇 개의 영구적인 분할로 나누어 각각의 영역에 프로그램을 적재시킨다.</p>\n<p>심각한 내부 단편화가 발생할 수 있다.<br>\n예를 들어 256MB의 메모리를 32MB씩 분할한다면, 2MB의 메모리만이 필요한 프로그램이 실행되는 경우 30MB의 내부 단편화가 발생한다.<br>\n(보통은 다양한 크기의 프로그램을 실행하기 위해 메모리를 다양한 크기로 분할한다.)</p>\n<h3 id=\"가변-분할-방식\" style=\"position:relative;\"><a href=\"#%EA%B0%80%EB%B3%80-%EB%B6%84%ED%95%A0-%EB%B0%A9%EC%8B%9D\" aria-label=\"가변 분할 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>가변 분할 방식</h3>\n<p>프로그램이 실행/종료되는 시점마다 프로그램 크기에 맞는 메모리를 할당/해제하는 방식.</p>\n<p>첫 할당 이후 메모리 위치를 재정리할 수 없으므로, 다양한 크기의 프로그램에 대해 메모리 할당/해제를 반복하다 보면 아래와 같이 외부 단편화가 발생한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">-----------------------------------------------------\n| running(120MB) | empty(20MB) | running(8MB) | ...</code></pre></div>\n<hr>\n<h1 id=\"비연속-할당-방식\" style=\"position:relative;\"><a href=\"#%EB%B9%84%EC%97%B0%EC%86%8D-%ED%95%A0%EB%8B%B9-%EB%B0%A9%EC%8B%9D\" aria-label=\"비연속 할당 방식 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비연속 할당 방식</h1>\n<p>프로그램의 메모리 할당 요청을 비연속적으로 메모리에 할당하는 방식. swap space를 사용하는 가상화 기법이 활용된다.</p>\n<h3 id=\"세그먼트-\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EA%B7%B8%EB%A8%BC%ED%8A%B8-\" aria-label=\"세그먼트  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세그먼트 :</h3>\n<p>메모리를 나누는 단위.</p>\n<p>세그먼트: 프로세스 크기에 따라 가변 크기를 갖는 <strong>물리 메모리 분할 단위</strong></p>\n<hr>\n<h3 id=\"페이지--프레임\" style=\"position:relative;\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%80--%ED%94%84%EB%A0%88%EC%9E%84\" aria-label=\"페이지  프레임 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>페이지 / 프레임</h3>\n<p>페이지 : 고정 크기로 <strong>가상 메모리를 분할하는 단위</strong></p>\n<p>프레임 : 페이지와 1:1로 매핑되는 <strong>물리 메모리 분할 단위</strong></p>\n<p>페이지와 프레임은 페이지 테이블을 매개로 연결된다.</p>\n<p>따라서, 프로세스가 page(N)을 가지고있을 경우, OS는 가상주소 N에 데이터를 요청하고, 가상주소 N은 페이지 테이블의 정보를 통해 물리 주소인 frame(K)에 접근한다. 이 때, frame(k)주소가 존재하지 않을 경우, swap space(주로 보조 기억장치)에서 데이터를 가져온다. 이는 page fault라고 불리며, 이는 성능 저하를 일으키기도 하며 segmentation-paging 기법에서 Thrashing 등을 일으켜 심각한 성능 저하를 내기도 한다.</p>\n<hr>\n<h3 id=\"페이지-테이블--페이징-기법\" style=\"position:relative;\"><a href=\"#%ED%8E%98%EC%9D%B4%EC%A7%80-%ED%85%8C%EC%9D%B4%EB%B8%94--%ED%8E%98%EC%9D%B4%EC%A7%95-%EA%B8%B0%EB%B2%95\" aria-label=\"페이지 테이블  페이징 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>페이지 테이블 / 페이징 기법</h3>\n<p><strong>페이징 기법</strong> : 가상 메모리를 <strong>고정 크기</strong>로 분할한 페이지를 통해 메모리를 관리하는 방식.<br>\n만약 프로세스가 페이지의 크기보다 적은 메모리를 필요로 하는 경우, **내부 단편화((페이지)내부의 메모리 일부가 사용되지 않아 낭비되는 현상)**가 발생한다.</p>\n<p>(페이지의 크기 :프로세스의 크키가 커지면서 4KB > 4MB까지 크기가 커짐.)</p>\n<p>LRU, FIFO, LFU, NUR등의 페이지 교체 알고리즘을 통해 물리 메모리를 관리.</p>\n<p><strong>페이지 테이블</strong> : 페이지와 프레임의 매칭 정보를 담고있는 테이블.</p>\n<p>프로세스가 가상 메모리(page)의 정보를 hit할때 실제 물리 메모리 주소(frame)로 변환하는 역할을 수행한다.</p>\n<p>페이지의 크기가 커지면 아래와 같은 변화가 생긴다.</p>\n<ul>\n<li>내부 단편화가 증가한다.</li>\n<li>Page fault(페이지 요청 실패)가 감소한다.</li>\n<li>페이지 테이블의 크기가 감소한다.\n<ul>\n<li>(TMI)페이지 테이블 비례 : 전체 메모리 사이즈 /  페이지 크기</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"세그멘테이션-테이블-세그멘테이션-기법\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98-%EA%B8%B0%EB%B2%95\" aria-label=\"세그멘테이션 테이블 세그멘테이션 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세그멘테이션 테이블 /세그멘테이션 기법</h3>\n<p><strong>세그멘테이션 기법</strong> : 하나의 프로세스가 사용하는 메모리의 크기 단위로 가상 주소를 관리하는 기법.</p>\n<p>프로세스별로 요구하는 메모리가 다르므로, 세그먼트의 크기는 가변적이다.</p>\n<p>세그멘테이션 테이블 :</p>\n<ul>\n<li>물리 메모리에서 세그먼트의 <strong>start address</strong></li>\n<li>가변적인 세그먼트의 크기를 나타내는 <strong>limit</strong></li>\n</ul>\n<p>위 두 가지를 보관하고 있는 자료구조이다.</p>\n<hr>\n<h3 id=\"세그멘테이션-페이징-혼합-기법\" style=\"position:relative;\"><a href=\"#%EC%84%B8%EA%B7%B8%EB%A9%98%ED%85%8C%EC%9D%B4%EC%85%98-%ED%8E%98%EC%9D%B4%EC%A7%95-%ED%98%BC%ED%95%A9-%EA%B8%B0%EB%B2%95\" aria-label=\"세그멘테이션 페이징 혼합 기법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>세그멘테이션-페이징 혼합 기법</h3>\n<p>.</p>\n<h3 id=\"pcb-process-control-block\" style=\"position:relative;\"><a href=\"#pcb-process-control-block\" aria-label=\"pcb process control block permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>PCB: Process Control Block</h3>\n<p>프로세스 생성 시 커널 스택만들어지는 자료구조 : Status / Pointer(addr)/ Identifier / PC / Priority 등을 저장한다.\n<img src=\"https://t1.daumcdn.net/cfile/tistory/995A6E395A5E0DAF18\" alt=\"PCB\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">/</th>\n<th align=\"center\">연속 메모리 할당</th>\n<th align=\"center\">가상화(swap)</th>\n<th align=\"center\">관리 테이블</th>\n<th align=\"center\">단편화</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">고정 분할 방식</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n<td align=\"center\">-</td>\n<td align=\"center\">내부 단편화</td>\n</tr>\n<tr>\n<td align=\"left\">가변 분할 방식</td>\n<td align=\"center\">X</td>\n<td align=\"center\">X</td>\n<td align=\"center\">-</td>\n<td align=\"center\">외부 단편화</td>\n</tr>\n<tr>\n<td align=\"left\">페이징 기법</td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">페이지테이블</td>\n<td align=\"center\">페이지 내부 단편화</td>\n</tr>\n<tr>\n<td align=\"left\">세그멘테이션 기법</td>\n<td align=\"center\">O</td>\n<td align=\"center\">O</td>\n<td align=\"center\">세그먼테이션 테이블</td>\n<td align=\"center\">세그멘테이션 외부 단편화</td>\n</tr>\n</tbody>\n</table>","id":"0db54144-01a0-551b-bfac-e41061832274","fields":{"slug":"continue-os-메모리파트-정리"},"frontmatter":{"date":"2020-05-24","title":"[Continue,OS] 메모리파트 정리","category":"tech","tags":["운영체제","computerscience"],"banner":null},"timeToRead":2}}},"staticQueryHashes":[],"slicesMap":{}}