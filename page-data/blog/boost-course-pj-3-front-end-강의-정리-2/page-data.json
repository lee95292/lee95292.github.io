{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/boost-course-pj-3-front-end-강의-정리-2/","result":{"data":{"markdownRemark":{"html":"<h3 id=\"css와-javascript에서의-animation\" style=\"position:relative;\"><a href=\"#css%EC%99%80-javascript%EC%97%90%EC%84%9C%EC%9D%98-animation\" aria-label=\"css와 javascript에서의 animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS와 Javascript에서의 Animation</h3>\n<hr>\n<ul>\n<li>Animation?</li>\n</ul>\n<p>반복적인 움직임의 처리! 간단하고 규칙적인 움직임은 CSS3의 transition, transform 속성으로 처리 가능하며, javascript보다 좋은 성능을 보장함.</p>\n<ul>\n<li>javascript Animation</li>\n</ul>\n<p>복잡하고 정밀한 애니메이션을 표현하기 위해 주로 사용</p>\n<ul>\n<li>setInterval, setTimeout, requestAnimationFrame, Animations API 등을 활용할 수 있음</li>\n</ul>\n<p>하지만, setInterval같은 경우 애니메이션 구현에 사용되지 않음.\r\n<img src=\"/assets/img/boostcourse/setinterval.png\">\r\n위 그림에서 설명하는 \"지연문제\" 때문인데, 부스트코스에서는 이를 \"제 때 일어나야 할 이벤트 콜백이 지연/사라지는 현상\"이라고 설명했음.</p>\n<p>자세한 설명은 <a href=\"https://javascript.info/settimeout-setinterval\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Javascript_Event_Scheduling</a>에서 확인.</p>\n<h3 id=\"javascript의-requestanimationframe\" style=\"position:relative;\"><a href=\"#javascript%EC%9D%98-requestanimationframe\" aria-label=\"javascript의 requestanimationframe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript의 requestAnimationFrame</h3>\n<hr>\n<p>위 상황처럼, setTimeout,setInterval은 애니매이션을 위해 최적화되지 않음. animation 주기가 16.6ms 미만으로 내려갈 경우, 불필요한 frame이 생기기 때문임.</p>\n<p>이에 대한 대안으로 <strong>requestAnimationFrame</strong>이 탄생함.\r\n사용법은 setTimeout과 크게 다르지 않은듯.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\r\n        <span class=\"token selector\">.mynode</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mynode<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n        testyest\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.mynode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nnode<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span><span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">></span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n    \r\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n    node<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span>count<span class=\"token operator\">+</span><span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"css3-transition\" style=\"position:relative;\"><a href=\"#css3-transition\" aria-label=\"css3 transition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS3 transition</h3>\n<p>GPU 가속을 이용하는 CSS 속성들을 사용하면\r\nJavascript로 구현하는 것보다 더 빠르다고 알려짐!</p>\n<ul>\n<li>transform:translateXX();</li>\n<li>transform:scale();</li>\n<li>transform: rotate();</li>\n<li>opacity</li>\n</ul>\n<p>transition 으로 변화시킬 속성과 변화 시간을 지정할 수 있음</p>\n<p>transition [property] [duration] [timing-function] [delay]</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">transform</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token property\">transition</span> <span class=\"token punctuation\">:</span> transform 2s</code></pre></div>","fields":{"slug":"boost-course-pj-3-front-end-강의-정리-2"},"frontmatter":{"title":"[BoostCourse] PJ3 FrontEnd 강의 정리 -2","date":"07.04.2019","category":"boostcourse","tags":null,"banner":null},"timeToRead":1}},"pageContext":{"slug":"boost-course-pj-3-front-end-강의-정리-2","prev":{"excerpt":"javascript 배열 선언 : new Array()를 통해서 가능하지만, 보통 a = [] 처럼 간단히 선언 모든 데이터타입이 들어갈 수 있다. (객체, 함수, null 등등 ) javascript 배열의 유용한 메서드들 push - a.push(10); //a=[10], 배열에 순차적으로 원소 삽입,pop도 있음 indexof - a.indexof(10);  // =0, 특정원소가 존재하는 인덱스 반환. concat - a=a.concat…","html":"<h3 id=\"javascript-배열\" style=\"position:relative;\"><a href=\"#javascript-%EB%B0%B0%EC%97%B4\" aria-label=\"javascript 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript 배열</h3>\n<hr>\n<ul>\n<li>\n<p>선언 : new Array()를 통해서 가능하지만, 보통 a = [] 처럼 간단히 선언</p>\n</li>\n<li>\n<p>모든 데이터타입이 들어갈 수 있다. (객체, 함수, null 등등 )</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">sa<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\na<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 101 출력</span></code></pre></div>\n<h3 id=\"javascript-배열의-유용한-메서드들\" style=\"position:relative;\"><a href=\"#javascript-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%A9%94%EC%84%9C%EB%93%9C%EB%93%A4\" aria-label=\"javascript 배열의 유용한 메서드들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript 배열의 유용한 메서드들</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>push - a.push(10); //a=[10], 배열에 순차적으로 원소 삽입,pop도 있음</p>\n</li>\n<li>\n<p>indexof - a.indexof(10);  // =0, 특정원소가 존재하는 인덱스 반환.</p>\n</li>\n<li>\n<p>concat - a=a.concat(1,2,3) //a=[1,2,3,10] 배열에 원소 이어붙임, (이어붙인 배열을 반환).</p>\n</li>\n<li>\n<p>join - a=a.join() // =\"1,2,3,10\" 배열을 문자열로 합친 후 반환.</p>\n</li>\n</ul>\n<blockquote>\n<p>join,concat같은 경우, 실행시 배열의 내용이 직접 바뀌지 않고, 수행된 값을 반환하는 작업만을 함에 유의하자.</p>\n</blockquote>\n<p><strong>배열탐색</strong></p>\n<ul>\n<li>\n<p>foreach(function(v,i)) : v,i를 각각 value, index에 파싱하여 function에 해당하는 내용 루프돌며 실행한다.</p>\n</li>\n<li>\n<p>map(function(v,i)) :  function의 리턴값들의 배열을 리턴합니다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascirpt\"><pre class=\"language-javascirpt\"><code class=\"language-javascirpt\">var newArr = [&quot;apple&quot;,&quot;tomato&quot;].map(function(value, index) {\r\n   return index + &quot;번째 과일은 &quot; + value + &quot;입니다&quot;;\r\n});\r\nconsole.log(newArr)     //문자열 배열로 리턴</code></pre></div>\n<h3 id=\"javascript-객체\" style=\"position:relative;\"><a href=\"#javascript-%EA%B0%9D%EC%B2%B4\" aria-label=\"javascript 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript 객체</h3>\n<hr>\n<ul>\n<li>\n<p>key, value로 이루어진 js의 대표적인  자료구조 .(온점)을 통해 접근.</p>\n</li>\n<li>\n<p>,(콤마)를 통해 속성을 구분, :(콜론) 을 통해 키/벨류를 바인딩.</p>\n</li>\n<li>\n<p>for-in 문을 사용하여 순회.</p>\n</li>\n<li>\n<p>Object.keys() - 오브젝트의 키로 이루어진 배열 반환</p>\n</li>\n</ul>\n<blockquote>\n<p>Object.keys()로도 객체 순회 가능</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span><span class=\"token string\">\"myName\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>객체의 속성 추가는 접근방법과 같다.</p>\n</li>\n<li>\n<p>속성 제거에는 delete 키워드를 통해 가능하다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"mleek\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//name 속성 생성</span>\r\n\r\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//name속성 제거</span></code></pre></div>\n<br>\n<p><strong>실습 1.</strong></p>\n<hr>\n<p><a href=\"https://gist.github.com/nigayo/ade2c3f74417fc202c8097214c965f27\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a> 에서, 숫자타입의 키값들만 출력하기.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">findTypeKeys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span>type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token function\">findTypeKeys</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token function\">findTypeKeys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<br>\n<p><strong>실습 2.</strong></p>\n<hr>\n<p><a href=\"https://gist.github.com/nigayo/a9a118977f82780441db664d6785efe3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">링크</a> 에서, \"type\"키 값이 \"sk\"인것의 name 출력하기</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">findPropAttr</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token function\">findPropAttr</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span><span class=\"token string\">\"type\"</span><span class=\"token operator\">&amp;&amp;</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">\"sk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"dom-node-조작하기-dom-api\" style=\"position:relative;\"><a href=\"#dom-node-%EC%A1%B0%EC%9E%91%ED%95%98%EA%B8%B0-dom-api\" aria-label=\"dom node 조작하기 dom api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM Node 조작하기 (DOM API)</h3>\n<hr>\n<p><a href=\"https://www.w3schools.com/jsref/dom_obj_document.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Document노드_API</a></p>\n<p><a href=\"https://www.w3schools.com/jsref/dom_obj_all.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elements노드_API</a></p>\n<p>DOM 엘리먼트 속성</p>\n<ul>\n<li>tagName : 엘리먼트 태그명 변환</li>\n<li>textContent</li>\n</ul>\n<h3 id=\"dom-api로-node-조작-실습\" style=\"position:relative;\"><a href=\"#dom-api%EB%A1%9C-node-%EC%A1%B0%EC%9E%91-%EC%8B%A4%EC%8A%B5\" aria-label=\"dom api로 node 조작 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM API로 Node 조작 실습</h3>\n<hr>\n<p>실습 1.\r\n지금 나온 DOM API를 사용해서, strawberry 아래에 새로운 과일을 하나 더 추가하시오.</p>\n<p>추가 된 이후에는 다시 삭제하시오.</p>\n<img src=\"/assets/img/boostcourse/pr01.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> list  <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">var</span> addNode<span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> textNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pineapple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\naddNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>addNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>addNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<p>노드 생성 후, setTimeout 메서드를 통해 1초 후 지우는 동작 수행</p>\n<hr>\n<p>실습2 &#x26; 실습 3</p>\n<p>insertBefore메서드를 사용해서, orange와  banana 사이에 새로운 과일을 추가하시오.</p>\n<p>실습2를 insertAdjacentHTML메서드를 사용해서, orange와 banana 사이에 새로운 과일을 추가하시오.</p>\n<img src=\"/assets/img/boostcourse/pr023.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fruitNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> fruitText <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'water mellon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nfruitNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fruitText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>fruitNode<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nfruitNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">'afterend'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>참고링크\r\n<a href=\"https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">insertBefore_Docuemnt</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Element/insertAdjacentHTML\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">insertAdjacentHTML_Document</a></p>\n<hr>\n<p>실습4</p>\n<p>apple을 grape 와 strawberry 사이로 옮기시오.</p>\n<img src=\"/assets/img/boostcourse/pr04.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> grp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span>grp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>실습5</p>\n<p>class 가 'red'인 노드만 삭제하시오.</p>\n<img src=\"/assets/img/boostcourse/pr05.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> list<span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> rm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul>li.red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nrm<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>실습6</p>\n<p>section 태그의 자손 중에 blue라는 클래스를 가지고 있는 노드가 있다면, 그 하위에 있는 h2 노드를 삭제하시오.</p>\n<img src=\"/assets/img/boostcourse/pr06.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sec <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'section'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nsec<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">var</span> blueNode <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>blueNode<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>blueNode<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    v<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n      v<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","id":"d4b0e3db-0a99-5e3e-89c0-22a70e199cfc","fields":{"slug":"boost-course-pj-3-front-end-강의-정리-1"},"frontmatter":{"date":"2019-03-26","title":"[BoostCourse] PJ3 FrontEnd 강의 정리 -1","category":"boostcourse","tags":null,"banner":null},"timeToRead":2},"next":{"excerpt":"Spring이란? 엔터프라이즈급 웹 어플리케이션을 제작하기 위한 솔루션. AOP, IoC, DI…","html":"<h2 id=\"spring이란\" style=\"position:relative;\"><a href=\"#spring%EC%9D%B4%EB%9E%80\" aria-label=\"spring이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring이란?</h2>\n<hr>\n<p>엔터프라이즈급 웹 어플리케이션을 제작하기 위한 솔루션. AOP, IoC, DI, 선언적 트랜잭션등 여러 기능을 제공하며,</p>\n<p>이들의 모듈화된 부분들을 사용할 수 있도록 설계된 프레임워크.</p>\n<p>여기서 프레임워크란, 라이브러리와는 확연한 차이가 있다.</p>\n<p>강의에서는 라이브러리와 프레임워크를 원재료와 반제품으로 묘사하였다.</p>\n<ul>\n<li>\n<p>라이브러리 - 자주 사용하는 기능들을 함수 또는 기능으로 제작하여, 컴파일 타임에 링킹되는 소스코드(또는 기능)</p>\n</li>\n<li>\n<p>프레임워크 - 자주 사용되는 기능이나 기본적인 실행환경 및 구조를 제공한다. (Spring에서는 DI,IoC,AOP etc..)</p>\n</li>\n</ul>\n<p>A 라이브러리 사용한 프로그램이 어떤 종류의 프로그램인지 알지 못하지만-->'원재료 비유',</p>\n<p>B 프레임워크에서 동작하는 프로그램은 어떤 프로그램인지 알 수 있다. --> '반제품 비유'\r\nBCI : 실행시간에 .class 바이트코드 수정</p>\n<h2 id=\"spring-framework의-모듈-및-특징\" style=\"position:relative;\"><a href=\"#spring-framework%EC%9D%98-%EB%AA%A8%EB%93%88-%EB%B0%8F-%ED%8A%B9%EC%A7%95\" aria-label=\"spring framework의 모듈 및 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Framework의 모듈 및 특징</h2>\n<h3 id=\"aop와-instrumentation\" style=\"position:relative;\"><a href=\"#aop%EC%99%80-instrumentation\" aria-label=\"aop와 instrumentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>AOP와 Instrumentation</strong></h3>\n<hr>\n<p><strong>AOP가 뭔데?</strong> __important</p>\n<p><a href=\"https://blog.naver.com/kyh31126/221496146885\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AOP_링크</a> - 자세한 AOP 설명은 여기에서 많이 참고했다.</p>\n<p>Aspect Oriented Programming 직역하면 관점지향 프로그래밍인데, 이는 비즈니스 로직과 공통 모듈을 구분하여, 비즈니스 로직에 공통 모듈을 삽입하는 개발 방법이다.</p>\n<p>대표적으로 메소드의 성능을 검사할 때, 비즈니스 로직에 System.currentTimeMills() 메서드를 삽입해 성능을 측정하는 방법이 있지만, AOP를 이용해 해당 로직 밖에서 성능 측정코드를 삽입하는 AOP방법이 사용된다.</p>\n<hr>\n<ul>\n<li>spring-AOP - AOP얼라이언스와 호환되는 방법으로 AOP지원</li>\n<li>spring-aspects - AspectJ와의 통합 제공 (AspectJ는 BCI 제공 툴)</li>\n</ul>\n<p>Spring의 AOP에는 <a href=\"https://ukja.tistory.com/17\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">BCI(Btye Code Instrumentation)</a> 이라는 기술이 핵심적으로 사용된다.</p>\n<ul>\n<li>spring-instrument</li>\n</ul>\n<h3 id=\"messaging\" style=\"position:relative;\"><a href=\"#messaging\" aria-label=\"messaging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Messaging</strong></h3>\n<hr>\n<p>메시지란, 네트워크에서 컴퓨터간 일반 통신을 의미.</p>\n<p>spring-messaging - 스프링4에서는 메시지 기반 어플리케이션을 작성하기 위해 Message, MessageChannel, MessageHadler, 메시지 매핑 어노테이션 제공</p>\n<h3 id=\"data-access-integration\" style=\"position:relative;\"><a href=\"#data-access-integration\" aria-label=\"data access integration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Data Access/ Integration</strong></h3>\n<hr>\n<p>spring-jdbc, spring-tx(선언적 트랜잭션 관리), spring-orm(JPA,JDO,Hibernate), spring-oxm, spring-jms</p>\n<h3 id=\"web\" style=\"position:relative;\"><a href=\"#web\" aria-label=\"web permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Web</strong></h3>\n<hr>\n<ul>\n<li>\n<p>spring-web - 멀티파트 파일 업로드, 서블릿 리스너 등의 웹 지향 통합 기능 제공</p>\n</li>\n<li>\n<p>spring-webmvc - webservlet모듈, SpringMVC 및 REST 웹서비스 구현 포함</p>\n</li>\n<li>\n<p>spring-websocket - 웹소켓  지원</p>\n</li>\n</ul>\n<hr>\n<p>XML, java_config 설정부분</p>\n<p>Spring JDBC 부분</p>\n<h2 id=\"spring-mvc--__important\" style=\"position:relative;\"><a href=\"#spring-mvc--__important\" aria-label=\"spring mvc  __important permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring MVC  __important</h2>\n<hr>\n<ul>\n<li>MVC?</li>\n</ul>\n<p>Model - View - Controller</p>\n<p>서비스에서 저장되는 데이터, 주문목록, 회원정보, 상품목록 자체를 <strong>Model</strong>이라고 함.</p>\n<p>최종적으로 말단 기기에서 유저에게 보여지는 화면. 또는 화면을 렌더링하는 주체를 <strong>View라고</strong> 함</p>\n<p>사용자의 요청에 의해 Model에서 비즈니스 로직을 거쳐 View를 만들기 까지의 액션을 수행하는 주체를 <strong>Controller</strong>라고 함</p>\n<p>웹 상에서 MVC  구조는 몇 단계의 발전을 이뤄왔다.</p>\n<hr>\n<img src=\"/assets/img/boostcourse/mvc.png\">\n<p>위 MVC 구조에서는 JSP Page 내에 html과 java 코드가 섞여있어 유지/보수가 힘들었다.</p>\n<p>뷰를 담당하는 영역과 컨트롤을 담당하는 영역이 혼재되어 있어, 한사람이 본다면 문제가 없겠지만,</p>\n<p>뷰와 컨트롤을 담당하는 사람이 분리된 프로젝트의 경우 상당한 불편함을 초래했다.</p>\n<hr>\n<img src=\"/assets/img/boostcourse/mvc1.png\">\n<p>MVC2 구조에서는 요청을 servlet이 받아, Controll 작업을 수행해, 로직과 뷰를 분리하였다.</p>\n<p>이는 다음과 같은 장점을 갖는다</p>\n<ul>\n<li>관리 및 테스트의 용이</li>\n<li>확장성 증가</li>\n<li>관심사의 효과적인 분리</li>\n</ul>\n<hr>\n<img src=\"/assets/img/boostcourse/mvc2.png\">\n<p>위의 MVC2 발전형태에서는, Front Controller가 요청을 받고, 또 다른 Controller 클래스가 요청을 위임받는다.</p>\n<p>이를 ControllerClass, HandlerClass라고 한다.</p>\n<h3 id=\"spring-mvc-구성요소\" style=\"position:relative;\"><a href=\"#spring-mvc-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-label=\"spring mvc 구성요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring MVC 구성요소</h3>\n<p>Spring은 model2 아키텍처로 구현되어 있음.</p>\n<img src=\"/assets/img/boostcourse/springmvc.png\">\n<h3 id=\"mvc-동작순서--__important\" style=\"position:relative;\"><a href=\"#mvc-%EB%8F%99%EC%9E%91%EC%88%9C%EC%84%9C--__important\" aria-label=\"mvc 동작순서  __important permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>mvc 동작순서</strong>  __important</h3>\n<hr>\n<ul>\n<li>HandlerMapping객체 통해 어떤 Controller가 동작할 것인지 Mapping 조회 (자바 config or xml) -->2</li>\n<li>Handler Adapter를 통해 실행할 Controller에게 실행 요청 -->3,4</li>\n<li>컨트롤러가 리턴하는 뷰를 DispatcherServlet에 전달-->5</li>\n<li>View Resolver와 View 이름을 통해 뷰를 조회하고 -->6 뷰를 렌더링 후 응답 -->7,8</li>\n</ul>\n<p>붉은색(보라색) 부분이 개발자가 구현하는 부분.</p>\n<p>초록색은 가끔씩 개발자가 구현하는 부분.</p>\n<h3 id=\"dispatcherservlet-동작과정\" style=\"position:relative;\"><a href=\"#dispatcherservlet-%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95\" aria-label=\"dispatcherservlet 동작과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DispatcherServlet 동작과정</h3>\n<img src=\"/assets/img/boostcourse/dpservlet.png\">\n<ul>\n<li>요청 선처리 작업 (뒷부분에서 추가설명)</li>\n<li>HandelrExecutionChain 탐색</li>\n<li>HandlerExecutionChain 결정 --> 없으면 404에러 출력</li>\n<li>HandelrAdapter 결정 -->없다면 ServletException 발생</li>\n<li>요청 처리</li>\n</ul>\n<h3 id=\"요청-선처리-작업-dispatcherservlet-동작과정\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%B2%AD-%EC%84%A0%EC%B2%98%EB%A6%AC-%EC%9E%91%EC%97%85-dispatcherservlet-%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95\" aria-label=\"요청 선처리 작업 dispatcherservlet 동작과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요청 선처리 작업 (DispatcherServlet) 동작과정</h3>\n<hr>\n<img src=\"/assets/img/boostcourse/befrq.png\">\n<ul>\n<li>Locale 결정 : Locale에 설정된 지역정보를 통해 지역화</li>\n<li>RequestContextHolder에 요청 저장 : 요청을 받아 응답하기 이전까지 HTTPServlet Request, Response 객체를 저장함. --> 일반 빈에서 바로 선언해서 사용할 수 있도록 함</li>\n<li>FlashMap 복원 : redirect로 파라미터 전달 시 URL을 복잡하게 하는부분들을 정리해주는 역할</li>\n<li>멀티파트 요청인 경우,  요청 제어를 MultipartResolver로 넘김</li>\n<li>핸들러 결정과 실행</li>\n</ul>\n<h3 id=\"dispatcherservlet--요청처리-과정\" style=\"position:relative;\"><a href=\"#dispatcherservlet--%EC%9A%94%EC%B2%AD%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95\" aria-label=\"dispatcherservlet  요청처리 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DispatcherServlet > 요청처리 과정</h3>\n<hr>\n<img src=\"/assets/img/boostcourse/handreq.png\">","id":"ab979f82-89ba-5169-bb1d-aa7946038967","fields":{"slug":"boost-course-pj-3-back-end-강의-정리-spring-개요"},"frontmatter":{"date":"2019-07-08","title":"[BoostCourse] PJ3 BackEnd 강의 정리(Spring 개요)","category":"boostcourse","tags":null,"banner":null},"timeToRead":2}}},"staticQueryHashes":[],"slicesMap":{}}