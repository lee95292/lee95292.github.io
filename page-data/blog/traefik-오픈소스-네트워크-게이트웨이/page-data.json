{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/traefik-오픈소스-네트워크-게이트웨이","result":{"data":{"markdownRemark":{"html":"<h1 id=\"traefik\" style=\"position:relative;\"><a href=\"#traefik\" aria-label=\"traefik permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Traefik</h1>\n<p>리버스 프록시 및 로드밸런싱을 제공하는 오픈소스 소프트웨어.<br>\ntyk나 nginx와 비교할 수 있음</p>\n<p><strong>Edge Router</strong>라는 표현을 사용한다.<br>\n즉, 서버의 가장 말단에서 들어오는 모든 요청을 인터셉트하여 라우팅하는 역할을 한다는 의미</p>\n<p><strong>Auto Service Discovery</strong>를 제공한다. 정적으로 설정파일을 읽어 라우팅하는 다른 리버스 프록시들과 달리, 실시간으로 설정 수정과 반영이 가능하다는 의미.</p>\n<p>도커에서 사용 시, traefik과 다른 컨테이너가 같은 네트워크에서 동작해야한다. 따라서 아래의 nasa-img search 앱의 network를 설정해준다.</p>\n<p><a href=\"https://docs.docker.com/compose/compose-file/compose-file-v3/#network-configuration-reference\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">docker-compose에서 network 설정 문서</a></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\">#https://pages.wiserain.com/articles/deploying-guacamole-using-docker/</span>\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.7\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">sample</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># container_name: nasa-imagesearch</span>\n    <span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">bridgenet</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> httpd<span class=\"token punctuation\">:</span>latest\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token string\">\"./build:/usr/local/apache2/htdocs\"</span>\n    <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> traefik.http.routers.sample.rule=Host(`nasa<span class=\"token punctuation\">-</span>imgs.mglee.dev`)\n<span class=\"token key atrule\">networks</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">bridgenet</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">external</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> traefik_default</code></pre></div>\n<h2 id=\"httpsssl-setting\" style=\"position:relative;\"><a href=\"#httpsssl-setting\" aria-label=\"httpsssl setting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HTTPS(ssl) setting</h2>\n<p><a href=\"https://doc.traefik.io/traefik/https/acme/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://doc.traefik.io/traefik/https/acme/</a> 번역\n<a href=\"https://github.com/cedrichopf/traefik-dockerized#lets-encrypt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/cedrichopf/traefik-dockerized#lets-encrypt</a></p>\n<h3 id=\"certificate-resolvers--인증-리졸버\" style=\"position:relative;\"><a href=\"#certificate-resolvers--%EC%9D%B8%EC%A6%9D-%EB%A6%AC%EC%A1%B8%EB%B2%84\" aria-label=\"certificate resolvers  인증 리졸버 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Certificate Resolvers : 인증 리졸버</h3>\n<p>ACME 서버에서 인증서를 가져오기 위해서, Traefik의 <strong>static 설정 파일에</strong> Certificate Resolver를 정의해야한다.</p>\n<p>Router에서 TLS를 허용해준 뒤, tls.certresolver 설정 옵션을 통해 Certificate Resolver에 할당해주어야 한다.</p>\n<p>인증서들은 dynamic configuration으로부터 가져온 도메인 이름을 요청받는다.</p>\n<h3 id=\"domain-definition\" style=\"position:relative;\"><a href=\"#domain-definition\" aria-label=\"domain definition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Domain Definition</h3>\n<p>Certificate Resolvers들은 아래 로직으로부터 라우터에 의해 추려진, 도메인 이름의 집합에 대한 인증서를 요청한다.</p>\n<ul>\n<li>\n<p>만약 라우터가 tls.domains 옵션 집합을 가지고있다면, 라우터의 도메인 이름을 찾기 위해 certificate resolver는 tls.domains 아래의 main(또는 sans)옵션을 사용한다.</p>\n</li>\n<li>\n<p>만약 라우터가 tls.domains옵션이 없다면, certificate resolver는 Host() matcher를 체크해 router의 규칙을 사용한다.</p>\n</li>\n</ul>\n<p>++\ntraefik 컨테이너를 restart하는 경우 아래와 같은 에러가 발생했다.\n내부적으로, 재시작하는 과정에서 네트워크가 사용이 꼬인듯 했다.\ndocker stop을 먼저 해주고, 잠시 뒤 docker start 해주면 에러 없이 실행되었다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">time=\"2021-04-05T13:51:58Z\" level=error msg=\"accept tcp [::]:80: use of closed network connection\" entryPointName=http\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"Error while starting server: http: Server closed\" entryPointName=http\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"Error while starting server: http: Server closed\" entryPointName=http\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"accept tcp [::]:443: use of closed network connection\" entryPointName=https\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"Error while starting server: http: Server closed\" entryPointName=https\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"accept tcp [::]:8080: use of closed network connection\" entryPointName=traefik\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"Error while starting server: http: Server closed\" entryPointName=traefik\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"Error while starting server: http: Server closed\" entryPointName=https\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"Error while starting server: http: Server closed\" entryPointName=traefik\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"close tcp [::]:8080: use of closed network connection\" entryPointName=traefik\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"close tcp [::]:443: use of closed network connection\" entryPointName=https\ntime=\"2021-04-05T13:51:58Z\" level=error msg=\"close tcp [::]:80: use of closed network connection\" entryPointName=http\n</code></pre></div>\n<p>print<br>\ntraefik concepts - <a href=\"https://doc.traefik.io/traefik/providers/overview/#orchestrators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://doc.traefik.io/traefik/providers/overview/#orchestrators</a><br>\ntraefik setup at docker - <a href=\"https://doc.traefik.io/traefik/providers/docker/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://doc.traefik.io/traefik/providers/docker/</a><br>\ntraefik setup at k8s ingress(Router) -<br>\ntraefik setup ssl - <a href=\"https://doc.traefik.io/traefik/https/acme/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://doc.traefik.io/traefik/https/acme/</a>\nk8s ingress - <a href=\"https://kubernetes.io/ko/docs/concepts/services-networking/ingress/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://kubernetes.io/ko/docs/concepts/services-networking/ingress/</a></p>","fields":{"slug":"traefik-오픈소스-네트워크-게이트웨이"},"frontmatter":{"title":"Traefik: 오픈소스 네트워크 게이트웨이","date":"15.05.2021","category":"operation","tags":["traefik","opensource"],"banner":"/assets/bg/2.jpg"},"timeToRead":3}},"pageContext":{"slug":"traefik-오픈소스-네트워크-게이트웨이","prev":{"excerpt":"Intro 여기 링크에서도 자세한 설명을 확인할 수 있습니다. 함수의 메소드와 arguments: 제로초님 블로그 자바스크립트 this 바인딩 우선순위 : 김정환님 블로그 Function.prototype의 call, apply, bind 메서드,\n공부를 해도 사용시에 헷갈릴때가 많아서 정리합니다..! call, apply Call과 Assign은 함수에 객체를 바인딩 후 호출하는 방법입니다. Javascript…","html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>여기 링크에서도 자세한 설명을 확인할 수 있습니다.</p>\n<ul>\n<li><a href=\"https://www.zerocho.com/category/JavaScript/post/57433645a48729787807c3fd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">함수의 메소드와 arguments: 제로초님 블로그</a></li>\n<li><a href=\"http://jeonghwan-kim.github.io/2017/10/22/js-context-binding.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 this 바인딩 우선순위 : 김정환님 블로그</a></li>\n</ul>\n<p>Function.prototype의 call, apply, bind 메서드,\n공부를 해도 사용시에 헷갈릴때가 많아서 정리합니다..!</p>\n<h2 id=\"call-apply\" style=\"position:relative;\"><a href=\"#call-apply\" aria-label=\"call apply permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>call, apply</h2>\n<p>Call과 Assign은 함수에 객체를 바인딩 후 호출하는 방법입니다.</p>\n<p>Javascript에서는 함수 역시 객체이므로, 함수 객체 내에서 call, apply, bind 메서드 역시 객체의 프로퍼티 메서드로 가지고있습니다.</p>\n<p>따라서 <strong>myFunction.call()</strong>, **myFunction.bind()**와 같은 형태로 호출해서 사용하지만, 그 역할은 **myFunction()**과 비슷합니다.</p>\n<p>예시)</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">myMethod</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attr <span class=\"token operator\">=</span> <span class=\"token string\">\"my attr\"</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">,</span> arg1<span class=\"token punctuation\">,</span> arg2<span class=\"token punctuation\">,</span> arg3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">myMethod</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myMethod</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">myMethod</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//result</span>\n<span class=\"token comment\">// myattr 1 2 3</span>\n<span class=\"token comment\">// myattr 1 2 4</span>\n<span class=\"token comment\">// myattr 1,2,5</span></code></pre></div>\n<p>예시와 결과로 알 수 있듯, call(null, arg, arg2, arg)와 apply(null, [arg1, arg2, arg3])은 메서드 호출의 역할을 함을 알 수 있습니다.</p>\n<p>그렇다면 첫 번째 인자는 어떤 역할을 수행할까요?</p>\n<p>바로 this 객체를 바인딩 역할을 수행합니다.</p>\n<p>예시는 어떻게 출력될까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">attr</span><span class=\"token operator\">:</span> <span class=\"token string\">\"myattr\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">log</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">attr</span><span class=\"token operator\">:</span> <span class=\"token string\">\"your attr\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>너무 티나는 예시때문에 알 수 있듯 아래와 같이 출력됩니다.</p>\n<p>your attr 1 2 3</p>\n<p>myMethod.call의 첫 번째 인자가 실행 컨텍스트를 바꿨기 때문이죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> va <span class=\"token operator\">=</span> <span class=\"token string\">\"globalValue\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">va</span><span class=\"token operator\">:</span> <span class=\"token string\">\"asd\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">log</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token function\">myFunc2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> va <span class=\"token operator\">=</span> <span class=\"token string\">\"lexicalSocpe\"</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//(1)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//(2)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmyObj<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">va</span><span class=\"token operator\">:</span> <span class=\"token string\">\"callValue\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"arg\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이건 본문과는 관련성이 떨어지지만 조금 헷갈리는 예제네요~</p>\n<p>(1): Lexical scope에 의해 \"lexicalSocpe\"가 출력됩니다.</p>\n<ul>\n<li>함수가 실행될 때, 변수 참조 체인은 Call Stack이 아닌 Lexical stack에서 참조된다는 의미입니다.</li>\n</ul>\n<p>(2): call함수가 this를 교체했으므로, \"callValue\"가 출력됩니다.</p>\n<ul>\n<li>myFunc.call에서, myFunc.va = \"callValue\"로 교체해 실행합니다.</li>\n</ul>\n<h2 id=\"bind\" style=\"position:relative;\"><a href=\"#bind\" aria-label=\"bind permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>bind</h2>\n<p>Function.prototype.bind는 apply, call과 조금 다릅니다,</p>\n<p>apply, call 은 bind + execute였다면, bind는 메서드와 오브젝트를 바인딩합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">myObj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">va</span><span class=\"token operator\">:</span> <span class=\"token string\">\"value\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">log</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> binded <span class=\"token operator\">=</span> myObj<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">va</span><span class=\"token operator\">:</span> <span class=\"token string\">\"binded value\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">binded</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// result: bindex value</span></code></pre></div>\n<p>이렇게 this가 바뀌는 것은, new 키워드에서도 확인할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">Persion</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">introduce</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myeonggyu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mklee\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyeonggyu<span class=\"token punctuation\">.</span><span class=\"token function\">introduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// mklee 23</span></code></pre></div>\n<p>!! 글을 작성하다가 알게되었는데, 위 예시의 log선언부를 익명함수로 고치면 this.attr이 undefinded가 출력됩니다. 익명함수는 무조건 this가 루트를 가르키는듯 합니다.</p>\n<p>위에서 new를 이용해 this를 바인딩한것이 <strong>new 바인딩</strong>,</p>\n<p>bind,call,apply를 통해 바인딩한것이 <strong>명시적 바인딩</strong>,</p>\n<p>상위객체의 this값을 가지는 방법으로 바인딩되는것이 <strong>암시적 바인딩입니다.</strong></p>\n<p>결과적으로, 바인딩 우선순위는 <strong>new > 명시적 > 암시적</strong> 바인딩 순으로 결합되며,</p>\n<p><a href=\"http://jeonghwan-kim.github.io/2017/10/22/js-context-binding.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자바스크립트 this 바인딩 우선순위 : 김정환님 블로그</a>에 잘 설명되어있습니다.</p>\n<h2 id=\"close\" style=\"position:relative;\"><a href=\"#close\" aria-label=\"close permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Close</h2>\n<p>사용되는것이 종종 보이긴 하지만, 볼때마다 헷갈려서 학습하곤 합니다. 관련 내용을 찾아가다 보면 Javascript동작구조에 대한 재미있는 글들이 많이 보이니, 위 글에서 얻은 키워드를 바탕으로 더 찾아보시면 도움될것 같습니다.</p>","id":"92725c1b-dfcb-51fb-88ee-3532106d1a93","fields":{"slug":"javascript-function-call-apply-bind-메서드"},"frontmatter":{"date":"2020-08-14","title":"[Javascript Function] call, apply, bind 메서드","category":"javascript","tags":null,"banner":null},"timeToRead":2},"next":{"excerpt":"공통코드 loc: label이나 쿼리를 통해 선택하는 방법 label orientied : inclusive of end Location iloc: 행번호로 선택하는 방법 position oriented : exclusive of end Index location","html":"<h1 id=\"공통코드\" style=\"position:relative;\"><a href=\"#%EA%B3%B5%ED%86%B5%EC%BD%94%EB%93%9C\" aria-label=\"공통코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공통코드</h1>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\ndata <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'mglee'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'python'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'pandas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'datadog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">:</span> <span class=\"token number\">23</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 아래와 같이 선언할수도 있음</span>\ndata <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>DataFrame<span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"name\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"mglee\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"pandas\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"datadog\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"age\"</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3 id=\"loc-label이나-쿼리를-통해-선택하는-방법\" style=\"position:relative;\"><a href=\"#loc-label%EC%9D%B4%EB%82%98-%EC%BF%BC%EB%A6%AC%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"loc label이나 쿼리를 통해 선택하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>loc: label이나 쿼리를 통해 선택하는 방법</h3>\n<p>label orientied : inclusive of end</p>\n<blockquote>\n<p>Location</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"></code></pre></div>\n<h3 id=\"iloc-행번호로-선택하는-방법\" style=\"position:relative;\"><a href=\"#iloc-%ED%96%89%EB%B2%88%ED%98%B8%EB%A1%9C-%EC%84%A0%ED%83%9D%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"iloc 행번호로 선택하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>iloc: 행번호로 선택하는 방법</h3>\n<p>position oriented : exclusive of end</p>\n<blockquote>\n<p>Index location</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">data<span class=\"token punctuation\">.</span>iloc<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">#    name   age</span>\n<span class=\"token comment\"># 0  mglee  23</span></code></pre></div>","id":"d52c7087-8b92-5651-b4fe-4a3e151be177","fields":{"slug":"pandas-기초-사용법"},"frontmatter":{"date":"2021-05-15","title":"Pandas 기초 사용법","category":"데이터분석","tags":["datascience","pandas"],"banner":"/assets/bg/2.jpg"},"timeToRead":1}}},"staticQueryHashes":["3824141623"]}