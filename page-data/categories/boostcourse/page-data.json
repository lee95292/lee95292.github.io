{"componentChunkName":"component---src-templates-category-tsx","path":"/categories/boostcourse/","result":{"pageContext":{"posts":[{"excerpt":"작성중인 포스트입니다 실습을 따라하는 과정을 포스팅하는 것은 의미없다고 생각했습니다. 내용이 많아 강사님이 자세히 설명하시지 않았지만 스프링을 처음 접하는 입장에서 그냥 넘어가기에는 찝찝한 부분들이 꽤나 있는것 같습니다. 능동적으로 코드를 작성하기 위해 소스코드를 분석해보고, 관련 정보들을 기록하려 합니다. (레이어드 아키텍처 실습부분은 따라가기만으로도 벅차서, 완성도 있는 정리할 여유가 있을지 모르겠습니다..) 애너테이션 @Datasource…","html":"<p><em>작성중인 포스트입니다</em></p>\n<hr>\n<p>실습을 따라하는 과정을 포스팅하는 것은 의미없다고 생각했습니다.</p>\n<p>내용이 많아 강사님이 자세히 설명하시지 않았지만 스프링을 처음 접하는 입장에서 그냥 넘어가기에는 찝찝한 부분들이 꽤나 있는것 같습니다.</p>\n<p>능동적으로 코드를 작성하기 위해 소스코드를 분석해보고, 관련 정보들을 기록하려 합니다.</p>\n<p>(레이어드 아키텍처 실습부분은 따라가기만으로도 벅차서, 완성도 있는 정리할 여유가 있을지 모르겠습니다..)</p>\n<h3 id=\"애너테이션\" style=\"position:relative;\"><a href=\"#%EC%95%A0%EB%84%88%ED%85%8C%EC%9D%B4%EC%85%98\" aria-label=\"애너테이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>애너테이션</h3>\n<hr>\n<ul>\n<li>@Datasource</li>\n<li>@Bean</li>\n</ul>\n<p>bean을 정의하는 어노테이션</p>\n<ul>\n<li>@ComponentScan</li>\n</ul>\n<p>@Controller, @Service, @Repository, @Component 어노테이션이 붙은 클래스를 찾아 컨테이너에 등록</p>\n<ul>\n<li>@Component</li>\n</ul>\n<p>컴포넌트 스캔의 대상이 되는 애노테이션 중 하나로써 주로 유틸, 기타 지원 클래스에 붙이는 어노테이션</p>\n<ul>\n<li>@Autowired</li>\n</ul>\n<p>주입 대상이되는 bean을 컨테이너에 찾아 주입하는 어노테이션</p>","id":"8116a4ed-e531-5313-9269-76616d3e5fd6","fields":{"slug":"boost-course-pj-3-back-end-강의-정리-spring-mcv-실습-및-레이어드-아키텍쳐"},"frontmatter":{"date":"2019-07-21","title":"[BoostCourse] PJ3 BackEnd 강의 정리(Spring MCV 실습 및 레이어드 아키텍쳐)","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":1},{"excerpt":"Spring이란? 엔터프라이즈급 웹 어플리케이션을 제작하기 위한 솔루션. AOP, IoC, DI…","html":"<h2 id=\"spring이란\" style=\"position:relative;\"><a href=\"#spring%EC%9D%B4%EB%9E%80\" aria-label=\"spring이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring이란?</h2>\n<hr>\n<p>엔터프라이즈급 웹 어플리케이션을 제작하기 위한 솔루션. AOP, IoC, DI, 선언적 트랜잭션등 여러 기능을 제공하며,</p>\n<p>이들의 모듈화된 부분들을 사용할 수 있도록 설계된 프레임워크.</p>\n<p>여기서 프레임워크란, 라이브러리와는 확연한 차이가 있다.</p>\n<p>강의에서는 라이브러리와 프레임워크를 원재료와 반제품으로 묘사하였다.</p>\n<ul>\n<li>\n<p>라이브러리 - 자주 사용하는 기능들을 함수 또는 기능으로 제작하여, 컴파일 타임에 링킹되는 소스코드(또는 기능)</p>\n</li>\n<li>\n<p>프레임워크 - 자주 사용되는 기능이나 기본적인 실행환경 및 구조를 제공한다. (Spring에서는 DI,IoC,AOP etc..)</p>\n</li>\n</ul>\n<p>A 라이브러리 사용한 프로그램이 어떤 종류의 프로그램인지 알지 못하지만-->'원재료 비유',</p>\n<p>B 프레임워크에서 동작하는 프로그램은 어떤 프로그램인지 알 수 있다. --> '반제품 비유'\r\nBCI : 실행시간에 .class 바이트코드 수정</p>\n<h2 id=\"spring-framework의-모듈-및-특징\" style=\"position:relative;\"><a href=\"#spring-framework%EC%9D%98-%EB%AA%A8%EB%93%88-%EB%B0%8F-%ED%8A%B9%EC%A7%95\" aria-label=\"spring framework의 모듈 및 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring Framework의 모듈 및 특징</h2>\n<h3 id=\"aop와-instrumentation\" style=\"position:relative;\"><a href=\"#aop%EC%99%80-instrumentation\" aria-label=\"aop와 instrumentation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>AOP와 Instrumentation</strong></h3>\n<hr>\n<p><strong>AOP가 뭔데?</strong> __important</p>\n<p><a href=\"https://blog.naver.com/kyh31126/221496146885\">AOP_링크</a> - 자세한 AOP 설명은 여기에서 많이 참고했다.</p>\n<p>Aspect Oriented Programming 직역하면 관점지향 프로그래밍인데, 이는 비즈니스 로직과 공통 모듈을 구분하여, 비즈니스 로직에 공통 모듈을 삽입하는 개발 방법이다.</p>\n<p>대표적으로 메소드의 성능을 검사할 때, 비즈니스 로직에 System.currentTimeMills() 메서드를 삽입해 성능을 측정하는 방법이 있지만, AOP를 이용해 해당 로직 밖에서 성능 측정코드를 삽입하는 AOP방법이 사용된다.</p>\n<hr>\n<ul>\n<li>spring-AOP - AOP얼라이언스와 호환되는 방법으로 AOP지원</li>\n<li>spring-aspects - AspectJ와의 통합 제공 (AspectJ는 BCI 제공 툴)</li>\n</ul>\n<p>Spring의 AOP에는 <a href=\"https://ukja.tistory.com/17\">BCI(Btye Code Instrumentation)</a> 이라는 기술이 핵심적으로 사용된다.</p>\n<ul>\n<li>spring-instrument</li>\n</ul>\n<h3 id=\"messaging\" style=\"position:relative;\"><a href=\"#messaging\" aria-label=\"messaging permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Messaging</strong></h3>\n<hr>\n<p>메시지란, 네트워크에서 컴퓨터간 일반 통신을 의미.</p>\n<p>spring-messaging - 스프링4에서는 메시지 기반 어플리케이션을 작성하기 위해 Message, MessageChannel, MessageHadler, 메시지 매핑 어노테이션 제공</p>\n<h3 id=\"data-access-integration\" style=\"position:relative;\"><a href=\"#data-access-integration\" aria-label=\"data access integration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Data Access/ Integration</strong></h3>\n<hr>\n<p>spring-jdbc, spring-tx(선언적 트랜잭션 관리), spring-orm(JPA,JDO,Hibernate), spring-oxm, spring-jms</p>\n<h3 id=\"web\" style=\"position:relative;\"><a href=\"#web\" aria-label=\"web permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Web</strong></h3>\n<hr>\n<ul>\n<li>\n<p>spring-web - 멀티파트 파일 업로드, 서블릿 리스너 등의 웹 지향 통합 기능 제공</p>\n</li>\n<li>\n<p>spring-webmvc - webservlet모듈, SpringMVC 및 REST 웹서비스 구현 포함</p>\n</li>\n<li>\n<p>spring-websocket - 웹소켓  지원</p>\n</li>\n</ul>\n<hr>\n<p>XML, java_config 설정부분</p>\n<p>Spring JDBC 부분</p>\n<h2 id=\"spring-mvc--__important\" style=\"position:relative;\"><a href=\"#spring-mvc--__important\" aria-label=\"spring mvc  __important permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring MVC  __important</h2>\n<hr>\n<ul>\n<li>MVC?</li>\n</ul>\n<p>Model - View - Controller</p>\n<p>서비스에서 저장되는 데이터, 주문목록, 회원정보, 상품목록 자체를 <strong>Model</strong>이라고 함.</p>\n<p>최종적으로 말단 기기에서 유저에게 보여지는 화면. 또는 화면을 렌더링하는 주체를 <strong>View라고</strong> 함</p>\n<p>사용자의 요청에 의해 Model에서 비즈니스 로직을 거쳐 View를 만들기 까지의 액션을 수행하는 주체를 <strong>Controller</strong>라고 함</p>\n<p>웹 상에서 MVC  구조는 몇 단계의 발전을 이뤄왔다.</p>\n<hr>\n<img src=\"/assets/img/boostcourse/mvc.png\">\n<p>위 MVC 구조에서는 JSP Page 내에 html과 java 코드가 섞여있어 유지/보수가 힘들었다.</p>\n<p>뷰를 담당하는 영역과 컨트롤을 담당하는 영역이 혼재되어 있어, 한사람이 본다면 문제가 없겠지만,</p>\n<p>뷰와 컨트롤을 담당하는 사람이 분리된 프로젝트의 경우 상당한 불편함을 초래했다.</p>\n<hr>\n<img src=\"/assets/img/boostcourse/mvc1.png\">\n<p>MVC2 구조에서는 요청을 servlet이 받아, Controll 작업을 수행해, 로직과 뷰를 분리하였다.</p>\n<p>이는 다음과 같은 장점을 갖는다</p>\n<ul>\n<li>관리 및 테스트의 용이</li>\n<li>확장성 증가</li>\n<li>관심사의 효과적인 분리</li>\n</ul>\n<hr>\n<img src=\"/assets/img/boostcourse/mvc2.png\">\n<p>위의 MVC2 발전형태에서는, Front Controller가 요청을 받고, 또 다른 Controller 클래스가 요청을 위임받는다.</p>\n<p>이를 ControllerClass, HandlerClass라고 한다.</p>\n<h3 id=\"spring-mvc-구성요소\" style=\"position:relative;\"><a href=\"#spring-mvc-%EA%B5%AC%EC%84%B1%EC%9A%94%EC%86%8C\" aria-label=\"spring mvc 구성요소 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spring MVC 구성요소</h3>\n<p>Spring은 model2 아키텍처로 구현되어 있음.</p>\n<img src=\"/assets/img/boostcourse/springmvc.png\">\n<h3 id=\"mvc-동작순서--__important\" style=\"position:relative;\"><a href=\"#mvc-%EB%8F%99%EC%9E%91%EC%88%9C%EC%84%9C--__important\" aria-label=\"mvc 동작순서  __important permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>mvc 동작순서</strong>  __important</h3>\n<hr>\n<ul>\n<li>HandlerMapping객체 통해 어떤 Controller가 동작할 것인지 Mapping 조회 (자바 config or xml) -->2</li>\n<li>Handler Adapter를 통해 실행할 Controller에게 실행 요청 -->3,4</li>\n<li>컨트롤러가 리턴하는 뷰를 DispatcherServlet에 전달-->5</li>\n<li>View Resolver와 View 이름을 통해 뷰를 조회하고 -->6 뷰를 렌더링 후 응답 -->7,8</li>\n</ul>\n<p>붉은색(보라색) 부분이 개발자가 구현하는 부분.</p>\n<p>초록색은 가끔씩 개발자가 구현하는 부분.</p>\n<h3 id=\"dispatcherservlet-동작과정\" style=\"position:relative;\"><a href=\"#dispatcherservlet-%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95\" aria-label=\"dispatcherservlet 동작과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DispatcherServlet 동작과정</h3>\n<img src=\"/assets/img/boostcourse/dpservlet.png\">\n<ul>\n<li>요청 선처리 작업 (뒷부분에서 추가설명)</li>\n<li>HandelrExecutionChain 탐색</li>\n<li>HandlerExecutionChain 결정 --> 없으면 404에러 출력</li>\n<li>HandelrAdapter 결정 -->없다면 ServletException 발생</li>\n<li>요청 처리</li>\n</ul>\n<h3 id=\"요청-선처리-작업-dispatcherservlet-동작과정\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%B2%AD-%EC%84%A0%EC%B2%98%EB%A6%AC-%EC%9E%91%EC%97%85-dispatcherservlet-%EB%8F%99%EC%9E%91%EA%B3%BC%EC%A0%95\" aria-label=\"요청 선처리 작업 dispatcherservlet 동작과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요청 선처리 작업 (DispatcherServlet) 동작과정</h3>\n<hr>\n<img src=\"/assets/img/boostcourse/befrq.png\">\n<ul>\n<li>Locale 결정 : Locale에 설정된 지역정보를 통해 지역화</li>\n<li>RequestContextHolder에 요청 저장 : 요청을 받아 응답하기 이전까지 HTTPServlet Request, Response 객체를 저장함. --> 일반 빈에서 바로 선언해서 사용할 수 있도록 함</li>\n<li>FlashMap 복원 : redirect로 파라미터 전달 시 URL을 복잡하게 하는부분들을 정리해주는 역할</li>\n<li>멀티파트 요청인 경우,  요청 제어를 MultipartResolver로 넘김</li>\n<li>핸들러 결정과 실행</li>\n</ul>\n<h3 id=\"dispatcherservlet--요청처리-과정\" style=\"position:relative;\"><a href=\"#dispatcherservlet--%EC%9A%94%EC%B2%AD%EC%B2%98%EB%A6%AC-%EA%B3%BC%EC%A0%95\" aria-label=\"dispatcherservlet  요청처리 과정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DispatcherServlet > 요청처리 과정</h3>\n<hr>\n<img src=\"/assets/img/boostcourse/handreq.png\">","id":"ab979f82-89ba-5169-bb1d-aa7946038967","fields":{"slug":"boost-course-pj-3-back-end-강의-정리-spring-개요"},"frontmatter":{"date":"2019-07-08","title":"[BoostCourse] PJ3 BackEnd 강의 정리(Spring 개요)","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":2},{"excerpt":"CSS와 Javascript에서의 Animation Animation? 반복적인 움직임의 처리! 간단하고 규칙적인 움직임은 CSS3의 transition, transform 속성으로 처리 가능하며, javascript보다 좋은 성능을 보장함. javascript Animation 복잡하고 정밀한 애니메이션을 표현하기 위해 주로 사용 setInterval, setTimeout, requestAnimationFrame, Animations API…","html":"<h3 id=\"css와-javascript에서의-animation\" style=\"position:relative;\"><a href=\"#css%EC%99%80-javascript%EC%97%90%EC%84%9C%EC%9D%98-animation\" aria-label=\"css와 javascript에서의 animation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS와 Javascript에서의 Animation</h3>\n<hr>\n<ul>\n<li>Animation?</li>\n</ul>\n<p>반복적인 움직임의 처리! 간단하고 규칙적인 움직임은 CSS3의 transition, transform 속성으로 처리 가능하며, javascript보다 좋은 성능을 보장함.</p>\n<ul>\n<li>javascript Animation</li>\n</ul>\n<p>복잡하고 정밀한 애니메이션을 표현하기 위해 주로 사용</p>\n<ul>\n<li>setInterval, setTimeout, requestAnimationFrame, Animations API 등을 활용할 수 있음</li>\n</ul>\n<p>하지만, setInterval같은 경우 애니메이션 구현에 사용되지 않음.\r\n<img src=\"/assets/img/boostcourse/setinterval.png\">\r\n위 그림에서 설명하는 \"지연문제\" 때문인데, 부스트코스에서는 이를 \"제 때 일어나야 할 이벤트 콜백이 지연/사라지는 현상\"이라고 설명했음.</p>\n<p>자세한 설명은 <a href=\"https://javascript.info/settimeout-setinterval\">Javascript_Event_Scheduling</a>에서 확인.</p>\n<h3 id=\"javascript의-requestanimationframe\" style=\"position:relative;\"><a href=\"#javascript%EC%9D%98-requestanimationframe\" aria-label=\"javascript의 requestanimationframe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Javascript의 requestAnimationFrame</h3>\n<hr>\n<p>위 상황처럼, setTimeout,setInterval은 애니매이션을 위해 최적화되지 않음. animation 주기가 16.6ms 미만으로 내려갈 경우, 불필요한 frame이 생기기 때문임.</p>\n<p>이에 대한 대안으로 <strong>requestAnimationFrame</strong>이 탄생함.\r\n사용법은 setTimeout과 크게 다르지 않은듯.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\r\n        <span class=\"token selector\">.mynode</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token property\">position</span><span class=\"token punctuation\">:</span>relative<span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>mynode<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\r\n        testyest\r\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\r\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">let</span> node <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.mynode'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nnode<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span><span class=\"token string\">\"0px\"</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>count<span class=\"token operator\">></span><span class=\"token number\">40</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\r\n    \r\n    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n    node<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left<span class=\"token operator\">=</span>count<span class=\"token operator\">+</span><span class=\"token string\">\"px\"</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>run<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"css3-transition\" style=\"position:relative;\"><a href=\"#css3-transition\" aria-label=\"css3 transition permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS3 transition</h3>\n<p>GPU 가속을 이용하는 CSS 속성들을 사용하면\r\nJavascript로 구현하는 것보다 더 빠르다고 알려짐!</p>\n<ul>\n<li>transform:translateXX();</li>\n<li>transform:scale();</li>\n<li>transform: rotate();</li>\n<li>opacity</li>\n</ul>\n<p>transition 으로 변화시킬 속성과 변화 시간을 지정할 수 있음</p>\n<p>transition [property] [duration] [timing-function] [delay]</p>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token property\">transform</span> <span class=\"token punctuation\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span>1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token property\">transition</span> <span class=\"token punctuation\">:</span> transform 2s</code></pre></div>","id":"24f7e120-13ed-50ed-88b1-ca10bdb08c50","fields":{"slug":"boost-course-pj-3-front-end-강의-정리-2"},"frontmatter":{"date":"2019-07-04","title":"[BoostCourse] PJ3 FrontEnd 강의 정리 -2","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":1},{"excerpt":"javascript 배열 선언 : new Array()를 통해서 가능하지만, 보통 a = [] 처럼 간단히 선언 모든 데이터타입이 들어갈 수 있다. (객체, 함수, null 등등 ) javascript 배열의 유용한 메서드들 push - a.push(10); //a=[10], 배열에 순차적으로 원소 삽입,pop도 있음 indexof - a.indexof(10);  // =0, 특정원소가 존재하는 인덱스 반환. concat - a=a.concat…","html":"<h3 id=\"javascript-배열\" style=\"position:relative;\"><a href=\"#javascript-%EB%B0%B0%EC%97%B4\" aria-label=\"javascript 배열 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript 배열</h3>\n<hr>\n<ul>\n<li>\n<p>선언 : new Array()를 통해서 가능하지만, 보통 a = [] 처럼 간단히 선언</p>\n</li>\n<li>\n<p>모든 데이터타입이 들어갈 수 있다. (객체, 함수, null 등등 )</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">sa<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\na<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\r\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 101 출력</span></code></pre></div>\n<h3 id=\"javascript-배열의-유용한-메서드들\" style=\"position:relative;\"><a href=\"#javascript-%EB%B0%B0%EC%97%B4%EC%9D%98-%EC%9C%A0%EC%9A%A9%ED%95%9C-%EB%A9%94%EC%84%9C%EB%93%9C%EB%93%A4\" aria-label=\"javascript 배열의 유용한 메서드들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript 배열의 유용한 메서드들</h3>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>push - a.push(10); //a=[10], 배열에 순차적으로 원소 삽입,pop도 있음</p>\n</li>\n<li>\n<p>indexof - a.indexof(10);  // =0, 특정원소가 존재하는 인덱스 반환.</p>\n</li>\n<li>\n<p>concat - a=a.concat(1,2,3) //a=[1,2,3,10] 배열에 원소 이어붙임, (이어붙인 배열을 반환).</p>\n</li>\n<li>\n<p>join - a=a.join() // =\"1,2,3,10\" 배열을 문자열로 합친 후 반환.</p>\n</li>\n</ul>\n<blockquote>\n<p>join,concat같은 경우, 실행시 배열의 내용이 직접 바뀌지 않고, 수행된 값을 반환하는 작업만을 함에 유의하자.</p>\n</blockquote>\n<p><strong>배열탐색</strong></p>\n<ul>\n<li>\n<p>foreach(function(v,i)) : v,i를 각각 value, index에 파싱하여 function에 해당하는 내용 루프돌며 실행한다.</p>\n</li>\n<li>\n<p>map(function(v,i)) :  function의 리턴값들의 배열을 리턴합니다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascirpt\"><pre class=\"language-javascirpt\"><code class=\"language-javascirpt\">var newArr = [&quot;apple&quot;,&quot;tomato&quot;].map(function(value, index) {\r\n   return index + &quot;번째 과일은 &quot; + value + &quot;입니다&quot;;\r\n});\r\nconsole.log(newArr)     //문자열 배열로 리턴</code></pre></div>\n<h3 id=\"javascript-객체\" style=\"position:relative;\"><a href=\"#javascript-%EA%B0%9D%EC%B2%B4\" aria-label=\"javascript 객체 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript 객체</h3>\n<hr>\n<ul>\n<li>\n<p>key, value로 이루어진 js의 대표적인  자료구조 .(온점)을 통해 접근.</p>\n</li>\n<li>\n<p>,(콤마)를 통해 속성을 구분, :(콜론) 을 통해 키/벨류를 바인딩.</p>\n</li>\n<li>\n<p>for-in 문을 사용하여 순회.</p>\n</li>\n<li>\n<p>Object.keys() - 오브젝트의 키로 이루어진 배열 반환</p>\n</li>\n</ul>\n<blockquote>\n<p>Object.keys()로도 객체 순회 가능</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token string-property property\">'a'</span><span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token punctuation\">,</span> <span class=\"token string-property property\">'b'</span><span class=\"token operator\">:</span><span class=\"token string\">\"myName\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\r\n\r\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>\n<p>객체의 속성 추가는 접근방법과 같다.</p>\n</li>\n<li>\n<p>속성 제거에는 delete 키워드를 통해 가능하다.</p>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">obj<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">\"mleek\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">//name 속성 생성</span>\r\n\r\n<span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>        <span class=\"token comment\">//name속성 제거</span></code></pre></div>\n<br>\n<p><strong>실습 1.</strong></p>\n<hr>\n<p><a href=\"https://gist.github.com/nigayo/ade2c3f74417fc202c8097214c965f27\">링크</a> 에서, 숫자타입의 키값들만 출력하기.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">findTypeKeys</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span>type</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token function\">findTypeKeys</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span>\r\n<span class=\"token function\">findTypeKeys</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span><span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<br>\n<p><strong>실습 2.</strong></p>\n<hr>\n<p><a href=\"https://gist.github.com/nigayo/a9a118977f82780441db664d6785efe3\">링크</a> 에서, \"type\"키 값이 \"sk\"인것의 name 출력하기</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">findPropAttr</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>key <span class=\"token keyword\">in</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            <span class=\"token function\">findPropAttr</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span><span class=\"token string\">\"type\"</span><span class=\"token operator\">&amp;&amp;</span>v<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token string\">\"sk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token punctuation\">}</span>\r\n    <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"dom-node-조작하기-dom-api\" style=\"position:relative;\"><a href=\"#dom-node-%EC%A1%B0%EC%9E%91%ED%95%98%EA%B8%B0-dom-api\" aria-label=\"dom node 조작하기 dom api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM Node 조작하기 (DOM API)</h3>\n<hr>\n<p><a href=\"https://www.w3schools.com/jsref/dom_obj_document.asp\">Document노드_API</a></p>\n<p><a href=\"https://www.w3schools.com/jsref/dom_obj_all.asp\">Elements노드_API</a></p>\n<p>DOM 엘리먼트 속성</p>\n<ul>\n<li>tagName : 엘리먼트 태그명 변환</li>\n<li>textContent</li>\n</ul>\n<h3 id=\"dom-api로-node-조작-실습\" style=\"position:relative;\"><a href=\"#dom-api%EB%A1%9C-node-%EC%A1%B0%EC%9E%91-%EC%8B%A4%EC%8A%B5\" aria-label=\"dom api로 node 조작 실습 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM API로 Node 조작 실습</h3>\n<hr>\n<p>실습 1.\r\n지금 나온 DOM API를 사용해서, strawberry 아래에 새로운 과일을 하나 더 추가하시오.</p>\n<p>추가 된 이후에는 다시 삭제하시오.</p>\n<img src=\"/assets/img/boostcourse/pr01.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> list  <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">var</span> addNode<span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> textNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pineapple'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\naddNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>textNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>addNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>addNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<p>노드 생성 후, setTimeout 메서드를 통해 1초 후 지우는 동작 수행</p>\n<hr>\n<p>실습2 &#x26; 실습 3</p>\n<p>insertBefore메서드를 사용해서, orange와  banana 사이에 새로운 과일을 추가하시오.</p>\n<p>실습2를 insertAdjacentHTML메서드를 사용해서, orange와 banana 사이에 새로운 과일을 추가하시오.</p>\n<img src=\"/assets/img/boostcourse/pr023.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> fruitNode <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'li'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> fruitText <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'water mellon'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nfruitNode<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>fruitText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>fruitNode<span class=\"token punctuation\">,</span>list<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nfruitNode<span class=\"token punctuation\">.</span><span class=\"token function\">insertAdjacentHTML</span><span class=\"token punctuation\">(</span><span class=\"token string\">'afterend'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>참고링크\r\n<a href=\"https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore\">insertBefore_Docuemnt</a></p>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Element/insertAdjacentHTML\">insertAdjacentHTML_Document</a></p>\n<hr>\n<p>실습4</p>\n<p>apple을 grape 와 strawberry 사이로 옮기시오.</p>\n<img src=\"/assets/img/boostcourse/pr04.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> list <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\n<span class=\"token keyword\">var</span> app <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> grp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">[</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\nlist<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">,</span>grp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>실습5</p>\n<p>class 가 'red'인 노드만 삭제하시오.</p>\n<img src=\"/assets/img/boostcourse/pr05.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> list<span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> rm <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ul>li.red'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nrm<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  list<span class=\"token punctuation\">.</span><span class=\"token function\">removeChild</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>실습6</p>\n<p>section 태그의 자손 중에 blue라는 클래스를 가지고 있는 노드가 있다면, 그 하위에 있는 h2 노드를 삭제하시오.</p>\n<img src=\"/assets/img/boostcourse/pr06.JPG\">\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> sec <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'section'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\r\nsec<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n  <span class=\"token keyword\">var</span> blueNode <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>blueNode<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>blueNode<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    v<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'h2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n      v<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\r\n  <span class=\"token punctuation\">}</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>","id":"d4b0e3db-0a99-5e3e-89c0-22a70e199cfc","fields":{"slug":"boost-course-pj-3-front-end-강의-정리-1"},"frontmatter":{"date":"2019-03-26","title":"[BoostCourse] PJ3 FrontEnd 강의 정리 -1","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":2},{"excerpt":"JSP 강의정리 Java Server Page, 자바 언어를 통해, 웹 페이지를 표시하는 기술 Scope란? 웹을 개발하면서 사용할 변수들에 대해, 유지되는 범위(scope)를 의미한다. page > request > session > application 의 포함관계가 있다. page scope 서블릿의 PageContext pageContext 내장객체 사용(jsp) 웹 페이지가 실행되는 동안 사용됨 (forward…","html":"<h2 id=\"jsp-강의정리\" style=\"position:relative;\"><a href=\"#jsp-%EA%B0%95%EC%9D%98%EC%A0%95%EB%A6%AC\" aria-label=\"jsp 강의정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JSP 강의정리</h2>\n<hr>\n<p>Java Server Page, 자바 언어를 통해, 웹 페이지를 표시하는 기술</p>\n<br>\n<h1 id=\"scope란\" style=\"position:relative;\"><a href=\"#scope%EB%9E%80\" aria-label=\"scope란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope란?</h1>\n<hr>\n<p>웹을 개발하면서 사용할 변수들에 대해, 유지되는 범위(scope)를 의미한다.</p>\n<p>page > request > session > application 의 포함관계가 있다.</p>\n<br>\n<h1 id=\"page-scope\" style=\"position:relative;\"><a href=\"#page-scope\" aria-label=\"page scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>page scope</h1>\n<hr>\n<p>서블릿의 PageContext</p>\n<ul>\n<li>pageContext 내장객체 사용(jsp)</li>\n<li>웹 페이지가 실행되는 동안 사용됨 (forward시, 내장객체 사라짐)</li>\n</ul>\n<br>\n<h1 id=\"request-scope\" style=\"position:relative;\"><a href=\"#request-scope\" aria-label=\"request scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>request scope</h1>\n<hr>\n<p>서블릿의 HttpServeltRequest</p>\n<ul>\n<li>request 내장객체 사용(jsp), set,get Attribute 메서드, 디스패쳐 메서드 존재</li>\n<li>요청이 들어오고 응답이 나갈 때 까지 사용됨</li>\n<li>페이지가 이동하는 forward에서도 객체 유지됨</li>\n</ul>\n<br>\n<h1 id=\"session-scope\" style=\"position:relative;\"><a href=\"#session-scope\" aria-label=\"session scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>session scope</h1>\n<hr>\n<p>서블릿의 HttpSession</p>\n<ul>\n<li>세션이 유지되는 동안 객체 유지됨, session 내장객체(jsp) 사용</li>\n<li>set,get Attribute 메서드 존재</li>\n<li>클라이언트(browser) 별로 변수 관리</li>\n</ul>\n<br>\n<h1 id=\"application-scope\" style=\"position:relative;\"><a href=\"#application-scope\" aria-label=\"application scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>application scope</h1>\n<hr>\n<p>서블릿의 ServletContext</p>\n<ul>\n<li>여러 개의 클라이언트들이 값을 공유, application 내장객체(jsp) 사용</li>\n</ul>\n<br>\n<h1 id=\"expression-language\" style=\"position:relative;\"><a href=\"#expression-language\" aria-label=\"expression language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Expression Language</h1>\n<hr>\n<p>EL은, 값을 표현하는 데 사용되는 스크립트언어로서 JSP 문법을 보완하는 역할을 하며, 기능은 다음과 같다.</p>\n<ul>\n<li>JSP의 스코프에 맞는 속성 사용</li>\n<li>집합 객체에 대한 접근 방법 제공</li>\n<li>수치, 관계, 논리 연산자 제공</li>\n<li>자바 클래스 메서드 호출 기능 제공</li>\n<li>EL만의 기본객체 제공</li>\n</ul>\n<br>\n<h2 id=\"표현언어의-사용방법\" style=\"position:relative;\"><a href=\"#%ED%91%9C%ED%98%84%EC%96%B8%EC%96%B4%EC%9D%98-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"표현언어의 사용방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>표현언어의 사용방법</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">$<span class=\"token punctuation\">{</span>expression<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>위의 기본예제와 같이, $달러 옆의 {}중괄호 내에 표현식을 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsp\"><pre class=\"language-jsp\"><code class=\"language-jsp\">&lt;jsp:include page = &quot;/module/${skin.id}/header.jsp&quot; flush=&quot;true&quot;&gt;\r\n&lt;b&gt;${sessionScope.member.id}&lt;/b&gt;님 환영합니다.</code></pre></div>\n<p>jsp로 작성된 EL 예제</p>\n<p>표현언어가 제공하는 기본객체는 아래와 같다.</p>\n<ul>\n<li>\n<p>pageContext</p>\n</li>\n<li>\n<p>pageScope, requestScope, sessionScope, applicationScope - 기본객체에 저장된 <strong>속성-값</strong> 매핑을 저장한 Map 객체</p>\n</li>\n<li>\n<p>param - 요청 파라미터의 <strong>파라미터이름-값</strong> 매핑을 저장한 Map 객체</p>\n</li>\n<li>\n<p>paramValues - 요청 파라미터의 값들을 <strong>파라미터이름 - 값배열</strong> 매핑을 저장한 Map 객체</p>\n</li>\n<li>\n<p>header - 요청정보의 헤더이름-값 매핑을 저장한 Map 객체</p>\n</li>\n<li>\n<p>headerValues - 위 관계와 동일</p>\n</li>\n<li>\n<p>cookie - 쿠키이름 - 쿠키 매핑저장</p>\n</li>\n<li>\n<p>initParam - 초기화 파라미터의 이름- 값 매핑 저장</p>\n</li>\n</ul>\n<br>\r\n<br>\r\n# JSTL - JSP Standard Tag Library\n<p>생략</p>\n<h1 id=\"database\" style=\"position:relative;\"><a href=\"#database\" aria-label=\"database permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DataBase</h1>\n<p>데이터베이스는 따로 Mysql 설치, 문법 예제 연습 의 2개 시리즈의 포스팅으로 나누어 작성</p>","id":"a944c541-4eb2-54df-9543-95c5186cecf8","fields":{"slug":"boost-course-pj-2-back-end-강의-정리"},"frontmatter":{"date":"2019-02-24","title":"[BoostCourse] PJ2 BackEnd 강의 정리","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":1},{"excerpt":"javascript 수강내용 변수와 연산자 변수 변수의 선언은 var, let, const 키워드를 통해 선언할 수 있음. 각자 선언 방법에 따라 유효범위(scope)가 달라진다. 선언방법 var - Function Scope, 함수 단위의 유효범위를 가진다. 재선언과 재할당이 가능하다. 선언 예약어를 지정하지 않을 시, 기본으로 지정된다. 즉, i =3 과  var i = 3은 같은 문장이다. const - Block Scope…","html":"<h1 id=\"javascript-수강내용\" style=\"position:relative;\"><a href=\"#javascript-%EC%88%98%EA%B0%95%EB%82%B4%EC%9A%A9\" aria-label=\"javascript 수강내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript 수강내용</h1>\n<h1 id=\"변수와-연산자\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98%EC%99%80-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"변수와 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수와 연산자</h1>\n<hr>\n<br>\r\n> 변수 선언 / 연산자 / Type 종류 / Type 확인\n<h2 id=\"변수\" style=\"position:relative;\"><a href=\"#%EB%B3%80%EC%88%98\" aria-label=\"변수 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수</h2>\n<p>변수의 선언은 <strong>var, let, const</strong> 키워드를 통해 선언할 수 있음.</p>\n<p>각자 선언 방법에 따라 유효범위(scope)가 달라진다.</p>\n<h3 id=\"선언방법\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%EB%B0%A9%EB%B2%95\" aria-label=\"선언방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언방법</h3>\n<hr>\n<ul>\n<li>\n<p><strong>var</strong> - Function Scope, 함수 단위의 유효범위를 가진다.</p>\n<ul>\n<li><strong>재선언</strong>과 <strong>재할당</strong>이 가능하다.</li>\n<li>선언 예약어를 지정하지 않을 시, 기본으로 지정된다.</li>\n<li>즉, i =3 과  var i = 3은 같은 문장이다.</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li>\n<p><strong>const</strong> - Block Scope, 중괄호 단위의 유효범위를 가진다.</p>\n<ul>\n<li>\n<p>재선언과 재할당이 불가능하다. 상수를 선언하는 키워드임</p>\n</li>\n<li>\n<p>즉, 값이 변경되지 않는다.</p>\n</li>\n</ul>\n</li>\n</ul>\n<br>\n<ul>\n<li><strong>let</strong> - Block Scope, 중괄호 단위의 유효범위를 가진다.</li>\n</ul>\n<br>\n<p><strong>scope는</strong> 쉽게 말해, 변수가 지역변수가 될 수 있는 조건을 의미한다.</p>\n<p>각각이 중괄호, 함수 내에 선언되면 지역변수가 되고, 그렇지 않으면 전역변수이다.</p>\n<p>말은 이렇게 하지만, 정리하고있는 시점에서도 가끔씩 혼동이 온다..</p>\n<p>let,var,const에 대해 <a href=\"https://blog.hanumoka.net/2018/09/21/javascript-20180921-javascript-var-let-const/\">잘 정리된 링크</a>를 참고하자.</p>\n<h2 id=\"연산자\" style=\"position:relative;\"><a href=\"#%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>연산자</h2>\n<hr>\n<p>사칙연산(+,-,/,*), 나머지연산, 삼항연산은 다른 프로그래밍</p>\n<p>언어와 동일하므로 생략</p>\n<ul>\n<li>비교연산자</li>\n</ul>\n<p>비교연산에는 ==보다 ===를 사용한다.</p>\n<p>==으로 비교하는 경우, 좌항과 우항의 타입을 일치시킨 후 비교하고,</p>\n<p>===으로 비교하는 경우, 좌항과 우항의 타입까지 고려하여 비교한다.</p>\n<p>==으로 비교할 경우 고려하지 않은 결과로 인해 비교연산이 예측과 달라질 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n\r\na<span class=\"token operator\">==</span>b<span class=\"token punctuation\">;</span>       <span class=\"token comment\">//true</span>\r\na<span class=\"token operator\">===</span>b<span class=\"token punctuation\">;</span>      <span class=\"token comment\">//false</span></code></pre></div>\n<h2 id=\"반복-제어문\" style=\"position:relative;\"><a href=\"#%EB%B0%98%EB%B3%B5-%EC%A0%9C%EC%96%B4%EB%AC%B8\" aria-label=\"반복 제어문 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>반복 (제어문)</h2>\n<hr>\n<p>비교 및 반복문에는, if, switch, while, for(for-each, for-of, for-in), Label, do-while문 등이 있습니다.</p>\n<p>c언어 학습자 기준으로 생소한 문법들만 정리해보겠습니다.</p>\n<ul>\n<li>Label - 보통 루프를 식별하기 위해 사용합니다. 식별한 루프문들에 대해, break, continue문들을 사용할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> a<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> a<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>\r\n    <span class=\"token literal-property property\">innerLoop</span> <span class=\"token operator\">:</span> \r\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> b<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\r\n    <span class=\"token punctuation\">{</span>\r\n        a<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\r\n            <span class=\"token keyword\">break</span> innerLoop<span class=\"token punctuation\">;</span>       \r\n    <span class=\"token punctuation\">}</span>\r\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n</code></pre></div>\n<ul>\n<li>for-in - 객체의 열거 속성을 통해 지정된 변수를 반복합니다.</li>\n</ul>\n<h1 id=\"window-객체settimeout\" style=\"position:relative;\"><a href=\"#window-%EA%B0%9D%EC%B2%B4settimeout\" aria-label=\"window 객체settimeout permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Window 객체(setTimeout)</h1>\n<hr>\n<p>전역객체(window)에 속한 메서드는, 경고창을 띄워주는 alert, setTimeout이라는 메서드들이 있다. 이를 통해 비동기방식을 알아본다.</p>\n<blockquote>\n<p>callback 함수란, 호출 즉시 실행되지 않거나 아예 실행되지 않을 수도 있는 함수이다. 호출한 대상(call)에서 되부름(callback)되기 때문에 callback이라고 부른다.</p>\n</blockquote>\n<p>전역객체의 사용</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">window<span class=\"token punctuation\">.</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//전역객체인 window 생략 가능</span></code></pre></div>\n<p><strong>나는 2초마다</strong> <strong>팝업</strong> 알림창을 띄우는 프로그램을 작성해보았다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\r\n<span class=\"token punctuation\">{</span>     \r\n   <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>   <span class=\"token comment\">//</span>\r\n        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\r\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span>\r\n\r\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>v<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>v<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>v<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n<span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>callback을 정확히 이해했다면, 이 코드는 작성자의 예상과 다르게 작동함을 알 수 있다.</p>\n<p><strong>위 프로그램은 10회 run 함수를 호출함과 동시에 setTimeout메서드를 10회 호출하고,</strong></p>\n<p>2초뒤에 10개의 알림메시지를 수행하는 코드로 callback된다.</p>\n<p>사실 2초에 한 번씩 알림을 호출하는 프로그램에는 콜백함수가 필요 없다</p>\n<p>(굳이 콜백을 써서 반복을 구현하려면, setInterval을 사용하면 된다고 한다.)</p>\n <br>\n<h1 id=\"dom과-queryselector\" style=\"position:relative;\"><a href=\"#dom%EA%B3%BC-queryselector\" aria-label=\"dom과 queryselector permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>DOM과 querySelector</h1>\n<hr>\n<p>HTML의 구조와 데이터를 이해하고, javascript로 이를 변경하는 방법에 대해 이해하기</p>\n<ul>\n<li>브라우저는 HTML 코드를 DOM이라는 객체 형태의 모델로 저장한다. (DOM tree)</li>\n</ul>\n<blockquote>\n<p>부연설명 - 태그 요소의 아이디, 클래스, 텍스트 등의 정보를 트리형태의 객체(Object)로 저장한다는 의미</p>\n</blockquote>\n<p>//관련 이미지 추가</p>\n<br>\n<h3 id=\"javascript의-dom-api\" style=\"position:relative;\"><a href=\"#javascript%EC%9D%98-dom-api\" aria-label=\"javascript의 dom api permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>javascript의 DOM API</h3>\n<hr>\n<p>DOM, 즉 페이지 정보를 트리형태의 객체로 저장한 데이터에서</p>\n<p>일일이 javascript로 원하는 데이터를 추출하는 알고리즘을 짜는 것은 매우 복잡하다.</p>\n<p>이에 javascript에서는 DOM API를 제공한다.</p>\n<ul>\n<li>\n<p>.getElementById() - id 기반으로 정보를 찾습니다. 마찬가지로 Class나 Tag의 이름으로 찾는것도 가능</p>\n</li>\n<li>\n<p>Element.querySelector() - css의 selector를 기반으로 질의(query)합니다.</p>\n</li>\n</ul>\n<br>\n<h1 id=\"브라우저-이벤트\" style=\"position:relative;\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8\" aria-label=\"브라우저 이벤트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>브라우저 이벤트</h1>\n<hr>\n<p>사용자로 인해 발생하는 많은 이벤트들은, 마우스 클릭, 스크롤, 이동 등등 여러 경우에 발생합니다.(키보드 등 다른 입력장치의 경우에도 마찬가지)</p>\n<p>이러한 이벤트 발생 정보를 통해 새로운 이벤트를 등록 할 수 있습니다.</p>\n<ul>\n<li>이벤트 등록 표준 방법</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> se <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span>gogo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//DOM 오브젝트 지정</span>\r\nse<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"click\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">evt</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>evt<span class=\"token punctuation\">.</span>target<span class=\"token operator\">+</span><span class=\"token string\">\": ouch\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h1 id=\"ajax\" style=\"position:relative;\"><a href=\"#ajax\" aria-label=\"ajax permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AJAX</h1>\n<hr>\n<p>AJAX는 단일 기술에 대한 내용이 아니라, 웹에서 데이터를 갱신할 때, 브라우저 새로고침 없이 비동기적으로 컨텐츠를 변경시킬 때 사용하는 모든 기술을 의미합니다.</p>\n<p>기본 예제코드</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> oReq<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\r\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"https://www.exampleurl.com/example.html?data=data\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    \r\noReq<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n</code></pre></div>\n<p>XMLHttpRequest의 메서드 (oReq에서 사용된 메서드)</p>\n<p>open(TYPE, URL, ASYNC) - 요청객체의 커넥션을 생성</p>\n<ul>\n<li>TYPE : get,post같은 요청 메서드</li>\n<li>URL : 요청을 처리할 서버 URL</li>\n<li>ASYNC : 비동기 -true, 동기 - false</li>\n</ul>\n<p>send(DATA) - 서버로 요청을 전송</p>\n<ul>\n<li>DATA : 요청 전송 시 HTTP의 body에 담길 데이터 전송. get요청이므로 null이 들어감.</li>\n</ul>\n<br>\n<hr>\n<p>-끝</p>","id":"4eff337a-4e2a-5085-96e0-2eeb0d71dcd5","fields":{"slug":"boost-course-pj-2-javascript-강의-정리"},"frontmatter":{"date":"2019-02-18","title":"[BoostCourse] PJ2 Javascript 강의 정리","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":2},{"excerpt":"Dynamic Web Project 프로젝트 Hello world 작성하기 프로젝트 이름 지정 및 Target Runtime 지정 (WAS:톰캣 설치디렉터리 지정) Hellow Servlet 작성 1.project에서 new > servlet 으로 서블릿 생성. doGet메서드에 다음과 같이 작성 //관련이미지 추가\r\n 자바 웹 어플리케이션과 서블릿에 관해서..  - 자바 웹 어플리케이션 자바 웹 어플리케이션에는 HTML, CSS, Image…","html":"<h1 id=\"dynamic-web-project-프로젝트-hello-world-작성하기\" style=\"position:relative;\"><a href=\"#dynamic-web-project-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-hello-world-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"dynamic web project 프로젝트 hello world 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dynamic Web Project 프로젝트 Hello world 작성하기</h1>\n<hr>\n<br>\r\n(프로젝트 생성)\r\n> File > new > Other  > Dynamic WebProject 선택\n<blockquote>\n<p>프로젝트 이름 지정 및 Target Runtime 지정 (WAS:톰캣 설치디렉터리 지정)</p>\n</blockquote>\n<br>\n<h3 id=\"hellow-servlet-작성\" style=\"position:relative;\"><a href=\"#hellow-servlet-%EC%9E%91%EC%84%B1\" aria-label=\"hellow servlet 작성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hellow Servlet 작성</h3>\n<hr>\n<p>1.project에서 new > servlet 으로 서블릿 생성.</p>\n<p>doGet메서드에 다음과 같이 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">doGet</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpServletRequest</span> request<span class=\"token punctuation\">,</span> <span class=\"token class-name\">HttpServletResponse</span> response<span class=\"token punctuation\">)</span> \r\n<span class=\"token keyword\">throws</span> <span class=\"token class-name\">ServletException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\r\n\t\t<span class=\"token comment\">// TODO Auto-generated method stub</span>\r\n\t\tresponse<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text/html;charset=UTF-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n                 <span class=\"token comment\">//response 데이터의 meta정보 지정</span>\r\n\r\n\t\t<span class=\"token class-name\">PrintWriter</span> out <span class=\"token operator\">=</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\r\n\t\t\r\n\t\tout<span class=\"token punctuation\">.</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>한글 테스트, hello! servlet&lt;/h1>&lt;br>\"</span>\r\n\t\t\t<span class=\"token operator\">+</span><span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"&lt;br>\"</span><span class=\"token operator\">+</span><span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\r\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>//관련이미지 추가\r\n<br><br></p>\n<h1 id=\"자바-웹-어플리케이션과-서블릿에-관해서\" style=\"position:relative;\"><a href=\"#%EC%9E%90%EB%B0%94-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EA%B3%BC-%EC%84%9C%EB%B8%94%EB%A6%BF%EC%97%90-%EA%B4%80%ED%95%B4%EC%84%9C\" aria-label=\"자바 웹 어플리케이션과 서블릿에 관해서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바 웹 어플리케이션과 서블릿에 관해서..</h1>\n<hr>\n<p><br><br></p>\n<h3 id=\"--자바-웹-어플리케이션\" style=\"position:relative;\"><a href=\"#--%EC%9E%90%EB%B0%94-%EC%9B%B9-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98\" aria-label=\"  자바 웹 어플리케이션 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 자바 웹 어플리케이션</h3>\n<hr>\n<br>\r\n* 자바 웹 어플리케이션이란, WAS에 배치(desploy)되어 동작하는 애플리케이션이다.\n<ul>\n<li>\n<p>자바 웹 어플리케이션에는 HTML, CSS, Image, Java Class, Setting 등등을 저장한 파이들이 포함된다.</p>\n</li>\n<li>\n<p>특히, 톰캣에서는 <span class=\"bBorder\"><strong>web.xml</strong></span> 파일이 <span class=\"bBorder\"><strong>배치 기술자</strong></span> 라고 불리며, 중요한 설정들이 저장된다.</p>\n</li>\n<li>\n<p>Servlet3.0 미만에서는 필수적으로 존재해야 하지만, 3.0 이후 버전에서는 <strong>어노테이션</strong>을 사용한다.</p>\n</li>\n</ul>\n<p>(but Spring에서는 다른 설정들을 저장하기 위해 사용한다.)</p>\n<br>\r\n#### - 서블릿\r\n---\r\n<br>\r\n* 자바 웹 어플리케이션 내에서, 동적인 처리를하는 프로그램의 역할.\n<ul>\n<li>\n<p>WAS 내에서 동작하며, HttpServlet클래스를 상속받는 JAVA 클래스.</p>\n</li>\n<li>\n<p>JSP가 <span class=\"bBorder\">View</span> 역할을 맡는다면, 서블릿은 <span class=\"bBorder\">Controller</span> 역할</p>\n</li>\n</ul>\n<br>\r\n#### - 서블릿의 라이프사이클\r\n---\r\n* 클라이언트가 서버에게 요청.\n<ul>\n<li>URL을 받아, URL Mapping에 해당하는 서블릿 존재여부 검증.</li>\n</ul>\n<h5 id=\"여기서의-검증이란-서블릿이-메모리에-올라가있는지-판단하는-것-서블릿은-하나의-객체만이-메모리에-올라가기-때문에-서버-구동-이후-init-과정이-한-번만-실행됨\" style=\"position:relative;\"><a href=\"#%EC%97%AC%EA%B8%B0%EC%84%9C%EC%9D%98-%EA%B2%80%EC%A6%9D%EC%9D%B4%EB%9E%80-%EC%84%9C%EB%B8%94%EB%A6%BF%EC%9D%B4-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%98%AC%EB%9D%BC%EA%B0%80%EC%9E%88%EB%8A%94%EC%A7%80-%ED%8C%90%EB%8B%A8%ED%95%98%EB%8A%94-%EA%B2%83-%EC%84%9C%EB%B8%94%EB%A6%BF%EC%9D%80-%ED%95%98%EB%82%98%EC%9D%98-%EA%B0%9D%EC%B2%B4%EB%A7%8C%EC%9D%B4-%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%97%90-%EC%98%AC%EB%9D%BC%EA%B0%80%EA%B8%B0-%EB%95%8C%EB%AC%B8%EC%97%90-%EC%84%9C%EB%B2%84-%EA%B5%AC%EB%8F%99-%EC%9D%B4%ED%9B%84-init-%EA%B3%BC%EC%A0%95%EC%9D%B4-%ED%95%9C-%EB%B2%88%EB%A7%8C-%EC%8B%A4%ED%96%89%EB%90%A8\" aria-label=\"여기서의 검증이란 서블릿이 메모리에 올라가있는지 판단하는 것 서블릿은 하나의 객체만이 메모리에 올라가기 때문에 서버 구동 이후 init 과정이 한 번만 실행됨 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>(여기서의 검증이란, 서블릿이 메모리에 올라가있는지 판단하는 것. 서블릿은 하나의 객체만이 메모리에 올라가기 때문에, 서버 구동 이후 Init 과정이 한 번만 실행됨)</h5>\n<ul>\n<li>\n<p>검증 후, 서블릿이 생성되지 않았다면, init 과정을 수행하고, service 과정 수행</p>\n</li>\n<li>\n<p>생성되어있는 경우, 바로 service 과정 수행.</p>\n</li>\n<li>\n<p><strong>서버를 종료</strong>시키는 경우 destroy 과정 수행.</p>\n</li>\n<li>\n<p>또는, 서블릿이 <strong>수정된</strong> 경우, 메모리에서 servlet을 제거해야 하므로, destroy 과정 수행.</p>\n</li>\n</ul>\n<p><br><br></p>\n<h4 id=\"--서블릿의-구현\" style=\"position:relative;\"><a href=\"#--%EC%84%9C%EB%B8%94%EB%A6%BF%EC%9D%98-%EA%B5%AC%ED%98%84\" aria-label=\"  서블릿의 구현 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 서블릿의 구현</h4>\n<hr>\n<br>\n<p>서블릿은 HttpServlet클래스를 상속받는다.</p>\n<p>이후 필요에 따라 메서드를 오버라이딩을 통해 구현한다.</p>\n<p>이와 같은 디자인패턴을 <a href=\"https://terms.naver.com/entry.nhn?docId=3532974&#x26;cid=58528&#x26;categoryId=58528\">템플릿 메서드 패턴</a> 이라고 한다.</p>\n<p><br><br></p>\n<h4 id=\"request-response-객체-이해하기\" style=\"position:relative;\"><a href=\"#request-response-%EA%B0%9D%EC%B2%B4-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"request response 객체 이해하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request, Response 객체 이해하기</h4>\n<hr>\n<p><em>서블릿의 동작..</em></p>\n<p>WAS는 브라우저로부터 요청을 받으면, HttpServletRequest객체를 생성합니다. 이후 이 객체에게 요청에 관한 정보들을 전부 저장해줍니다.</p>\n<p><em>HttpServletRequest</em></p>\n<ul>\n<li>http프로토콜의 요청정보를 서블릿에게 전달하기 위한 목적</li>\n<li>헤더정보 / 파라미터 / 쿠키 / URI / URL 등의 정보를 읽어들이는 메서드를 가지고 있다.</li>\n<li>Body의 Stream을 읽어들이는 메서드를 가지고 있다. (이해가 잘 안돼서, 질문글 남김)</li>\n</ul>\n<p><em>HttpServletResponse</em></p>\n<ul>\n<li>응답을 보내기 위해 해당 객체를 생성합니다.</li>\n<li>서블릿은 해당 객체를 사용해, content type 이나, 응답코드, 응답 메시지들을 전송해줍니다.</li>\n</ul>\n<p><br><br><br></p>\n<h4 id=\"--요청-정보의-종류들-알아내기\" style=\"position:relative;\"><a href=\"#--%EC%9A%94%EC%B2%AD-%EC%A0%95%EB%B3%B4%EC%9D%98-%EC%A2%85%EB%A5%98%EB%93%A4-%EC%95%8C%EC%95%84%EB%82%B4%EA%B8%B0\" aria-label=\"  요청 정보의 종류들 알아내기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 요청 정보의 종류들 알아내기</h4>\n<hr>\n<br>\r\n```java\r\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) \r\n\t\tthrows ServletException, IOException {\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\tresponse.setContentType(\"text/html;charset=UTF-8\");\r\n\tPrintWriter out = response.getWriter();\r\n\t\t\t\r\n\tEnumeration&lt;String> headers =  request.getHeaderNames();\r\n\t\r\n\twhile(headers.hasMoreElements())\r\n\t{\r\n\t\tString headerName =headers.nextElement();\r\n\t\tString headerValue = request.getHeader(headerName);\r\n\t\tout.print(headerName+\" : \"+headerValue+\"&lt;br>\");\r\n\t}\r\n\tout.close();\r\n}</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\r\nHttpServletRequest 객체에 있는 헤더정보를 모두 출력해주는 코드입니다.\r\n\r\n헤더란, HTTP 프로토콜 메시지의 맨 앞에서, 클라이언트의 정보 또는 메시지의 형태를 알려주는 역할을 하는 HTTP 메시지의 구성요소.\r\n&lt;br>&lt;br>&lt;br>\r\n\r\n#### - 요청 정보의 파라미터들을 알아내기\r\n---\r\n&lt;br>\r\n\r\n```java\r\nprotected void doGet(HttpServletRequest request, HttpServletResponse response) \r\n\t\tthrows ServletException, IOException {\r\n\r\n\t\tresponse.setContentType(\"text/html;charset=UTF-8\");\r\n\t\tPrintWriter out = response.getWriter();\r\n\r\n\t\tout.print(\"______________Parameter 정보_______________&lt;br>\");\r\n\t\t\r\n\t\tEnumeration&lt;String> paramNames = request.getParameterNames();\r\n\t\t\r\n\t\twhile(paramNames.hasMoreElements())\r\n\t\t{\r\n\t\t\tString paramName = paramNames.nextElement();\r\n\t\t\tString paramValue = request.getParameter(paramName);\r\n\t\t\tout.println(paramName+\" : \"+paramValue+\"&lt;br>\");\r\n\t\t}\r\n\t\t\r\n\r\n\t\tout.close();\r\n\t}</code></pre></div>\n<p>HttpServletRequest 객체에 있는 파라미터정보를 모두 출력해주는 코드입니다.</p>\n<p>이 떄, get을 통해 전달되는 파라미터는, 위 사진처럼 URL을 통해 전달할 수도 있으며, html의 form 태그를 통해서도 전달가능.</p>\n<p><br><br></p>\n<hr>\n<br>\r\n**-끝-**","id":"7dca5765-4a01-5a38-933c-c44c162a4f1b","fields":{"slug":"boost-course-pj-1-백엔드-강의-정리"},"frontmatter":{"date":"2018-12-28","title":"[BoostCourse] PJ1. 백엔드 강의 정리","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":2},{"excerpt":"CSS 1227 수강내용  선언방법 선언방법에는, 태그 속성으로 지정해주는 inline방법, style 태그 내에 지정해주는 internal 방법, 외부 파일을 link 태그로 연결해주어 지정하는 external방법이 있습니다. 선언방법 간 , 우선순위 는 다음과 같습니다. inline > (internal = external…","html":"<h1 id=\"css-1227-수강내용\" style=\"position:relative;\"><a href=\"#css-1227-%EC%88%98%EA%B0%95%EB%82%B4%EC%9A%A9\" aria-label=\"css 1227 수강내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS 1227 수강내용</h1>\n<hr>\n<p><br><br></p>\n<h3 id=\"선언방법\" style=\"position:relative;\"><a href=\"#%EC%84%A0%EC%96%B8%EB%B0%A9%EB%B2%95\" aria-label=\"선언방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선언방법</h3>\n<hr>\n<p>선언방법에는,</p>\n<ul>\n<li>\n<p>태그 속성으로 지정해주는 <strong>inline</strong>방법,</p>\n</li>\n<li>\n<p>style 태그 내에 지정해주는 <strong>internal</strong> 방법,</p>\n</li>\n<li>\n<p>외부 파일을 link 태그로 연결해주어 지정하는 <strong>external</strong>방법이 있습니다.</p>\n</li>\n</ul>\n<p>선언방법 간 , <strong>우선순위</strong> 는 다음과 같습니다.</p>\n<p><strong>inline > (internal = external)</strong></p>\n<p>인라인 코드가 가장 높은 우선순위를 갖고,  그렇지 않은 경우 나중에 선언된 코드가 높은 우선순위를 갖습니다.\r\n<br><br></p>\n<h3 id=\"상속과-우선순위-결정\" style=\"position:relative;\"><a href=\"#%EC%83%81%EC%86%8D%EA%B3%BC-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EA%B2%B0%EC%A0%95\" aria-label=\"상속과 우선순위 결정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속과 우선순위 결정</h3>\n<hr>\n<ol>\n<li>\n<p>상위 태그에서 적용한 스타일은 하위에서도 반영(상속).</p>\n</li>\n<li>\n<p>but, Box-Model이라 불리는 속성들(width, height, margin, padding, border)은, 배치관련 속성이므로 상속되지 않음.</p>\n</li>\n<li>\n<p>id > class > 엘리먼트(태그) 순서로 우선순위를 가짐.</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#a{\r\n color : red;\r\n}\r\n\r\n.b{\r\n color : blue;\r\n}\r\n\r\ndiv{\r\n color : green;\r\n}</code></pre></div>\n<p>위와 같은 경우, **<div class=\"b\" id=\"a\"> color</div>**의 색상은 <strong>red</strong>로 결정됨. 이러한 성질을 Cascading, 캐스캐이이딩 이라 부른다.</p>\n<ol start=\"4\">\n<li>선언 방식에 따라, 표현이 구체적인 선택자가 적용된다. 만약 선택자가 같을 경우, 나중에 선언한 것이 적용된다.</li>\n</ol>\n<p>body>span (0)</p>\n<p>span(x)</p>\n<h3 id=\"color-속성-지정\" style=\"position:relative;\"><a href=\"#color-%EC%86%8D%EC%84%B1-%EC%A7%80%EC%A0%95\" aria-label=\"color 속성 지정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>color 속성 지정</h3>\n<hr>\n<ol>\n<li>색상의 이름으로 지정</li>\n</ol>\n<blockquote>\n<p>color : red</p>\n</blockquote>\n<p>(또는 magenta, green,orange, cyan, black, white 등등,,)</p>\n<ol start=\"2\">\n<li>16진수로 RGB 조정, 가장 많이 사용되는 방법</li>\n</ol>\n<blockquote>\n<p>color : #ffa024</p>\n</blockquote>\n<ol start=\"3\">\n<li>rgba를 소괄호로 지정</li>\n</ol>\n<blockquote>\n<p>color : rgb(255, 0, 0, 0.5)</p>\n</blockquote>\n<p><br><br></p>\n<h3 id=\"폰트\" style=\"position:relative;\"><a href=\"#%ED%8F%B0%ED%8A%B8\" aria-label=\"폰트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>폰트</h3>\n<hr>\n<br>\r\n>font-size : 16px\n<blockquote>\n<p>font-size :2em</p>\n</blockquote>\n<p><strong>em</strong>은 상대적인 값, 상속받은 픽셀의 2배를 뜻함</p>\n<br>\n<blockquote>\n<p>font-family : monospace, sans-serif, Gulim</p>\n</blockquote>\n<p>코마(,)를 기준으로 순서대로 브라우저가 지원하는 폰트를 적용.</p>\n<p><br><br></p>\n<h3 id=\"css의-레이아웃-속성들\" style=\"position:relative;\"><a href=\"#css%EC%9D%98-%EB%A0%88%EC%9D%B4%EC%95%84%EC%9B%83-%EC%86%8D%EC%84%B1%EB%93%A4\" aria-label=\"css의 레이아웃 속성들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CSS의 레이아웃 속성들</h3>\n<hr>\n<p>CSS가 엘리먼트의 효과적인 배치를 위해 제공하는 속성들</p>\n<ol>\n<li>display 속성 : block, inline, inline-block</li>\n</ol>\n<hr>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">>block : 벽돌처럼, **세로로 쌓이는** 속성. 대부분의 엘리먼트들이 block으로 설정되어 있다.\r\n\r\n>inlline : 엘리먼트가 **옆으로 흐르도록** 설정하는 속성. a, strong ,u 태그 등등.. 몇가지 안된다.</code></pre></div>\n<ol start=\"2\">\n<li>position 속성 : static, absolute, relative, fixed</li>\n</ol>\n<hr>\n<p>엘리먼트가 기본적인 틀을 벗어난 배치를 제공하기 위해 존재.</p>\n<ul>\n<li>static</li>\n</ul>\n<blockquote>\n<p>기본값</p>\n</blockquote>\n<ul>\n<li>absolute</li>\n</ul>\n<blockquote>\n<p><strong>static이 아닌 기준 엘리먼트로부터 일정한 거리 떨어진 만큼 위치시킴</strong></p>\n</blockquote>\n<ul>\n<li>relative</li>\n</ul>\n<blockquote>\n<p>원래 있어야하는 위치를 기준으로 일정한 거리 떨어진 만큼 위치시킴</p>\n</blockquote>\n<ul>\n<li>fixed</li>\n</ul>\n<blockquote>\n<p>viewport를 기준으로 엘리먼트 위치시킴. 따라다니는 광고같은 것.</p>\n</blockquote>\n<h2 id=\"3float-속성--left-right-속성\" style=\"position:relative;\"><a href=\"#3float-%EC%86%8D%EC%84%B1--left-right-%EC%86%8D%EC%84%B1\" aria-label=\"3float 속성  left right 속성 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.float 속성 : left, right 속성</h2>\n<p><strong>다른 레이어</strong>에 존재하는 느낌. 2단, 3단 컬럼 배치를 할 수 있다.</p>\n<hr>\n<h3 id=\"float\" style=\"position:relative;\"><a href=\"#float\" aria-label=\"float permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>float</h3>\n<p>부모 엘리먼트의 속성에 <span class=\"bBorder\">overflow : auto</span> 를 지정하여 float 설정된 엘리먼트를 자식으로 인식시킨다.</p>","id":"051dba39-ddaf-53b7-bdad-438ff99f04de","fields":{"slug":"boost-course-pj-1-프론트엔드-강의-정리"},"frontmatter":{"date":"2018-12-27","title":"[BoostCourse] PJ1. 프론트엔드 강의 정리","category":"boostcourse","tags":null,"banner":null,"description":null},"timeToRead":1}],"categoryName":"boostcourse"}},"staticQueryHashes":[],"slicesMap":{}}